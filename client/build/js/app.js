/*! For license information please see app.js.LICENSE.txt */
(()=>{var e={9669:(e,t,n)=>{e.exports=n(1609)},5448:(e,t,n)=>{"use strict";var r=n(4867),o=n(6026),a=n(4372),i=n(5327),s=n(4097),l=n(4109),u=n(7985),c=n(5061);e.exports=function(e){return new Promise((function(t,n){var f=e.data,d=e.headers;r.isFormData(f)&&delete d["Content-Type"];var p=new XMLHttpRequest;if(e.auth){var h=e.auth.username||"",m=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";d.Authorization="Basic "+btoa(h+":"+m)}var g=s(e.baseURL,e.url);if(p.open(e.method.toUpperCase(),i(g,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in p?l(p.getAllResponseHeaders()):null,a={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:r,config:e,request:p};o(t,n,a),p=null}},p.onabort=function(){p&&(n(c("Request aborted",e,"ECONNABORTED",p)),p=null)},p.onerror=function(){n(c("Network Error",e,null,p)),p=null},p.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(c(t,e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var A=(e.withCredentials||u(g))&&e.xsrfCookieName?a.read(e.xsrfCookieName):void 0;A&&(d[e.xsrfHeaderName]=A)}if("setRequestHeader"in p&&r.forEach(d,(function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete d[t]:p.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(p.withCredentials=!!e.withCredentials),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){p&&(p.abort(),n(e),p=null)})),f||(f=null),p.send(f)}))}},1609:(e,t,n)=>{"use strict";var r=n(4867),o=n(1849),a=n(321),i=n(7185);function s(e){var t=new a(e),n=o(a.prototype.request,t);return r.extend(n,a.prototype,t),r.extend(n,t),n}var l=s(n(5655));l.Axios=a,l.create=function(e){return s(i(l.defaults,e))},l.Cancel=n(5263),l.CancelToken=n(4972),l.isCancel=n(6502),l.all=function(e){return Promise.all(e)},l.spread=n(8713),l.isAxiosError=n(6268),e.exports=l,e.exports.default=l},5263:e=>{"use strict";function t(e){this.message=e}t.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},t.prototype.__CANCEL__=!0,e.exports=t},4972:(e,t,n)=>{"use strict";var r=n(5263);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},6502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,n)=>{"use strict";var r=n(4867),o=n(5327),a=n(782),i=n(3572),s=n(7185);function l(e){this.defaults=e,this.interceptors={request:new a,response:new a}}l.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=s(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[i,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},l.prototype.getUri=function(e){return e=s(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){l.prototype[e]=function(t,n){return this.request(s(n||{},{method:e,url:t,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){l.prototype[e]=function(t,n,r){return this.request(s(r||{},{method:e,url:t,data:n}))}})),e.exports=l},782:(e,t,n)=>{"use strict";var r=n(4867);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},4097:(e,t,n)=>{"use strict";var r=n(1793),o=n(7303);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},5061:(e,t,n)=>{"use strict";var r=n(481);e.exports=function(e,t,n,o,a){var i=new Error(e);return r(i,t,n,o,a)}},3572:(e,t,n)=>{"use strict";var r=n(4867),o=n(8527),a=n(6502),i=n(5655);function s(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return s(e),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||i.adapter)(e).then((function(t){return s(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return a(t)||(s(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},481:e=>{"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},7185:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t){t=t||{};var n={},o=["url","method","data"],a=["headers","auth","proxy","params"],i=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],s=["validateStatus"];function l(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function u(o){r.isUndefined(t[o])?r.isUndefined(e[o])||(n[o]=l(void 0,e[o])):n[o]=l(e[o],t[o])}r.forEach(o,(function(e){r.isUndefined(t[e])||(n[e]=l(void 0,t[e]))})),r.forEach(a,u),r.forEach(i,(function(o){r.isUndefined(t[o])?r.isUndefined(e[o])||(n[o]=l(void 0,e[o])):n[o]=l(void 0,t[o])})),r.forEach(s,(function(r){r in t?n[r]=l(e[r],t[r]):r in e&&(n[r]=l(void 0,e[r]))}));var c=o.concat(a).concat(i).concat(s),f=Object.keys(e).concat(Object.keys(t)).filter((function(e){return-1===c.indexOf(e)}));return r.forEach(f,u),n}},6026:(e,t,n)=>{"use strict";var r=n(5061);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},8527:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},5655:(e,t,n)=>{"use strict";var r=n(4867),o=n(6016),a={"Content-Type":"application/x-www-form-urlencoded"};function i(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s,l={adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(s=n(5448)),s),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(i(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(i(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(e){l.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){l.headers[e]=r.merge(a)})),e.exports=l},1849:e=>{"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},5327:(e,t,n)=>{"use strict";var r=n(4867);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var a;if(n)a=n(t);else if(r.isURLSearchParams(t))a=t.toString();else{var i=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),i.push(o(t)+"="+o(e))})))})),a=i.join("&")}if(a){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}},7303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},4372:(e,t,n)=>{"use strict";var r=n(4867);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,a,i){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(o)&&s.push("path="+o),r.isString(a)&&s.push("domain="+a),!0===i&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},1793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},6268:e=>{"use strict";e.exports=function(e){return"object"==typeof e&&!0===e.isAxiosError}},7985:(e,t,n)=>{"use strict";var r=n(4867);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},6016:(e,t,n)=>{"use strict";var r=n(4867);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},4109:(e,t,n)=>{"use strict";var r=n(4867),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,a,i={};return e?(r.forEach(e.split("\n"),(function(e){if(a=e.indexOf(":"),t=r.trim(e.substr(0,a)).toLowerCase(),n=r.trim(e.substr(a+1)),t){if(i[t]&&o.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([n]):i[t]?i[t]+", "+n:n}})),i):i}},8713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},4867:(e,t,n)=>{"use strict";var r=n(1849),o=Object.prototype.toString;function a(e){return"[object Array]"===o.call(e)}function i(e){return void 0===e}function s(e){return null!==e&&"object"==typeof e}function l(e){if("[object Object]"!==o.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function u(e){return"[object Function]"===o.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:function(e){return null!==e&&!i(e)&&null!==e.constructor&&!i(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isPlainObject:l,isUndefined:i,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:u,isStream:function(e){return s(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function e(){var t={};function n(n,r){l(t[r])&&l(n)?t[r]=e(t[r],n):l(n)?t[r]=e({},n):a(n)?t[r]=n.slice():t[r]=n}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],n);return t},extend:function(e,t,n){return c(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},3010:e=>{function t(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}e.exports=t,t.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),n=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-n:e+n}return 0|Math.min(e,this.max)},t.prototype.reset=function(){this.attempts=0},t.prototype.setMin=function(e){this.ms=e},t.prototype.setMax=function(e){this.max=e},t.prototype.setJitter=function(e){this.jitter=e}},3704:(e,t)=>{!function(e){"use strict";t.encode=function(t){var n,r=new Uint8Array(t),o=r.length,a="";for(n=0;n<o;n+=3)a+=e[r[n]>>2],a+=e[(3&r[n])<<4|r[n+1]>>4],a+=e[(15&r[n+1])<<2|r[n+2]>>6],a+=e[63&r[n+2]];return o%3==2?a=a.substring(0,a.length-1)+"=":o%3==1&&(a=a.substring(0,a.length-2)+"=="),a},t.decode=function(t){var n,r,o,a,i,s=.75*t.length,l=t.length,u=0;"="===t[t.length-1]&&(s--,"="===t[t.length-2]&&s--);var c=new ArrayBuffer(s),f=new Uint8Array(c);for(n=0;n<l;n+=4)r=e.indexOf(t[n]),o=e.indexOf(t[n+1]),a=e.indexOf(t[n+2]),i=e.indexOf(t[n+3]),f[u++]=r<<2|o>>4,f[u++]=(15&o)<<4|a>>2,f[u++]=(3&a)<<6|63&i;return c}}("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")},8767:e=>{function t(e){if(e)return function(e){for(var n in t.prototype)e[n]=t.prototype[n];return e}(e)}e.exports=t,t.prototype.on=t.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},t.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},t.prototype.off=t.prototype.removeListener=t.prototype.removeAllListeners=t.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var o=0;o<r.length;o++)if((n=r[o])===t||n.fn===t){r.splice(o,1);break}return 0===r.length&&delete this._callbacks["$"+e],this},t.prototype.emit=function(e){this._callbacks=this._callbacks||{};for(var t=new Array(arguments.length-1),n=this._callbacks["$"+e],r=1;r<arguments.length;r++)t[r-1]=arguments[r];if(n){r=0;for(var o=(n=n.slice(0)).length;r<o;++r)n[r].apply(this,t)}return this},t.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},t.prototype.hasListeners=function(e){return!!this.listeners(e).length}},2061:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(4015),o=n.n(r),a=n(3645),i=n.n(a)()(o());i.push([e.id,'.register{color:#eef}.register .form{top:35%;width:310px}.register .form textarea{resize:none}.register .form .hidden{display:none}.register .form .error{color:#931621;word-break:break-all}.login{color:#eef}.login .form{top:35%;width:310px}.login .form .hidden{display:none}.login .form .error{color:#931621;word-break:break-all}.connectToServer .show{display:block}.connectToServer .hidden{display:hidden}.connectToServer .server{display:block;color:#eef;cursor:pointer;opacity:.8;transition:.2s opacity}.connectToServer .server:hover{transition:.2s opacity;opacity:1}.server .title{color:#eef}.server .button-call,.server .call-btn,.server .call-buttons{display:inline;float:right;margin-right:5px}.server .callPanel{background:#131313;width:15%;height:80vh;margin-right:10px;align-self:center;border-radius:4px;padding:10px}@media only screen and (min-width: 992px)and (max-width: 1200px){.server .callPanel{width:20%}}@media only screen and (max-height: 900px){.server .callPanel{height:70vh}}.server .callPanel .call-list{margin-top:5px}.server .channel{padding:15px;margin-top:20px;width:85%;align-self:center}@media only screen and (min-width: 992px)and (max-width: 1200px){.server .channel{width:80%}}.server .channel-button:disabled,.server .channel-button[disabled]{background:#232323;cursor:not-allowed;box-shadow:none}.server .channel-button{display:flex;justify-content:space-between;cursor:pointer;padding-top:5px;padding-bottom:5px;padding-right:10px;padding-left:10px;width:130px;color:#eef;text-decoration:none;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transition:.2s;position:relative}.server .notif{position:absolute;background:#931621;border-radius:50%;right:5px;width:16px;height:16px;top:50%;transform:translateY(-50%);font-size:12px;z-index:4;text-align:center}.server .channel-button:hover{-webkit-box-shadow:2px 0px 0px 0px #931621;-moz-box-shadow:2px 0px 0px 0px #931621;box-shadow:2px 0px 0px 0px #931621;transition:.2s}.server .user-call{display:block;cursor:pointer;user-select:none;width:130px;color:#eef;text-decoration:none;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transition:.2s}.server .users{background:#131313;height:100vh;width:150px;padding-top:5px}.server .messages{padding:10px;position:relative;height:80vh;scroll-behavior:smooth;background:#131313;border-radius:4px 4px 0px 0px;overflow-y:auto}@media only screen and (max-height: 900px){.server .messages{height:70vh}}.server .disconnect-button{float:right;display:inline}.server .host-title{display:inline}.server .server-info{background:#131313;margin-top:25px;padding:20px;z-index:2;height:50px;border-bottom:#333 solid 1px}.server .motd{position:absolute;-moz-transform:translateX(100%);-webkit-transform:translateX(100%);transform:translateX(100%);-moz-animation:scroll-left 15s linear infinite;-webkit-animation:scroll-left 15s linear infinite;animation:scroll-left 15s linear infinite;user-select:none}.server .incall{width:85%}.server .message-send{text-align:left;box-sizing:border-box;width:100%;border-radius:0px 0px 4px 4px}.server .incall-input{width:76%}.server .panel{display:flex;position:absolute;bottom:0;left:150px;top:100px;right:0}.server .message-holder{list-style-type:none;display:flex;margin:5px}.server .message-holder.mine{justify-content:space-between}.server .message-holder .message{background:#1d1d1d;border-radius:4px;box-sizing:border-box;padding:5px;width:400px}.server .message-holder .message.mine{background:linear-gradient(to bottom left, #6e1018, #931621)}.server .message-holder .message .message-content{display:inline;color:#ccc}.server .message-holder .message .message-content .text-normal{margin-left:5px;overflow-wrap:break-word;text-align:justify;display:inline}.server .message-holder .message .signature-check{float:right;display:inline;cursor:pointer}.server .message-holder .message .signature-check:active .hover{display:block}.server .message-holder .message .signature-check .hover{display:none;color:#ccc;position:absolute;right:5%;margin-top:-22px;max-width:350px;word-break:break-all;background:#232323;padding:4px}.server .hidden{display:none}.server .show{display:initial}@-moz-keyframes scroll-left{0%{-moz-transform:translateX(-100%)}100%{-moz-transform:translateX(100vw)}}@-webkit-keyframes scroll-left{0%{-webkit-transform:translateX(-100%)}100%{-webkit-transform:translateX(100vw)}}@keyframes scroll-left{0%{-moz-transform:translateX(-100%);-webkit-transform:translateX(-100%);transform:translateX(-100%)}100%{-moz-transform:translateX(100vw);-webkit-transform:translateX(100vw);transform:translateX(100vw)}}.clear-data .confirm{position:absolute;transform:translate(-50%, -50%);width:250px;height:125px;background:#131313;border-radius:4px;border:2px solid #931621;left:50%;top:50%;z-index:9999;padding:15px}.clear-data .confirm .text-normal{color:#eef}.clear-data .confirm .text-normal .infotext{font-size:12px;font-style:italic}.clear-data .confirm .buttons{display:flex;justify-content:space-between;align-items:center;width:60%;margin:0 auto;margin-top:10px}.clear-data .cleardata-btn{position:absolute;background:transparent;left:5px;bottom:5px}.opened{position:absolute;top:0;bottom:0;right:0;left:0;background:rgba(13,13,13,.8)}.topBar{z-index:9999;user-select:none;padding:5px;position:absolute;top:0;right:0;left:0;height:25px;background:#000;color:#eef;-webkit-app-region:drag;display:flex}.topBar .btns{margin-left:auto}.topBar .btns .btn{-webkit-app-region:no-drag;padding:10px;padding-left:10px;padding-right:10px;transition:.2s background;cursor:pointer}.topBar .btns .btn:hover{transition:.2s background;background:#232323}html,body{overflow:hidden;height:100%}.page{background:#232323;position:absolute;top:0;bottom:0;right:0;left:0}*{padding:0;margin:0;font-family:"Consolas",sans-serif}.form{background:#131313;width:fit-content;padding:15px;border-radius:4px;position:absolute;transform:translate(-50%);top:40%;left:50%}.input{background:#333;border:none;min-width:300px;display:block;padding:5px;color:#eef}.input:focus{outline:none}.form-button-outline{background:transparent;color:#eef;padding-top:5px;padding-bottom:5px;padding-right:10px;padding-left:10px;border:1px solid #931621;border-radius:2px;margin-top:2px;margin-bottom:2px;transition:.2s;cursor:pointer}.form-button-outline:hover{background:#931621;transition:.2s}.form-button-outline:focus{outline:none}.form-label{color:#eef}.form-button{background:#931621;color:#eef;padding-top:5px;padding-bottom:5px;padding-right:10px;padding-left:10px;border:1px solid #931621;border-radius:2px;margin-top:2px;margin-bottom:2px;transition:.2s;cursor:pointer}.form-button:hover{background:#6e1018;transition:.2s}.form-button:focus{outline:none}::-webkit-scrollbar{width:10px}::-webkit-scrollbar-track{background:#131313}::-webkit-scrollbar-thumb{background:#232323}::-webkit-scrollbar-thumb:hover{background:#333}',"",{version:3,sources:["webpack://./src/styles/Register.scss","webpack://./src/styles/Login.scss","webpack://./src/styles/ConnectToServer.scss","webpack://./src/styles/Server.scss","webpack://./src/styles/ClearData.scss","webpack://./src/styles/TopBar.scss","webpack://./src/styles/index.scss"],names:[],mappings:"AAAA,UACI,UAAA,CACA,gBACI,OAAA,CACA,WAAA,CACA,yBACI,WAAA,CAEJ,wBACI,YAAA,CAEJ,uBACI,aAAA,CACA,oBAAA,CCbZ,OACI,UAAA,CACA,aACI,OAAA,CACA,WAAA,CACA,qBACI,YAAA,CAEJ,oBACI,aAAA,CACA,oBAAA,CCTR,uBACI,aAAA,CAEJ,yBACI,cAAA,CAEJ,yBACI,aAAA,CACA,UAAA,CACA,cAAA,CACA,UAAA,CACA,sBAAA,CACA,+BACI,sBAAA,CACA,SAAA,CCdR,eACI,UAAA,CAEJ,6DAGI,cAAA,CACA,WAAA,CACA,gBAAA,CAEJ,mBACI,kBAAA,CACA,SAAA,CACA,WAAA,CAOA,iBAAA,CACA,iBAAA,CACA,iBAAA,CACA,YAAA,CATA,iEAJJ,mBAKQ,SAAA,CAAA,CAEJ,2CAPJ,mBAQQ,WAAA,CAAA,CAMJ,8BACI,cAAA,CAGR,iBACI,YAAA,CACA,eAAA,CACA,SAAA,CAIA,iBAAA,CAHA,iEAJJ,iBAKQ,SAAA,CAAA,CAKR,mEAEI,kBAAA,CACA,kBAAA,CACA,eAAA,CAEJ,wBACI,YAAA,CACA,6BAAA,CACA,cAAA,CACA,eAAA,CACA,kBAAA,CACA,kBAAA,CACA,iBAAA,CACA,WAAA,CACA,UAAA,CACA,oBAAA,CACA,kBAAA,CACA,sBAAA,CACA,eAAA,CACA,cAAA,CACA,iBAAA,CAEJ,eACI,iBAAA,CACA,kBAAA,CACA,iBAAA,CACA,SAAA,CACA,UAAA,CACA,WAAA,CACA,OAAA,CACA,0BAAA,CACA,cAAA,CACA,SAAA,CACA,iBAAA,CAEJ,8BACI,0CAAA,CACA,uCAAA,CACA,kCAAA,CACA,cAAA,CAEJ,mBACI,aAAA,CACA,cAAA,CACA,gBAAA,CACA,WAAA,CACA,UAAA,CACA,oBAAA,CACA,kBAAA,CACA,sBAAA,CACA,eAAA,CACA,cAAA,CAEJ,eACI,kBAAA,CACA,YAAA,CACA,WAAA,CACA,eAAA,CAGJ,kBACI,YAAA,CACA,iBAAA,CACA,WAAA,CAIA,sBAAA,CACA,kBAAA,CACA,6BAAA,CACA,eAAA,CANA,2CAJJ,kBAKQ,WAAA,CAAA,CAOR,2BACI,WAAA,CACA,cAAA,CAEJ,oBACI,cAAA,CAEJ,qBACI,kBAAA,CACA,eAAA,CACA,YAAA,CACA,SAAA,CACA,WAAA,CACA,4BAAA,CAGJ,cACI,iBAAA,CACA,+BAAA,CACA,kCAAA,CACA,0BAAA,CACA,8CAAA,CACA,iDAAA,CACA,yCAAA,CACA,gBAAA,CAEJ,gBACI,SAAA,CAEJ,sBACI,eAAA,CACA,qBAAA,CACA,UAAA,CACA,6BAAA,CAEJ,sBACI,SAAA,CAEJ,eACI,YAAA,CACA,iBAAA,CACA,QAAA,CACA,UAAA,CACA,SAAA,CACA,OAAA,CAEJ,wBACI,oBAAA,CACA,YAAA,CACA,UAAA,CACA,6BACI,6BAAA,CAEJ,iCACI,kBAAA,CACA,iBAAA,CACA,qBAAA,CACA,WAAA,CACA,WAAA,CACA,sCACI,4DAAA,CAEJ,kDACI,cAAA,CACA,UAAA,CAGJ,+DACI,eAAA,CACA,wBAAA,CACA,kBAAA,CACA,cAAA,CAEJ,kDACI,WAAA,CACA,cAAA,CACA,cAAA,CACA,gEACI,aAAA,CAGR,yDACI,YAAA,CACA,UAAA,CACA,iBAAA,CACA,QAAA,CACA,gBAAA,CACA,eAAA,CACA,oBAAA,CACA,kBAAA,CACA,WAAA,CAIZ,gBACI,YAAA,CAEJ,cACI,eAAA,CAIR,4BACI,GACI,gCAAA,CAEJ,KACI,gCAAA,CAAA,CAIR,+BACI,GACI,mCAAA,CAEJ,KACI,mCAAA,CAAA,CAIR,uBACI,GACI,gCAAA,CACA,mCAAA,CACA,2BAAA,CAEJ,KACI,gCAAA,CACA,mCAAA,CACA,2BAAA,CAAA,CChPJ,qBACI,iBAAA,CACA,+BAAA,CACA,WAAA,CACA,YAAA,CACA,kBAAA,CACA,iBAAA,CACA,wBAAA,CACA,QAAA,CACA,OAAA,CACA,YAAA,CACA,YAAA,CACA,kCACI,UAAA,CACA,4CACI,cAAA,CACA,iBAAA,CAGR,8BACI,YAAA,CACA,6BAAA,CACA,kBAAA,CACA,SAAA,CACA,aAAA,CACA,eAAA,CAGR,2BACI,iBAAA,CACA,sBAAA,CACA,QAAA,CACA,UAAA,CAGR,QACI,iBAAA,CACA,KAAA,CACA,QAAA,CACA,OAAA,CACA,MAAA,CACA,4BAAA,CC1CJ,QACI,YAAA,CACA,gBAAA,CACA,WAAA,CACA,iBAAA,CACA,KAAA,CACA,OAAA,CACA,MAAA,CACA,WAAA,CACA,eAAA,CACA,UAAA,CACA,uBAAA,CACA,YAAA,CACA,cACI,gBAAA,CACA,mBACI,0BAAA,CACA,YAAA,CACA,iBAAA,CACA,kBAAA,CACA,yBAAA,CACA,cAAA,CACA,yBACI,yBAAA,CACA,kBAAA,CClBhB,UACI,eAAA,CACA,WAAA,CAEJ,MACI,kBAAA,CACA,iBAAA,CACA,KAAA,CACA,QAAA,CACA,OAAA,CACA,MAAA,CAEJ,EACI,SAAA,CACA,QAAA,CACA,iCAAA,CAEJ,MACI,kBAAA,CACA,iBAAA,CACA,YAAA,CACA,iBAAA,CACA,iBAAA,CACA,yBAAA,CACA,OAAA,CACA,QAAA,CAEJ,OACI,eAAA,CACA,WAAA,CACA,eAAA,CACA,aAAA,CACA,WAAA,CACA,UAAA,CACA,aACI,YAAA,CAGR,qBACI,sBAAA,CACA,UAAA,CACA,eAAA,CACA,kBAAA,CACA,kBAAA,CACA,iBAAA,CACA,wBAAA,CACA,iBAAA,CACA,cAAA,CACA,iBAAA,CACA,cAAA,CACA,cAAA,CACA,2BACI,kBAAA,CACA,cAAA,CAGJ,2BACI,YAAA,CAGR,YACI,UAAA,CAEJ,aACI,kBAAA,CACA,UAAA,CACA,eAAA,CACA,kBAAA,CACA,kBAAA,CACA,iBAAA,CACA,wBAAA,CACA,iBAAA,CACA,cAAA,CACA,iBAAA,CACA,cAAA,CACA,cAAA,CACA,mBACI,kBAAA,CACA,cAAA,CAEJ,mBACI,YAAA,CAGR,oBACI,UAAA,CAGJ,0BACI,kBAAA,CAGJ,0BACI,kBAAA,CAGJ,gCACI,eAAA",sourcesContent:[".register {\n    color: #eeeeff;\n    .form {\n        top: 35%;\n        width: 310px;\n        textarea {\n            resize: none;\n        }\n        .hidden {\n            display: none;\n        }\n        .error {\n            color: #931621;\n            word-break: break-all;\n        }\n    }\n}",".login {\n    color: #eeeeff;\n    .form {\n        top: 35%;\n        width: 310px;\n        .hidden {\n            display: none;\n        }\n        .error {\n            color: #931621;\n            word-break: break-all;\n        }\n    }\n}",".connectToServer {\n    .show {\n        display: block;\n    }\n    .hidden {\n        display: hidden;\n    }\n    .server {\n        display: block;\n        color: #eeeeff;\n        cursor: pointer;\n        opacity: 0.8;\n        transition: 0.2s opacity;\n        &:hover {\n            transition: 0.2s opacity;\n            opacity: 1.0;\n        }\n    }\n} ",".server {\n    .title {\n        color: #eeeeff;\n    }\n    .button-call,\n    .call-btn,\n    .call-buttons {\n        display: inline;\n        float: right;\n        margin-right: 5px;\n    }\n    .callPanel {\n        background: #131313;\n        width: 15%;\n        height: 80vh;\n        @media only screen and (min-width: 992px) and (max-width: 1200px) {\n            width: 20%;\n        }\n        @media only screen and (max-height: 900px) {\n            height: 70vh;\n        }\n        margin-right: 10px;\n        align-self: center;\n        border-radius: 4px;\n        padding: 10px;\n        .call-list {\n            margin-top: 5px;\n        }\n    }\n    .channel {\n        padding: 15px;\n        margin-top: 20px;\n        width: 85%;\n        @media only screen and (min-width: 992px) and (max-width: 1200px) {\n            width: 80%;\n        }\n        align-self: center;\n    }\n\n    .channel-button:disabled,\n    .channel-button[disabled] {\n        background: #232323;\n        cursor: not-allowed;\n        box-shadow: none;\n    }\n    .channel-button {\n        display: flex;\n        justify-content: space-between;\n        cursor: pointer;\n        padding-top: 5px;\n        padding-bottom: 5px;\n        padding-right: 10px;\n        padding-left: 10px;\n        width: 130px;\n        color: #eeeeff;\n        text-decoration: none;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n        transition: 0.2s;\n        position: relative;\n    }\n    .notif {\n        position: absolute;\n        background: #931621;\n        border-radius: 50%;\n        right: 5px;\n        width: 16px;\n        height: 16px;\n        top: 50%;\n        transform: translateY(-50%);\n        font-size: 12px;\n        z-index: 4;\n        text-align: center;\n    }\n    .channel-button:hover {\n        -webkit-box-shadow: 2px 0px 0px 0px rgba(147, 22, 33, 1);\n        -moz-box-shadow: 2px 0px 0px 0px rgba(147, 22, 33, 1);\n        box-shadow: 2px 0px 0px 0px rgba(147, 22, 33, 1);\n        transition: 0.2s;\n    }\n    .user-call {\n        display: block;\n        cursor: pointer;\n        user-select: none;\n        width: 130px;\n        color: #eeeeff;\n        text-decoration: none;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        overflow: hidden;\n        transition: 0.2s;\n    }\n    .users {\n        background: #131313;\n        height: 100vh;\n        width: 150px;\n        padding-top: 5px;\n        /* box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px; */\n    }\n    .messages {\n        padding: 10px;\n        position: relative;\n        height: 80vh;\n        @media only screen and (max-height: 900px) {\n            height: 70vh;\n        }\n        scroll-behavior: smooth;\n        background: #131313;\n        border-radius: 4px 4px 0px 0px;\n        overflow-y: auto;\n    }\n    .disconnect-button {\n        float: right;\n        display: inline;\n    }\n    .host-title {\n        display: inline;\n    }\n    .server-info {\n        background: #131313;\n        margin-top: 25px;\n        padding: 20px;\n        z-index: 2;\n        height: 50px;\n        border-bottom: #333333 solid 1px;\n        /* box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px; */\n    }\n    .motd {\n        position: absolute;\n        -moz-transform: translateX(100%);\n        -webkit-transform: translateX(100%);\n        transform: translateX(100%);\n        -moz-animation: scroll-left 15s linear infinite;\n        -webkit-animation: scroll-left 15s linear infinite;\n        animation: scroll-left 15s linear infinite;\n        user-select: none;\n    }\n    .incall {\n        width: 85%;\n    }\n    .message-send {\n        text-align: left;\n        box-sizing: border-box;\n        width: 100%;\n        border-radius: 0px 0px 4px 4px;\n    }\n    .incall-input {\n        width: 76%;\n    }\n    .panel {\n        display: flex;\n        position: absolute;\n        bottom: 0;\n        left: 150px;\n        top: 100px;\n        right: 0;\n    }\n    .message-holder {\n        list-style-type: none;\n        display: flex;\n        margin: 5px;\n        &.mine {\n            justify-content: space-between;\n        }\n        .message {\n            background: #1d1d1d;\n            border-radius: 4px;\n            box-sizing: border-box;\n            padding: 5px;\n            width: 400px;\n            &.mine {\n                background: linear-gradient(to bottom left,#6e1018,#931621);\n            }\n            .message-content {\n                display: inline;\n                color: #ccc;\n            }\n    \n            .message-content .text-normal {\n                margin-left: 5px;\n                overflow-wrap: break-word;\n                text-align: justify;\n                display: inline;\n            }\n            .signature-check {\n                float: right;\n                display: inline;\n                cursor: pointer;\n                &:active .hover {\n                    display: block;\n                }\n            }\n            .signature-check .hover {\n                display: none;\n                color: #ccc;\n                position: absolute;\n                right: 5%;\n                margin-top: -22px;\n                max-width: 350px;\n                word-break: break-all;\n                background: #232323;\n                padding: 4px;\n            }\n        }\n    }\n    .hidden {\n        display: none;\n    }\n    .show {\n        display: initial;\n    }\n}\n\n@-moz-keyframes scroll-left {\n    0% {\n        -moz-transform: translateX(-100%);\n    }\n    100% {\n        -moz-transform: translateX(100vw);\n    }\n}\n\n@-webkit-keyframes scroll-left {\n    0% {\n        -webkit-transform: translateX(-100%);\n    }\n    100% {\n        -webkit-transform: translateX(100vw);\n    }\n}\n\n@keyframes scroll-left {\n    0% {\n        -moz-transform: translateX(-100%);\n        -webkit-transform: translateX(-100%);\n        transform: translateX(-100%);\n    }\n    100% {\n        -moz-transform: translateX(100vw);\n        -webkit-transform: translateX(100vw);\n        transform: translateX(100vw);\n    }\n}\n",".clear-data {\n    .confirm {\n        position: absolute;\n        transform: translate(-50%, -50%);\n        width: 250px;\n        height: 125px;\n        background: #131313;\n        border-radius: 4px;\n        border: 2px solid #931621;\n        left: 50%;\n        top: 50%;\n        z-index: 9999;\n        padding: 15px;\n        .text-normal {\n            color: #eeeeff;\n            .infotext {\n                font-size: 12px;\n                font-style: italic;\n            }\n        }\n        .buttons {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            width: 60%;\n            margin: 0 auto;\n            margin-top: 10px;\n        }\n    }\n    .cleardata-btn {\n        position: absolute;\n        background: transparent;\n        left: 5px;\n        bottom: 5px;\n    }\n}\n.opened {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    background: rgba(13, 13, 13, 0.8);\n}",".topBar {\n    z-index: 9999;\n    user-select: none;\n    padding: 5px;\n    position: absolute;\n    top: 0;\n    right: 0;\n    left: 0;\n    height: 25px;\n    background: #000;\n    color: #eeeeff;\n    -webkit-app-region: drag;\n    display: flex;\n    .btns {\n        margin-left: auto;\n        .btn {\n            -webkit-app-region: no-drag;\n            padding: 10px;\n            padding-left: 10px;\n            padding-right: 10px;\n            transition: 0.2s background;\n            cursor: pointer;\n            &:hover {\n                transition: 0.2s background;\n                background: #232323;\n            }\n        }\n    }\n}","@import './Register.scss';\n@import './Login.scss';\n@import './ConnectToServer.scss';\n@import './Server.scss';\n@import './ClearData.scss';\n@import './TopBar.scss';\nhtml,body {\n    overflow: hidden;\n    height: 100%;\n}\n.page {\n    background: #232323;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n}\n* {\n    padding: 0;\n    margin: 0;\n    font-family: 'Consolas', sans-serif;\n}\n.form {\n    background: #131313;\n    width: fit-content;\n    padding: 15px;\n    border-radius: 4px;\n    position: absolute;\n    transform: translate(-50%);\n    top: 40%;\n    left: 50%;\n}\n.input {\n    background: #333333;\n    border: none;\n    min-width: 300px;\n    display: block;\n    padding: 5px;\n    color: #eeeeff;\n    &:focus {\n        outline: none;\n    }\n}\n.form-button-outline {\n    background: transparent;\n    color: #eeeeff;\n    padding-top: 5px;\n    padding-bottom: 5px;\n    padding-right: 10px;\n    padding-left: 10px;\n    border: 1px solid #931621;\n    border-radius: 2px;\n    margin-top: 2px;\n    margin-bottom: 2px;\n    transition: 0.2s;\n    cursor: pointer;\n    &:hover {\n        background: #931621;\n        transition: 0.2s;\n    }\n\n    &:focus {\n        outline: none;\n    }\n}\n.form-label {\n    color: #eeeeff;\n}\n.form-button {\n    background: #931621;\n    color: #eeeeff;\n    padding-top: 5px;\n    padding-bottom: 5px;\n    padding-right: 10px;\n    padding-left: 10px;\n    border: 1px solid #931621;\n    border-radius: 2px;\n    margin-top: 2px;\n    margin-bottom: 2px;\n    transition: 0.2s;\n    cursor: pointer;\n    &:hover {\n        background: #6e1018;\n        transition: 0.2s;\n    }\n    &:focus {\n        outline: none;\n    }\n}\n::-webkit-scrollbar {\n    width: 10px;\n}\n\n::-webkit-scrollbar-track {\n    background: #131313;\n}\n\n::-webkit-scrollbar-thumb {\n    background: #232323;\n}\n\n::-webkit-scrollbar-thumb:hover {\n    background: #333333;\n}\n"],sourceRoot:""}]);const s=i},3645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);r&&o[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},4015:e=>{"use strict";function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,o=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){var n=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=n){var r,o,a=[],i=!0,s=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){s=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(s)throw o}}return a}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],i=o[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),u="/*# ".concat(l," */"),c=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[a].concat(c).concat([u]).join("\n")}return[a].join("\n")}},1227:(e,t,n)=>{t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let r=0,o=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(r++,"%c"===e&&(o=r))})),t.splice(o,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=n(2447)(t);const{formatters:r}=e.exports;r.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},2447:(e,t,n)=>{e.exports=function(e){function t(e){let n,o=null;function a(...e){if(!a.enabled)return;const r=a,o=Number(new Date),i=o-(n||o);r.diff=i,r.prev=n,r.curr=o,n=o,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let s=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((n,o)=>{if("%%"===n)return"%";s++;const a=t.formatters[o];if("function"==typeof a){const t=e[s];n=a.call(r,t),e.splice(s,1),s--}return n})),t.formatArgs.call(r,e),(r.log||t.log).apply(r,e)}return a.namespace=e,a.useColors=t.useColors(),a.color=t.selectColor(e),a.extend=r,a.destroy=t.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null===o?t.enabled(e):o,set:e=>{o=e}}),"function"==typeof t.init&&t.init(a),a}function r(e,n){const r=t(this.namespace+(void 0===n?":":n)+e);return r.log=this.log,r}function o(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(o),...t.skips.map(o).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let n;t.save(e),t.names=[],t.skips=[];const r=("string"==typeof e?e:"").split(/[\s,]+/),o=r.length;for(n=0;n<o;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(7824),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((n=>{t[n]=e[n]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let n=0;for(let t=0;t<e.length;t++)n=(n<<5)-n+e.charCodeAt(t),n|=0;return t.colors[Math.abs(n)%t.colors.length]},t.enable(t.load()),t}},3549:e=>{e.exports="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")()},5983:(e,t,n)=>{const r=n(2192);e.exports=(e,t)=>new r(e,t),e.exports.Socket=r,e.exports.protocol=r.protocol,e.exports.Transport=n(6496),e.exports.transports=n(3352),e.exports.parser=n(9743)},2192:(e,t,n)=>{const r=n(3352),o=n(8767),a=n(1227)("engine.io-client:socket"),i=n(9743),s=n(4187),l=n(1830);class u extends o{constructor(e,t={}){super(),e&&"object"==typeof e&&(t=e,e=null),e?(e=s(e),t.hostname=e.host,t.secure="https"===e.protocol||"wss"===e.protocol,t.port=e.port,e.query&&(t.query=e.query)):t.host&&(t.hostname=s(t.host).host),this.secure=null!=t.secure?t.secure:"undefined"!=typeof location&&"https:"===location.protocol,t.hostname&&!t.port&&(t.port=this.secure?"443":"80"),this.hostname=t.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=t.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.transports=t.transports||["polling","websocket"],this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,jsonp:!0,timestampParam:"t",rememberUpgrade:!1,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!0},t),this.opts.path=this.opts.path.replace(/\/$/,"")+"/","string"==typeof this.opts.query&&(this.opts.query=l.decode(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&(this.opts.closeOnBeforeunload&&addEventListener("beforeunload",(()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())}),!1),"localhost"!==this.hostname&&(this.offlineEventListener=()=>{this.onClose("transport close")},addEventListener("offline",this.offlineEventListener,!1))),this.open()}createTransport(e){a('creating transport "%s"',e);const t=function(e){const t={};for(let n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}(this.opts.query);t.EIO=i.protocol,t.transport=e,this.id&&(t.sid=this.id);const n=Object.assign({},this.opts.transportOptions[e],this.opts,{query:t,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return a("options: %j",n),new r[e](n)}open(){let e;if(this.opts.rememberUpgrade&&u.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length)return void setTimeout((()=>{this.emit("error","No transports available")}),0);e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return a("error while creating transport: %s",e),this.transports.shift(),void this.open()}e.open(),this.setTransport(e)}setTransport(e){a("setting transport %s",e.name),this.transport&&(a("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=e,e.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",(()=>{this.onClose("transport close")}))}probe(e){a('probing transport "%s"',e);let t=this.createTransport(e,{probe:1}),n=!1;u.priorWebsocketSuccess=!1;const r=()=>{n||(a('probe transport "%s" opened',e),t.send([{type:"ping",data:"probe"}]),t.once("packet",(r=>{if(!n)if("pong"===r.type&&"probe"===r.data){if(a('probe transport "%s" pong',e),this.upgrading=!0,this.emit("upgrading",t),!t)return;u.priorWebsocketSuccess="websocket"===t.name,a('pausing current transport "%s"',this.transport.name),this.transport.pause((()=>{n||"closed"!==this.readyState&&(a("changing transport and sending upgrade packet"),f(),this.setTransport(t),t.send([{type:"upgrade"}]),this.emit("upgrade",t),t=null,this.upgrading=!1,this.flush())}))}else{a('probe transport "%s" failed',e);const n=new Error("probe error");n.transport=t.name,this.emit("upgradeError",n)}})))};function o(){n||(n=!0,f(),t.close(),t=null)}const i=n=>{const r=new Error("probe error: "+n);r.transport=t.name,o(),a('probe transport "%s" failed because of error: %s',e,n),this.emit("upgradeError",r)};function s(){i("transport closed")}function l(){i("socket closed")}function c(e){t&&e.name!==t.name&&(a('"%s" works - aborting "%s"',e.name,t.name),o())}const f=()=>{t.removeListener("open",r),t.removeListener("error",i),t.removeListener("close",s),this.removeListener("close",l),this.removeListener("upgrading",c)};t.once("open",r),t.once("error",i),t.once("close",s),this.once("close",l),this.once("upgrading",c),t.open()}onOpen(){if(a("socket open"),this.readyState="open",u.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade&&this.transport.pause){a("starting upgrade probes");let e=0;const t=this.upgrades.length;for(;e<t;e++)this.probe(this.upgrades[e])}}onPacket(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(a('socket receive: type "%s", data "%s"',e.type,e.data),this.emit("packet",e),this.emit("heartbeat"),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emit("pong");break;case"error":const t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emit("data",e.data),this.emit("message",e.data)}else a('packet received with socket readyState "%s"',this.readyState)}onHandshake(e){this.emit("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){clearTimeout(this.pingTimeoutTimer),this.pingTimeoutTimer=setTimeout((()=>{this.onClose("ping timeout")}),this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()}flush(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(a("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))}write(e,t,n){return this.sendPacket("message",e,t,n),this}send(e,t,n){return this.sendPacket("message",e,t,n),this}sendPacket(e,t,n,r){if("function"==typeof t&&(r=t,t=void 0),"function"==typeof n&&(r=n,n=null),"closing"===this.readyState||"closed"===this.readyState)return;(n=n||{}).compress=!1!==n.compress;const o={type:e,data:t,options:n};this.emit("packetCreate",o),this.writeBuffer.push(o),r&&this.once("flush",r),this.flush()}close(){const e=()=>{this.onClose("forced close"),a("socket closing - telling transport to close"),this.transport.close()},t=()=>{this.removeListener("upgrade",t),this.removeListener("upgradeError",t),e()},n=()=>{this.once("upgrade",t),this.once("upgradeError",t)};return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(()=>{this.upgrading?n():e()})):this.upgrading?n():e()),this}onError(e){a("socket error %j",e),u.priorWebsocketSuccess=!1,this.emit("error",e),this.onClose("transport error",e)}onClose(e,t){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(a('socket close with reason: "%s"',e),clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),"function"==typeof removeEventListener&&removeEventListener("offline",this.offlineEventListener,!1),this.readyState="closed",this.id=null,this.emit("close",e,t),this.writeBuffer=[],this.prevBufferLen=0)}filterUpgrades(e){const t=[];let n=0;const r=e.length;for(;n<r;n++)~this.transports.indexOf(e[n])&&t.push(e[n]);return t}}u.priorWebsocketSuccess=!1,u.protocol=i.protocol,e.exports=u},6496:(e,t,n)=>{const r=n(9743),o=n(8767),a=n(1227)("engine.io-client:transport");e.exports=class extends o{constructor(e){super(),this.opts=e,this.query=e.query,this.readyState="",this.socket=e.socket}onError(e,t){const n=new Error(e);return n.type="TransportError",n.description=t,this.emit("error",n),this}open(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(e){"open"===this.readyState?this.write(e):a("transport is not open, discarding packets")}onOpen(){this.readyState="open",this.writable=!0,this.emit("open")}onData(e){const t=r.decodePacket(e,this.socket.binaryType);this.onPacket(t)}onPacket(e){this.emit("packet",e)}onClose(){this.readyState="closed",this.emit("close")}}},3352:(e,t,n)=>{const r=n(2777),o=n(3416),a=n(9785),i=n(4442);t.polling=function(e){let t,n=!1,i=!1;const s=!1!==e.jsonp;if("undefined"!=typeof location){const t="https:"===location.protocol;let r=location.port;r||(r=t?443:80),n=e.hostname!==location.hostname||r!==e.port,i=e.secure!==t}if(e.xdomain=n,e.xscheme=i,t=new r(e),"open"in t&&!e.forceJSONP)return new o(e);if(!s)throw new Error("JSONP disabled");return new a(e)},t.websocket=i},9785:(e,t,n)=>{const r=n(9015),o=n(3549),a=/\n/g,i=/\\n/g;let s;e.exports=class extends r{constructor(e){super(e),this.query=this.query||{},s||(s=o.___eio=o.___eio||[]),this.index=s.length,s.push(this.onData.bind(this)),this.query.j=this.index}get supportsBinary(){return!1}doClose(){this.script&&(this.script.onerror=()=>{},this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),super.doClose()}doPoll(){const e=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),e.async=!0,e.src=this.uri(),e.onerror=e=>{this.onError("jsonp poll error",e)};const t=document.getElementsByTagName("script")[0];t?t.parentNode.insertBefore(e,t):(document.head||document.body).appendChild(e),this.script=e,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout((function(){const e=document.createElement("iframe");document.body.appendChild(e),document.body.removeChild(e)}),100)}doWrite(e,t){let n;if(!this.form){const e=document.createElement("form"),t=document.createElement("textarea"),n=this.iframeId="eio_iframe_"+this.index;e.className="socketio",e.style.position="absolute",e.style.top="-1000px",e.style.left="-1000px",e.target=n,e.method="POST",e.setAttribute("accept-charset","utf-8"),t.name="d",e.appendChild(t),document.body.appendChild(e),this.form=e,this.area=t}function r(){o(),t()}this.form.action=this.uri();const o=()=>{if(this.iframe)try{this.form.removeChild(this.iframe)}catch(e){this.onError("jsonp polling iframe removal error",e)}try{const e='<iframe src="javascript:0" name="'+this.iframeId+'">';n=document.createElement(e)}catch(e){n=document.createElement("iframe"),n.name=this.iframeId,n.src="javascript:0"}n.id=this.iframeId,this.form.appendChild(n),this.iframe=n};o(),e=e.replace(i,"\\\n"),this.area.value=e.replace(a,"\\n");try{this.form.submit()}catch(e){}this.iframe.attachEvent?this.iframe.onreadystatechange=()=>{"complete"===this.iframe.readyState&&r()}:this.iframe.onload=r}}},3416:(e,t,n)=>{const r=n(2777),o=n(9015),a=n(8767),{pick:i}=n(6839),s=n(3549),l=n(1227)("engine.io-client:polling-xhr");function u(){}const c=null!=new r({xdomain:!1}).responseType;class f extends a{constructor(e,t){super(),this.opts=t,this.method=t.method||"GET",this.uri=e,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.create()}create(){const e=i(this.opts,"agent","enablesXDR","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");e.xdomain=!!this.opts.xd,e.xscheme=!!this.opts.xs;const t=this.xhr=new r(e);try{l("xhr open %s: %s",this.method,this.uri),t.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){t.setDisableHeaderCheck&&t.setDisableHeaderCheck(!0);for(let e in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(e)&&t.setRequestHeader(e,this.opts.extraHeaders[e])}}catch(e){}if("POST"===this.method)try{t.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{t.setRequestHeader("Accept","*/*")}catch(e){}"withCredentials"in t&&(t.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(t.timeout=this.opts.requestTimeout),this.hasXDR()?(t.onload=()=>{this.onLoad()},t.onerror=()=>{this.onError(t.responseText)}):t.onreadystatechange=()=>{4===t.readyState&&(200===t.status||1223===t.status?this.onLoad():setTimeout((()=>{this.onError("number"==typeof t.status?t.status:0)}),0))},l("xhr data %s",this.data),t.send(this.data)}catch(e){return void setTimeout((()=>{this.onError(e)}),0)}"undefined"!=typeof document&&(this.index=f.requestsCount++,f.requests[this.index]=this)}onSuccess(){this.emit("success"),this.cleanup()}onData(e){this.emit("data",e),this.onSuccess()}onError(e){this.emit("error",e),this.cleanup(!0)}cleanup(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=u:this.xhr.onreadystatechange=u,e)try{this.xhr.abort()}catch(e){}"undefined"!=typeof document&&delete f.requests[this.index],this.xhr=null}}onLoad(){const e=this.xhr.responseText;null!==e&&this.onData(e)}hasXDR(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR}abort(){this.cleanup()}}function d(){for(let e in f.requests)f.requests.hasOwnProperty(e)&&f.requests[e].abort()}f.requestsCount=0,f.requests={},"undefined"!=typeof document&&("function"==typeof attachEvent?attachEvent("onunload",d):"function"==typeof addEventListener&&addEventListener("onpagehide"in s?"pagehide":"unload",d,!1)),e.exports=class extends o{constructor(e){if(super(e),"undefined"!=typeof location){const t="https:"===location.protocol;let n=location.port;n||(n=t?443:80),this.xd="undefined"!=typeof location&&e.hostname!==location.hostname||n!==e.port,this.xs=e.secure!==t}const t=e&&e.forceBase64;this.supportsBinary=c&&!t}request(e={}){return Object.assign(e,{xd:this.xd,xs:this.xs},this.opts),new f(this.uri(),e)}doWrite(e,t){const n=this.request({method:"POST",data:e});n.on("success",t),n.on("error",(e=>{this.onError("xhr post error",e)}))}doPoll(){l("xhr poll");const e=this.request();e.on("data",this.onData.bind(this)),e.on("error",(e=>{this.onError("xhr poll error",e)})),this.pollXhr=e}},e.exports.Request=f},9015:(e,t,n)=>{const r=n(6496),o=n(1830),a=n(9743),i=n(2281),s=n(1227)("engine.io-client:polling");e.exports=class extends r{get name(){return"polling"}doOpen(){this.poll()}pause(e){this.readyState="pausing";const t=()=>{s("paused"),this.readyState="paused",e()};if(this.polling||!this.writable){let e=0;this.polling&&(s("we are currently polling - waiting to pause"),e++,this.once("pollComplete",(function(){s("pre-pause polling complete"),--e||t()}))),this.writable||(s("we are currently writing - waiting to pause"),e++,this.once("drain",(function(){s("pre-pause writing complete"),--e||t()})))}else t()}poll(){s("polling"),this.polling=!0,this.doPoll(),this.emit("poll")}onData(e){s("polling got data %s",e),a.decodePayload(e,this.socket.binaryType).forEach((e=>{if("opening"===this.readyState&&"open"===e.type&&this.onOpen(),"close"===e.type)return this.onClose(),!1;this.onPacket(e)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():s('ignoring poll - transport state "%s"',this.readyState))}doClose(){const e=()=>{s("writing close packet"),this.write([{type:"close"}])};"open"===this.readyState?(s("transport open - closing"),e()):(s("transport not open - deferring close"),this.once("open",e))}write(e){this.writable=!1,a.encodePayload(e,(e=>{this.doWrite(e,(()=>{this.writable=!0,this.emit("drain")}))}))}uri(){let e=this.query||{};const t=this.opts.secure?"https":"http";let n="";return!1!==this.opts.timestampRequests&&(e[this.opts.timestampParam]=i()),this.supportsBinary||e.sid||(e.b64=1),e=o.encode(e),this.opts.port&&("https"===t&&443!==Number(this.opts.port)||"http"===t&&80!==Number(this.opts.port))&&(n=":"+this.opts.port),e.length&&(e="?"+e),t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+e}}},866:(e,t,n)=>{const r=n(3549);e.exports={WebSocket:r.WebSocket||r.MozWebSocket,usingBrowserWebSocket:!0,defaultBinaryType:"arraybuffer"}},4442:(e,t,n)=>{const r=n(6496),o=n(9743),a=n(1830),i=n(2281),{pick:s}=n(6839),{WebSocket:l,usingBrowserWebSocket:u,defaultBinaryType:c}=n(866),f=n(1227)("engine.io-client:websocket"),d="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();class p extends r{constructor(e){super(e),this.supportsBinary=!e.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const e=this.uri(),t=this.opts.protocols,n=d?{}:s(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(n.headers=this.opts.extraHeaders);try{this.ws=u&&!d?t?new l(e,t):new l(e):new l(e,t,n)}catch(e){return this.emit("error",e)}this.ws.binaryType=this.socket.binaryType||c,this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=this.onClose.bind(this),this.ws.onmessage=e=>this.onData(e.data),this.ws.onerror=e=>this.onError("websocket error",e)}write(e){this.writable=!1;for(let t=0;t<e.length;t++){const n=e[t],r=t===e.length-1;o.encodePacket(n,this.supportsBinary,(e=>{const t={};!u&&(n.options&&(t.compress=n.options.compress),this.opts.perMessageDeflate)&&("string"==typeof e?Buffer.byteLength(e):e.length)<this.opts.perMessageDeflate.threshold&&(t.compress=!1);try{u?this.ws.send(e):this.ws.send(e,t)}catch(e){f("websocket closed before onclose event")}r&&setTimeout((()=>{this.writable=!0,this.emit("drain")}),0)}))}}onClose(){r.prototype.onClose.call(this)}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){let e=this.query||{};const t=this.opts.secure?"wss":"ws";let n="";return this.opts.port&&("wss"===t&&443!==Number(this.opts.port)||"ws"===t&&80!==Number(this.opts.port))&&(n=":"+this.opts.port),this.opts.timestampRequests&&(e[this.opts.timestampParam]=i()),this.supportsBinary||(e.b64=1),e=a.encode(e),e.length&&(e="?"+e),t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+e}check(){return!(!l||"__initialize"in l&&this.name===p.prototype.name)}}e.exports=p},6839:e=>{e.exports.pick=(e,...t)=>t.reduce(((t,n)=>(e.hasOwnProperty(n)&&(t[n]=e[n]),t)),{})},2777:(e,t,n)=>{const r=n(8058),o=n(3549);e.exports=function(e){const t=e.xdomain,n=e.xscheme,a=e.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!t||r))return new XMLHttpRequest}catch(e){}try{if("undefined"!=typeof XDomainRequest&&!n&&a)return new XDomainRequest}catch(e){}if(!t)try{return new(o[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}},1712:e=>{const t=Object.create(null);t.open="0",t.close="1",t.ping="2",t.pong="3",t.message="4",t.upgrade="5",t.noop="6";const n=Object.create(null);Object.keys(t).forEach((e=>{n[t[e]]=e})),e.exports={PACKET_TYPES:t,PACKET_TYPES_REVERSE:n,ERROR_PACKET:{type:"error",data:"parser error"}}},4965:(e,t,n)=>{const{PACKET_TYPES_REVERSE:r,ERROR_PACKET:o}=n(1712);let a;"function"==typeof ArrayBuffer&&(a=n(3704));const i=(e,t)=>{if(a){const n=a.decode(e);return s(n,t)}return{base64:!0,data:e}},s=(e,t)=>{switch(t){case"blob":return e instanceof ArrayBuffer?new Blob([e]):e;case"arraybuffer":default:return e}};e.exports=(e,t)=>{if("string"!=typeof e)return{type:"message",data:s(e,t)};const n=e.charAt(0);return"b"===n?{type:"message",data:i(e.substring(1),t)}:r[n]?e.length>1?{type:r[n],data:e.substring(1)}:{type:r[n]}:o}},2929:(e,t,n)=>{const{PACKET_TYPES:r}=n(1712),o="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),a="function"==typeof ArrayBuffer,i=(e,t)=>{const n=new FileReader;return n.onload=function(){const e=n.result.split(",")[1];t("b"+e)},n.readAsDataURL(e)};e.exports=({type:e,data:t},n,s)=>{return o&&t instanceof Blob?n?s(t):i(t,s):a&&(t instanceof ArrayBuffer||(l=t,"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(l):l&&l.buffer instanceof ArrayBuffer))?n?s(t instanceof ArrayBuffer?t:t.buffer):i(new Blob([t]),s):s(r[e]+(t||""));var l}},9743:(e,t,n)=>{const r=n(2929),o=n(4965),a=String.fromCharCode(30);e.exports={protocol:4,encodePacket:r,encodePayload:(e,t)=>{const n=e.length,o=new Array(n);let i=0;e.forEach(((e,s)=>{r(e,!1,(e=>{o[s]=e,++i===n&&t(o.join(a))}))}))},decodePacket:o,decodePayload:(e,t)=>{const n=e.split(a),r=[];for(let e=0;e<n.length;e++){const a=o(n[e],t);if(r.push(a),"error"===a.type)break}return r}}},8058:e=>{try{e.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(t){e.exports=!1}},7824:e=>{var t=1e3,n=60*t,r=60*n,o=24*r;function a(e,t,n,r){var o=t>=1.5*n;return Math.round(e/n)+" "+r+(o?"s":"")}e.exports=function(e,i){i=i||{};var s,l,u=typeof e;if("string"===u&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var a=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(a){var i=parseFloat(a[1]);switch((a[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*i;case"weeks":case"week":case"w":return 6048e5*i;case"days":case"day":case"d":return i*o;case"hours":case"hour":case"hrs":case"hr":case"h":return i*r;case"minutes":case"minute":case"mins":case"min":case"m":return i*n;case"seconds":case"second":case"secs":case"sec":case"s":return i*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return i;default:return}}}}(e);if("number"===u&&isFinite(e))return i.long?(s=e,(l=Math.abs(s))>=o?a(s,l,o,"day"):l>=r?a(s,l,r,"hour"):l>=n?a(s,l,n,"minute"):l>=t?a(s,l,t,"second"):s+" ms"):function(e){var a=Math.abs(e);return a>=o?Math.round(e/o)+"d":a>=r?Math.round(e/r)+"h":a>=n?Math.round(e/n)+"m":a>=t?Math.round(e/t)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},7418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,a){for(var i,s,l=o(e),u=1;u<arguments.length;u++){for(var c in i=Object(arguments[u]))n.call(i,c)&&(l[c]=i[c]);if(t){s=t(i);for(var f=0;f<s.length;f++)r.call(i,s[f])&&(l[s[f]]=i[s[f]])}}return l}},1830:(e,t)=>{t.encode=function(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t.length&&(t+="&"),t+=encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t},t.decode=function(e){for(var t={},n=e.split("&"),r=0,o=n.length;r<o;r++){var a=n[r].split("=");t[decodeURIComponent(a[0])]=decodeURIComponent(a[1])}return t}},4187:e=>{var t=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,n=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];e.exports=function(e){var r,o,a=e,i=e.indexOf("["),s=e.indexOf("]");-1!=i&&-1!=s&&(e=e.substring(0,i)+e.substring(i,s).replace(/:/g,";")+e.substring(s,e.length));for(var l,u,c=t.exec(e||""),f={},d=14;d--;)f[n[d]]=c[d]||"";return-1!=i&&-1!=s&&(f.source=a,f.host=f.host.substring(1,f.host.length-1).replace(/;/g,":"),f.authority=f.authority.replace("[","").replace("]","").replace(/;/g,":"),f.ipv6uri=!0),f.pathNames=(r=f.path,o=r.replace(/\/{2,9}/g,"/").split("/"),"/"!=r.substr(0,1)&&0!==r.length||o.splice(0,1),"/"==r.substr(r.length-1,1)&&o.splice(o.length-1,1),o),f.queryKey=(l=f.query,u={},l.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(e,t,n){t&&(u[t]=n)})),u),f}},4448:(e,t,n)=>{"use strict";var r=n(7294),o=n(7418),a=n(3840);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));var s=new Set,l={};function u(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(l[e]=t,e=0;e<t.length;e++)s.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},m={};function g(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var A={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){A[e]=new g(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];A[t]=new g(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){A[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){A[e]=new g(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){A[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){A[e]=new g(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){A[e]=new g(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){A[e]=new g(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){A[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function v(e){return e[1].toUpperCase()}function b(e,t,n,r){var o=A.hasOwnProperty(t)?A[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(m,e)||!p.call(h,e)&&(d.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,v);A[t]=new g(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,v);A[t]=new g(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,v);A[t]=new g(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){A[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)})),A.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){A[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)}));var C=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=60103,k=60106,x=60107,E=60108,S=60114,_=60109,N=60110,P=60112,T=60113,B=60120,O=60115,R=60116,I=60121,L=60128,z=60129,F=60130,M=60131;if("function"==typeof Symbol&&Symbol.for){var D=Symbol.for;w=D("react.element"),k=D("react.portal"),x=D("react.fragment"),E=D("react.strict_mode"),S=D("react.profiler"),_=D("react.provider"),N=D("react.context"),P=D("react.forward_ref"),T=D("react.suspense"),B=D("react.suspense_list"),O=D("react.memo"),R=D("react.lazy"),I=D("react.block"),D("react.scope"),L=D("react.opaque.id"),z=D("react.debug_trace_mode"),F=D("react.offscreen"),M=D("react.legacy_hidden")}var j,U="function"==typeof Symbol&&Symbol.iterator;function q(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=U&&e[U]||e["@@iterator"])?e:null}function V(e){if(void 0===j)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);j=t&&t[1]||""}return"\n"+j+e}var W=!1;function H(e,t){if(!e||W)return"";W=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,s=a.length-1;1<=i&&0<=s&&o[i]!==a[s];)s--;for(;1<=i&&0<=s;i--,s--)if(o[i]!==a[s]){if(1!==i||1!==s)do{if(i--,0>--s||o[i]!==a[s])return"\n"+o[i].replace(" at new "," at ")}while(1<=i&&0<=s);break}}}finally{W=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?V(e):""}function K(e){switch(e.tag){case 5:return V(e.type);case 16:return V("Lazy");case 13:return V("Suspense");case 19:return V("SuspenseList");case 0:case 2:case 15:return H(e.type,!1);case 11:return H(e.type.render,!1);case 22:return H(e.type._render,!1);case 1:return H(e.type,!0);default:return""}}function $(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case x:return"Fragment";case k:return"Portal";case S:return"Profiler";case E:return"StrictMode";case T:return"Suspense";case B:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case N:return(e.displayName||"Context")+".Consumer";case _:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case O:return $(e.type);case I:return $(e._render);case R:t=e._payload,e=e._init;try{return $(e(t))}catch(e){}}return null}function J(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Q(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Y(e){e._valueTracker||(e._valueTracker=function(e){var t=Q(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function X(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Q(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function G(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=J(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=J(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,J(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&G(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ae(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+J(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function se(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function le(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:J(n)}}function ue(e,t){var n=J(t.value),r=J(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml";function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,me,ge=(me=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return me(e,t)}))}:me);function Ae(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ye={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ve=["Webkit","ms","Moz","O"];function be(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ye.hasOwnProperty(e)&&ye[e]?(""+t).trim():t+"px"}function Ce(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=be(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ye).forEach((function(e){ve.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ye[t]=ye[e]}))}));var we=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ke(e,t){if(t){if(we[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function xe(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Ee(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Se=null,_e=null,Ne=null;function Pe(e){if(e=Zr(e)){if("function"!=typeof Se)throw Error(i(280));var t=e.stateNode;t&&(t=to(t),Se(e.stateNode,e.type,t))}}function Te(e){_e?Ne?Ne.push(e):Ne=[e]:_e=e}function Be(){if(_e){var e=_e,t=Ne;if(Ne=_e=null,Pe(e),t)for(e=0;e<t.length;e++)Pe(t[e])}}function Oe(e,t){return e(t)}function Re(e,t,n,r,o){return e(t,n,r,o)}function Ie(){}var Le=Oe,ze=!1,Fe=!1;function Me(){null===_e&&null===Ne||(Ie(),Be())}function De(e,t){var n=e.stateNode;if(null===n)return null;var r=to(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var je=!1;if(f)try{var Ue={};Object.defineProperty(Ue,"passive",{get:function(){je=!0}}),window.addEventListener("test",Ue,Ue),window.removeEventListener("test",Ue,Ue)}catch(me){je=!1}function qe(e,t,n,r,o,a,i,s,l){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var Ve=!1,We=null,He=!1,Ke=null,$e={onError:function(e){Ve=!0,We=e}};function Je(e,t,n,r,o,a,i,s,l){Ve=!1,We=null,qe.apply($e,arguments)}function Qe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ye(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Xe(e){if(Qe(e)!==e)throw Error(i(188))}function Ge(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Qe(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return Xe(o),e;if(a===r)return Xe(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var s=!1,l=o.child;l;){if(l===n){s=!0,n=o,r=a;break}if(l===r){s=!0,r=o,n=a;break}l=l.sibling}if(!s){for(l=a.child;l;){if(l===n){s=!0,n=a,r=o;break}if(l===r){s=!0,r=a,n=o;break}l=l.sibling}if(!s)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Ze(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,at=[],it=null,st=null,lt=null,ut=new Map,ct=new Map,ft=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":it=null;break;case"dragenter":case"dragleave":st=null;break;case"mouseover":case"mouseout":lt=null;break;case"pointerover":case"pointerout":ut.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function mt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e=pt(t,n,r,o,a),null!==t&&null!==(t=Zr(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function gt(e){var t=Gr(e.target);if(null!==t){var n=Qe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ye(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function At(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Gt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Zr(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function yt(e,t,n){At(e)&&n.delete(t)}function vt(){for(ot=!1;0<at.length;){var e=at[0];if(null!==e.blockedOn){null!==(e=Zr(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Gt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&at.shift()}null!==it&&At(it)&&(it=null),null!==st&&At(st)&&(st=null),null!==lt&&At(lt)&&(lt=null),ut.forEach(yt),ct.forEach(yt)}function bt(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,vt)))}function Ct(e){function t(t){return bt(t,e)}if(0<at.length){bt(at[0],e);for(var n=1;n<at.length;n++){var r=at[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==it&&bt(it,e),null!==st&&bt(st,e),null!==lt&&bt(lt,e),ut.forEach(t),ct.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)gt(n),null===n.blockedOn&&ft.shift()}function wt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kt={animationend:wt("Animation","AnimationEnd"),animationiteration:wt("Animation","AnimationIteration"),animationstart:wt("Animation","AnimationStart"),transitionend:wt("Transition","TransitionEnd")},xt={},Et={};function St(e){if(xt[e])return xt[e];if(!kt[e])return e;var t,n=kt[e];for(t in n)if(n.hasOwnProperty(t)&&t in Et)return xt[e]=n[t];return e}f&&(Et=document.createElement("div").style,"AnimationEvent"in window||(delete kt.animationend.animation,delete kt.animationiteration.animation,delete kt.animationstart.animation),"TransitionEvent"in window||delete kt.transitionend.transition);var _t=St("animationend"),Nt=St("animationiteration"),Pt=St("animationstart"),Tt=St("transitionend"),Bt=new Map,Ot=new Map,Rt=["abort","abort",_t,"animationEnd",Nt,"animationIteration",Pt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Tt,"transitionEnd","waiting","waiting"];function It(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Ot.set(r,t),Bt.set(r,o),u(o,[r])}}(0,a.unstable_now)();var Lt=8;function zt(e){if(0!=(1&e))return Lt=15,1;if(0!=(2&e))return Lt=14,2;if(0!=(4&e))return Lt=13,4;var t=24&e;return 0!==t?(Lt=12,t):0!=(32&e)?(Lt=11,32):0!=(t=192&e)?(Lt=10,t):0!=(256&e)?(Lt=9,256):0!=(t=3584&e)?(Lt=8,t):0!=(4096&e)?(Lt=7,4096):0!=(t=4186112&e)?(Lt=6,t):0!=(t=62914560&e)?(Lt=5,t):67108864&e?(Lt=4,67108864):0!=(134217728&e)?(Lt=3,134217728):0!=(t=805306368&e)?(Lt=2,t):0!=(1073741824&e)?(Lt=1,1073741824):(Lt=8,e)}function Ft(e,t){var n=e.pendingLanes;if(0===n)return Lt=0;var r=0,o=0,a=e.expiredLanes,i=e.suspendedLanes,s=e.pingedLanes;if(0!==a)r=a,o=Lt=15;else if(0!=(a=134217727&n)){var l=a&~i;0!==l?(r=zt(l),o=Lt):0!=(s&=a)&&(r=zt(s),o=Lt)}else 0!=(a=n&~i)?(r=zt(a),o=Lt):0!==s&&(r=zt(s),o=Lt);if(0===r)return 0;if(r=n&((0>(r=31-Vt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&i)){if(zt(t),o<=Lt)return t;Lt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-Vt(t)),r|=e[n],t&=~o;return r}function Mt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Dt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=jt(24&~t))?Dt(10,t):e;case 10:return 0===(e=jt(192&~t))?Dt(8,t):e;case 8:return 0===(e=jt(3584&~t))&&0===(e=jt(4186112&~t))&&(e=512),e;case 2:return 0===(t=jt(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function jt(e){return e&-e}function Ut(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function qt(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Vt(t)]=n}var Vt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Wt(e)/Ht|0)|0},Wt=Math.log,Ht=Math.LN2,Kt=a.unstable_UserBlockingPriority,$t=a.unstable_runWithPriority,Jt=!0;function Qt(e,t,n,r){ze||Ie();var o=Xt,a=ze;ze=!0;try{Re(o,e,t,n,r)}finally{(ze=a)||Me()}}function Yt(e,t,n,r){$t(Kt,Xt.bind(null,e,t,n,r))}function Xt(e,t,n,r){var o;if(Jt)if((o=0==(4&t))&&0<at.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,r),at.push(e);else{var a=Gt(e,t,n,r);if(null===a)o&&ht(e,r);else{if(o){if(-1<dt.indexOf(e))return e=pt(a,e,t,n,r),void at.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return it=mt(it,e,t,n,r,o),!0;case"dragenter":return st=mt(st,e,t,n,r,o),!0;case"mouseover":return lt=mt(lt,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return ut.set(a,mt(ut.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,ct.set(a,mt(ct.get(a)||null,e,t,n,r,o)),!0}return!1}(a,e,t,n,r))return;ht(e,r)}Br(e,t,r,null,n)}}}function Gt(e,t,n,r){var o=Ee(r);if(null!==(o=Gr(o))){var a=Qe(o);if(null===a)o=null;else{var i=a.tag;if(13===i){if(null!==(o=Ye(a)))return o;o=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;o=null}else a!==o&&(o=null)}}return Br(e,t,r,o,n),null}var Zt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Zt?Zt.value:Zt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function sn(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var ln,un,cn,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=sn(fn),pn=o({},fn,{view:0,detail:0}),hn=sn(pn),mn=o({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Sn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(ln=e.screenX-cn.screenX,un=e.screenY-cn.screenY):un=ln=0,cn=e),ln)},movementY:function(e){return"movementY"in e?e.movementY:un}}),gn=sn(mn),An=sn(o({},mn,{dataTransfer:0})),yn=sn(o({},pn,{relatedTarget:0})),vn=sn(o({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),bn=sn(o({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),Cn=sn(o({},fn,{data:0})),wn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},xn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function En(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=xn[e])&&!!t[e]}function Sn(){return En}var _n=sn(o({},pn,{key:function(e){if(e.key){var t=wn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Sn,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Nn=sn(o({},mn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Pn=sn(o({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Sn})),Tn=sn(o({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Bn=sn(o({},mn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),On=[9,13,27,32],Rn=f&&"CompositionEvent"in window,In=null;f&&"documentMode"in document&&(In=document.documentMode);var Ln=f&&"TextEvent"in window&&!In,zn=f&&(!Rn||In&&8<In&&11>=In),Fn=String.fromCharCode(32),Mn=!1;function Dn(e,t){switch(e){case"keyup":return-1!==On.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function jn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Un=!1,qn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!qn[e.type]:"textarea"===t}function Wn(e,t,n,r){Te(r),0<(t=Rr(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Hn=null,Kn=null;function $n(e){Er(e,0)}function Jn(e){if(X(eo(e)))return e}function Qn(e,t){if("change"===e)return t}var Yn=!1;if(f){var Xn;if(f){var Gn="oninput"in document;if(!Gn){var Zn=document.createElement("div");Zn.setAttribute("oninput","return;"),Gn="function"==typeof Zn.oninput}Xn=Gn}else Xn=!1;Yn=Xn&&(!document.documentMode||9<document.documentMode)}function er(){Hn&&(Hn.detachEvent("onpropertychange",tr),Kn=Hn=null)}function tr(e){if("value"===e.propertyName&&Jn(Kn)){var t=[];if(Wn(t,Kn,e,Ee(e)),e=$n,ze)e(t);else{ze=!0;try{Oe(e,t)}finally{ze=!1,Me()}}}}function nr(e,t,n){"focusin"===e?(er(),Kn=n,(Hn=t).attachEvent("onpropertychange",tr)):"focusout"===e&&er()}function rr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Jn(Kn)}function or(e,t){if("click"===e)return Jn(t)}function ar(e,t){if("input"===e||"change"===e)return Jn(t)}var ir="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},sr=Object.prototype.hasOwnProperty;function lr(e,t){if(ir(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!sr.call(t,n[r])||!ir(e[n[r]],t[n[r]]))return!1;return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=G();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=G((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var hr=f&&"documentMode"in document&&11>=document.documentMode,mr=null,gr=null,Ar=null,yr=!1;function vr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;yr||null==mr||mr!==G(r)||(r="selectionStart"in(r=mr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},Ar&&lr(Ar,r)||(Ar=r,0<(r=Rr(gr,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=mr)))}It("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),It("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),It(Rt,2);for(var br="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Cr=0;Cr<br.length;Cr++)Ot.set(br[Cr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var wr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),kr=new Set("cancel close invalid load scroll toggle".split(" ").concat(wr));function xr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,s,l,u){if(Je.apply(this,arguments),Ve){if(!Ve)throw Error(i(198));var c=We;Ve=!1,We=null,He||(He=!0,Ke=c)}}(r,t,void 0,e),e.currentTarget=null}function Er(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var s=r[i],l=s.instance,u=s.currentTarget;if(s=s.listener,l!==a&&o.isPropagationStopped())break e;xr(o,s,u),a=l}else for(i=0;i<r.length;i++){if(l=(s=r[i]).instance,u=s.currentTarget,s=s.listener,l!==a&&o.isPropagationStopped())break e;xr(o,s,u),a=l}}}if(He)throw e=Ke,He=!1,Ke=null,e}function Sr(e,t){var n=no(t),r=e+"__bubble";n.has(r)||(Tr(t,e,2,!1),n.add(r))}var _r="_reactListening"+Math.random().toString(36).slice(2);function Nr(e){e[_r]||(e[_r]=!0,s.forEach((function(t){kr.has(t)||Pr(t,!1,e,null),Pr(t,!0,e,null)})))}function Pr(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=n;if("selectionchange"===e&&9!==n.nodeType&&(a=n.ownerDocument),null!==r&&!t&&kr.has(e)){if("scroll"!==e)return;o|=2,a=r}var i=no(a),s=e+"__"+(t?"capture":"bubble");i.has(s)||(t&&(o|=4),Tr(a,e,o,t),i.add(s))}function Tr(e,t,n,r){var o=Ot.get(t);switch(void 0===o?2:o){case 0:o=Qt;break;case 1:o=Yt;break;default:o=Xt}n=o.bind(null,t,n,e),o=void 0,!je||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Br(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var s=r.stateNode.containerInfo;if(s===o||8===s.nodeType&&s.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var l=i.tag;if((3===l||4===l)&&((l=i.stateNode.containerInfo)===o||8===l.nodeType&&l.parentNode===o))return;i=i.return}for(;null!==s;){if(null===(i=Gr(s)))return;if(5===(l=i.tag)||6===l){r=a=i;continue e}s=s.parentNode}}r=r.return}!function(e,t,n){if(Fe)return e();Fe=!0;try{Le(e,t,n)}finally{Fe=!1,Me()}}((function(){var r=a,o=Ee(n),i=[];e:{var s=Bt.get(e);if(void 0!==s){var l=dn,u=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":l=_n;break;case"focusin":u="focus",l=yn;break;case"focusout":u="blur",l=yn;break;case"beforeblur":case"afterblur":l=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=gn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=An;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Pn;break;case _t:case Nt:case Pt:l=vn;break;case Tt:l=Tn;break;case"scroll":l=hn;break;case"wheel":l=Bn;break;case"copy":case"cut":case"paste":l=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Nn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==s?s+"Capture":null:s;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=De(h,d))&&c.push(Or(h,m,p))),f)break;h=h.return}0<c.length&&(s=new l(s,u,null,n,o),i.push({event:s,listeners:c}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(u=n.relatedTarget||n.fromElement)||!Gr(u)&&!u[Yr])&&(l||s)&&(s=o.window===o?o:(s=o.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(u=(u=n.relatedTarget||n.toElement)?Gr(u):null)&&(u!==(f=Qe(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(l=null,u=r),l!==u)){if(c=gn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Nn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==l?s:eo(l),p=null==u?s:eo(u),(s=new c(m,h+"leave",l,n,o)).target=f,s.relatedTarget=p,m=null,Gr(o)===r&&((c=new c(d,h+"enter",u,n,o)).target=p,c.relatedTarget=f,m=c),f=m,l&&u)e:{for(d=u,h=0,p=c=l;p;p=Ir(p))h++;for(p=0,m=d;m;m=Ir(m))p++;for(;0<h-p;)c=Ir(c),h--;for(;0<p-h;)d=Ir(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Ir(c),d=Ir(d)}c=null}else c=null;null!==l&&Lr(i,s,l,c,!1),null!==u&&null!==f&&Lr(i,f,u,c,!0)}if("select"===(l=(s=r?eo(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var g=Qn;else if(Vn(s))if(Yn)g=ar;else{g=rr;var A=nr}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(g=or);switch(g&&(g=g(e,r))?Wn(i,g,n,o):(A&&A(e,s,r),"focusout"===e&&(A=s._wrapperState)&&A.controlled&&"number"===s.type&&oe(s,"number",s.value)),A=r?eo(r):window,e){case"focusin":(Vn(A)||"true"===A.contentEditable)&&(mr=A,gr=r,Ar=null);break;case"focusout":Ar=gr=mr=null;break;case"mousedown":yr=!0;break;case"contextmenu":case"mouseup":case"dragend":yr=!1,vr(i,n,o);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":vr(i,n,o)}var y;if(Rn)e:{switch(e){case"compositionstart":var v="onCompositionStart";break e;case"compositionend":v="onCompositionEnd";break e;case"compositionupdate":v="onCompositionUpdate";break e}v=void 0}else Un?Dn(e,n)&&(v="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(v="onCompositionStart");v&&(zn&&"ko"!==n.locale&&(Un||"onCompositionStart"!==v?"onCompositionEnd"===v&&Un&&(y=nn()):(en="value"in(Zt=o)?Zt.value:Zt.textContent,Un=!0)),0<(A=Rr(r,v)).length&&(v=new Cn(v,e,null,n,o),i.push({event:v,listeners:A}),(y||null!==(y=jn(n)))&&(v.data=y))),(y=Ln?function(e,t){switch(e){case"compositionend":return jn(t);case"keypress":return 32!==t.which?null:(Mn=!0,Fn);case"textInput":return(e=t.data)===Fn&&Mn?null:e;default:return null}}(e,n):function(e,t){if(Un)return"compositionend"===e||!Rn&&Dn(e,t)?(e=nn(),tn=en=Zt=null,Un=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return zn&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&0<(r=Rr(r,"onBeforeInput")).length&&(o=new Cn("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=y)}Er(i,t)}))}function Or(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Rr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=De(e,n))&&r.unshift(Or(e,a,o)),null!=(a=De(e,t))&&r.push(Or(e,a,o))),e=e.return}return r}function Ir(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Lr(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var s=n,l=s.alternate,u=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==u&&(s=u,o?null!=(l=De(n,a))&&i.unshift(Or(n,l,s)):o||null!=(l=De(n,a))&&i.push(Or(n,l,s))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}function zr(){}var Fr=null,Mr=null;function Dr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function jr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Ur="function"==typeof setTimeout?setTimeout:void 0,qr="function"==typeof clearTimeout?clearTimeout:void 0;function Vr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Wr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Hr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Kr=0,$r=Math.random().toString(36).slice(2),Jr="__reactFiber$"+$r,Qr="__reactProps$"+$r,Yr="__reactContainer$"+$r,Xr="__reactEvents$"+$r;function Gr(e){var t=e[Jr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Yr]||n[Jr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Hr(e);null!==e;){if(n=e[Jr])return n;e=Hr(e)}return t}n=(e=n).parentNode}return null}function Zr(e){return!(e=e[Jr]||e[Yr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function eo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function to(e){return e[Qr]||null}function no(e){var t=e[Xr];return void 0===t&&(t=e[Xr]=new Set),t}var ro=[],oo=-1;function ao(e){return{current:e}}function io(e){0>oo||(e.current=ro[oo],ro[oo]=null,oo--)}function so(e,t){oo++,ro[oo]=e.current,e.current=t}var lo={},uo=ao(lo),co=ao(!1),fo=lo;function po(e,t){var n=e.type.contextTypes;if(!n)return lo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function ho(e){return null!=e.childContextTypes}function mo(){io(co),io(uo)}function go(e,t,n){if(uo.current!==lo)throw Error(i(168));so(uo,t),so(co,n)}function Ao(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(i(108,$(t)||"Unknown",a));return o({},n,r)}function yo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||lo,fo=uo.current,so(uo,e),so(co,co.current),!0}function vo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=Ao(e,t,fo),r.__reactInternalMemoizedMergedChildContext=e,io(co),io(uo),so(uo,e)):io(co),so(co,n)}var bo=null,Co=null,wo=a.unstable_runWithPriority,ko=a.unstable_scheduleCallback,xo=a.unstable_cancelCallback,Eo=a.unstable_shouldYield,So=a.unstable_requestPaint,_o=a.unstable_now,No=a.unstable_getCurrentPriorityLevel,Po=a.unstable_ImmediatePriority,To=a.unstable_UserBlockingPriority,Bo=a.unstable_NormalPriority,Oo=a.unstable_LowPriority,Ro=a.unstable_IdlePriority,Io={},Lo=void 0!==So?So:function(){},zo=null,Fo=null,Mo=!1,Do=_o(),jo=1e4>Do?_o:function(){return _o()-Do};function Uo(){switch(No()){case Po:return 99;case To:return 98;case Bo:return 97;case Oo:return 96;case Ro:return 95;default:throw Error(i(332))}}function qo(e){switch(e){case 99:return Po;case 98:return To;case 97:return Bo;case 96:return Oo;case 95:return Ro;default:throw Error(i(332))}}function Vo(e,t){return e=qo(e),wo(e,t)}function Wo(e,t,n){return e=qo(e),ko(e,t,n)}function Ho(){if(null!==Fo){var e=Fo;Fo=null,xo(e)}Ko()}function Ko(){if(!Mo&&null!==zo){Mo=!0;var e=0;try{var t=zo;Vo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),zo=null}catch(t){throw null!==zo&&(zo=zo.slice(e+1)),ko(Po,Ho),t}finally{Mo=!1}}}var $o=C.ReactCurrentBatchConfig;function Jo(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Qo=ao(null),Yo=null,Xo=null,Go=null;function Zo(){Go=Xo=Yo=null}function ea(e){var t=Qo.current;io(Qo),e.type._context._currentValue=t}function ta(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function na(e,t){Yo=e,Go=Xo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Ri=!0),e.firstContext=null)}function ra(e,t){if(Go!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Go=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Xo){if(null===Yo)throw Error(i(308));Xo=t,Yo.dependencies={lanes:0,firstContext:t,responders:null}}else Xo=Xo.next=t;return e._currentValue}var oa=!1;function aa(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ia(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function sa(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function la(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function ua(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ca(e,t,n,r){var a=e.updateQueue;oa=!1;var i=a.firstBaseUpdate,s=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var u=l,c=u.next;u.next=null,null===s?i=c:s.next=c,s=u;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==s&&(null===d?f.firstBaseUpdate=c:d.next=c,f.lastBaseUpdate=u)}}if(null!==i){for(d=a.baseState,s=0,f=c=u=null;;){l=i.lane;var p=i.eventTime;if((r&l)===l){null!==f&&(f=f.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,m=i;switch(l=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,l);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(l="function"==typeof(h=m.payload)?h.call(p,d,l):h))break e;d=o({},d,l);break e;case 2:oa=!0}}null!==i.callback&&(e.flags|=32,null===(l=a.effects)?a.effects=[i]:l.push(i))}else p={eventTime:p,lane:l,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===f?(c=f=p,u=d):f=f.next=p,s|=l;if(null===(i=i.next)){if(null===(l=a.shared.pending))break;i=l.next,l.next=null,a.lastBaseUpdate=l,a.shared.pending=null}}null===f&&(u=d),a.baseState=u,a.firstBaseUpdate=c,a.lastBaseUpdate=f,Ls|=s,e.lanes=s,e.memoizedState=d}}function fa(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var da=(new r.Component).refs;function pa(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var ha={isMounted:function(e){return!!(e=e._reactInternals)&&Qe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=il(),o=sl(e),a=sa(r,o);a.payload=t,null!=n&&(a.callback=n),la(e,a),ll(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=il(),o=sl(e),a=sa(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),la(e,a),ll(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=il(),r=sl(e),o=sa(n,r);o.tag=2,null!=t&&(o.callback=t),la(e,o),ll(e,r,n)}};function ma(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(o,a))}function ga(e,t,n){var r=!1,o=lo,a=t.contextType;return"object"==typeof a&&null!==a?a=ra(a):(o=ho(t)?fo:uo.current,a=(r=null!=(r=t.contextTypes))?po(e,o):lo),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ha,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function Aa(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ha.enqueueReplaceState(t,t.state,null)}function ya(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=da,aa(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=ra(a):(a=ho(t)?fo:uo.current,o.context=po(e,a)),ca(e,n,o,r),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(pa(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&ha.enqueueReplaceState(o,o.state,null),ca(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var va=Array.isArray;function ba(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===da&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function Ca(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function wa(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=jl(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function s(t){return e&&null===t.alternate&&(t.flags=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Wl(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function u(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=ba(e,t,n),r.return=e,r):((r=Ul(n.type,n.key,n.props,null,e.mode,r)).ref=ba(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Hl(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=ql(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Wl(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return(n=Ul(t.type,t.key,t.props,null,e.mode,n)).ref=ba(e,null,t),n.return=e,n;case k:return(t=Hl(t,e.mode,n)).return=e,t}if(va(t)||q(t))return(t=ql(t,e.mode,n,null)).return=e,t;Ca(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===o?n.type===x?f(e,t,n.props.children,r,o):u(e,t,n,r):null;case k:return n.key===o?c(e,t,n,r):null}if(va(n)||q(n))return null!==o?null:f(e,t,n,r,null);Ca(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return e=e.get(null===r.key?n:r.key)||null,r.type===x?f(t,e,r.props.children,o,r.key):u(t,e,r,o);case k:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(va(r)||q(r))return f(t,e=e.get(n)||null,r,o,null);Ca(t,r)}return null}function m(o,i,s,l){for(var u=null,c=null,f=i,m=i=0,g=null;null!==f&&m<s.length;m++){f.index>m?(g=f,f=null):g=f.sibling;var A=p(o,f,s[m],l);if(null===A){null===f&&(f=g);break}e&&f&&null===A.alternate&&t(o,f),i=a(A,i,m),null===c?u=A:c.sibling=A,c=A,f=g}if(m===s.length)return n(o,f),u;if(null===f){for(;m<s.length;m++)null!==(f=d(o,s[m],l))&&(i=a(f,i,m),null===c?u=f:c.sibling=f,c=f);return u}for(f=r(o,f);m<s.length;m++)null!==(g=h(f,o,m,s[m],l))&&(e&&null!==g.alternate&&f.delete(null===g.key?m:g.key),i=a(g,i,m),null===c?u=g:c.sibling=g,c=g);return e&&f.forEach((function(e){return t(o,e)})),u}function g(o,s,l,u){var c=q(l);if("function"!=typeof c)throw Error(i(150));if(null==(l=c.call(l)))throw Error(i(151));for(var f=c=null,m=s,g=s=0,A=null,y=l.next();null!==m&&!y.done;g++,y=l.next()){m.index>g?(A=m,m=null):A=m.sibling;var v=p(o,m,y.value,u);if(null===v){null===m&&(m=A);break}e&&m&&null===v.alternate&&t(o,m),s=a(v,s,g),null===f?c=v:f.sibling=v,f=v,m=A}if(y.done)return n(o,m),c;if(null===m){for(;!y.done;g++,y=l.next())null!==(y=d(o,y.value,u))&&(s=a(y,s,g),null===f?c=y:f.sibling=y,f=y);return c}for(m=r(o,m);!y.done;g++,y=l.next())null!==(y=h(m,o,g,y.value,u))&&(e&&null!==y.alternate&&m.delete(null===y.key?g:y.key),s=a(y,s,g),null===f?c=y:f.sibling=y,f=y);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,a,l){var u="object"==typeof a&&null!==a&&a.type===x&&null===a.key;u&&(a=a.props.children);var c="object"==typeof a&&null!==a;if(c)switch(a.$$typeof){case w:e:{for(c=a.key,u=r;null!==u;){if(u.key===c){switch(u.tag){case 7:if(a.type===x){n(e,u.sibling),(r=o(u,a.props.children)).return=e,e=r;break e}break;default:if(u.elementType===a.type){n(e,u.sibling),(r=o(u,a.props)).ref=ba(e,u,a),r.return=e,e=r;break e}}n(e,u);break}t(e,u),u=u.sibling}a.type===x?((r=ql(a.props.children,e.mode,l,a.key)).return=e,e=r):((l=Ul(a.type,a.key,a.props,null,e.mode,l)).ref=ba(e,r,a),l.return=e,e=l)}return s(e);case k:e:{for(u=a.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Hl(a,e.mode,l)).return=e,e=r}return s(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a)).return=e,e=r):(n(e,r),(r=Wl(a,e.mode,l)).return=e,e=r),s(e);if(va(a))return m(e,r,a,l);if(q(a))return g(e,r,a,l);if(c&&Ca(e,a),void 0===a&&!u)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,$(e.type)||"Component"))}return n(e,r)}}var ka=wa(!0),xa=wa(!1),Ea={},Sa=ao(Ea),_a=ao(Ea),Na=ao(Ea);function Pa(e){if(e===Ea)throw Error(i(174));return e}function Ta(e,t){switch(so(Na,t),so(_a,e),so(Sa,Ea),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}io(Sa),so(Sa,t)}function Ba(){io(Sa),io(_a),io(Na)}function Oa(e){Pa(Na.current);var t=Pa(Sa.current),n=pe(t,e.type);t!==n&&(so(_a,e),so(Sa,n))}function Ra(e){_a.current===e&&(io(Sa),io(_a))}var Ia=ao(0);function La(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var za=null,Fa=null,Ma=!1;function Da(e,t){var n=Ml(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function ja(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Ua(e){if(Ma){var t=Fa;if(t){var n=t;if(!ja(e,t)){if(!(t=Wr(n.nextSibling))||!ja(e,t))return e.flags=-1025&e.flags|2,Ma=!1,void(za=e);Da(za,n)}za=e,Fa=Wr(t.firstChild)}else e.flags=-1025&e.flags|2,Ma=!1,za=e}}function qa(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;za=e}function Va(e){if(e!==za)return!1;if(!Ma)return qa(e),Ma=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!jr(t,e.memoizedProps))for(t=Fa;t;)Da(e,t),t=Wr(t.nextSibling);if(qa(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Fa=Wr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Fa=null}}else Fa=za?Wr(e.stateNode.nextSibling):null;return!0}function Wa(){Fa=za=null,Ma=!1}var Ha=[];function Ka(){for(var e=0;e<Ha.length;e++)Ha[e]._workInProgressVersionPrimary=null;Ha.length=0}var $a=C.ReactCurrentDispatcher,Ja=C.ReactCurrentBatchConfig,Qa=0,Ya=null,Xa=null,Ga=null,Za=!1,ei=!1;function ti(){throw Error(i(321))}function ni(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ir(e[n],t[n]))return!1;return!0}function ri(e,t,n,r,o,a){if(Qa=a,Ya=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,$a.current=null===e||null===e.memoizedState?Pi:Ti,e=n(r,o),ei){a=0;do{if(ei=!1,!(25>a))throw Error(i(301));a+=1,Ga=Xa=null,t.updateQueue=null,$a.current=Bi,e=n(r,o)}while(ei)}if($a.current=Ni,t=null!==Xa&&null!==Xa.next,Qa=0,Ga=Xa=Ya=null,Za=!1,t)throw Error(i(300));return e}function oi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Ga?Ya.memoizedState=Ga=e:Ga=Ga.next=e,Ga}function ai(){if(null===Xa){var e=Ya.alternate;e=null!==e?e.memoizedState:null}else e=Xa.next;var t=null===Ga?Ya.memoizedState:Ga.next;if(null!==t)Ga=t,Xa=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Xa=e).memoizedState,baseState:Xa.baseState,baseQueue:Xa.baseQueue,queue:Xa.queue,next:null},null===Ga?Ya.memoizedState=Ga=e:Ga=Ga.next=e}return Ga}function ii(e,t){return"function"==typeof t?t(e):t}function si(e){var t=ai(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=Xa,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var s=o.next;o.next=a.next,a.next=s}r.baseQueue=o=a,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var l=s=a=null,u=o;do{var c=u.lane;if((Qa&c)===c)null!==l&&(l=l.next={lane:0,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null}),r=u.eagerReducer===e?u.eagerState:e(r,u.action);else{var f={lane:c,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null};null===l?(s=l=f,a=r):l=l.next=f,Ya.lanes|=c,Ls|=c}u=u.next}while(null!==u&&u!==o);null===l?a=r:l.next=s,ir(r,t.memoizedState)||(Ri=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function li(e){var t=ai(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var s=o=o.next;do{a=e(a,s.action),s=s.next}while(s!==o);ir(a,t.memoizedState)||(Ri=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function ui(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Qa&e)===e)&&(t._workInProgressVersionPrimary=r,Ha.push(t))),e)return n(t._source);throw Ha.push(t),Error(i(350))}function ci(e,t,n,r){var o=_s;if(null===o)throw Error(i(349));var a=t._getVersion,s=a(t._source),l=$a.current,u=l.useState((function(){return ui(o,t,n)})),c=u[1],f=u[0];u=Ga;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,m=d.source;d=d.subscribe;var g=Ya;return e.memoizedState={refs:p,source:t,subscribe:r},l.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=a(t._source);if(!ir(s,e)){e=n(t._source),ir(f,e)||(c(e),e=sl(g),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,i=e;0<i;){var l=31-Vt(i),u=1<<l;r[l]|=e,i&=~u}}}),[n,t,r]),l.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=sl(g);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ir(h,n)&&ir(m,t)&&ir(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:ii,lastRenderedState:f}).dispatch=c=_i.bind(null,Ya,e),u.queue=e,u.baseQueue=null,f=ui(o,t,n),u.memoizedState=u.baseState=f),f}function fi(e,t,n){return ci(ai(),e,t,n)}function di(e){var t=oi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ii,lastRenderedState:e}).dispatch=_i.bind(null,Ya,e),[t.memoizedState,e]}function pi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ya.updateQueue)?(t={lastEffect:null},Ya.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function hi(e){return e={current:e},oi().memoizedState=e}function mi(){return ai().memoizedState}function gi(e,t,n,r){var o=oi();Ya.flags|=e,o.memoizedState=pi(1|t,n,void 0,void 0===r?null:r)}function Ai(e,t,n,r){var o=ai();r=void 0===r?null:r;var a=void 0;if(null!==Xa){var i=Xa.memoizedState;if(a=i.destroy,null!==r&&ni(r,i.deps))return void pi(t,n,a,r)}Ya.flags|=e,o.memoizedState=pi(1|t,n,a,r)}function yi(e,t){return gi(516,4,e,t)}function vi(e,t){return Ai(516,4,e,t)}function bi(e,t){return Ai(4,2,e,t)}function Ci(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function wi(e,t,n){return n=null!=n?n.concat([e]):null,Ai(4,2,Ci.bind(null,t,e),n)}function ki(){}function xi(e,t){var n=ai();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ni(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ei(e,t){var n=ai();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ni(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Si(e,t){var n=Uo();Vo(98>n?98:n,(function(){e(!0)})),Vo(97<n?97:n,(function(){var n=Ja.transition;Ja.transition=1;try{e(!1),t()}finally{Ja.transition=n}}))}function _i(e,t,n){var r=il(),o=sl(e),a={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),t.pending=a,i=e.alternate,e===Ya||null!==i&&i===Ya)ei=Za=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var s=t.lastRenderedState,l=i(s,n);if(a.eagerReducer=i,a.eagerState=l,ir(l,s))return}catch(e){}ll(e,o,r)}}var Ni={readContext:ra,useCallback:ti,useContext:ti,useEffect:ti,useImperativeHandle:ti,useLayoutEffect:ti,useMemo:ti,useReducer:ti,useRef:ti,useState:ti,useDebugValue:ti,useDeferredValue:ti,useTransition:ti,useMutableSource:ti,useOpaqueIdentifier:ti,unstable_isNewReconciler:!1},Pi={readContext:ra,useCallback:function(e,t){return oi().memoizedState=[e,void 0===t?null:t],e},useContext:ra,useEffect:yi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,gi(4,2,Ci.bind(null,t,e),n)},useLayoutEffect:function(e,t){return gi(4,2,e,t)},useMemo:function(e,t){var n=oi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=oi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=_i.bind(null,Ya,e),[r.memoizedState,e]},useRef:hi,useState:di,useDebugValue:ki,useDeferredValue:function(e){var t=di(e),n=t[0],r=t[1];return yi((function(){var t=Ja.transition;Ja.transition=1;try{r(e)}finally{Ja.transition=t}}),[e]),n},useTransition:function(){var e=di(!1),t=e[0];return hi(e=Si.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=oi();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},ci(r,e,t,n)},useOpaqueIdentifier:function(){if(Ma){var e=!1,t=function(e){return{$$typeof:L,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Kr++).toString(36))),Error(i(355))})),n=di(t)[1];return 0==(2&Ya.mode)&&(Ya.flags|=516,pi(5,(function(){n("r:"+(Kr++).toString(36))}),void 0,null)),t}return di(t="r:"+(Kr++).toString(36)),t},unstable_isNewReconciler:!1},Ti={readContext:ra,useCallback:xi,useContext:ra,useEffect:vi,useImperativeHandle:wi,useLayoutEffect:bi,useMemo:Ei,useReducer:si,useRef:mi,useState:function(){return si(ii)},useDebugValue:ki,useDeferredValue:function(e){var t=si(ii),n=t[0],r=t[1];return vi((function(){var t=Ja.transition;Ja.transition=1;try{r(e)}finally{Ja.transition=t}}),[e]),n},useTransition:function(){var e=si(ii)[0];return[mi().current,e]},useMutableSource:fi,useOpaqueIdentifier:function(){return si(ii)[0]},unstable_isNewReconciler:!1},Bi={readContext:ra,useCallback:xi,useContext:ra,useEffect:vi,useImperativeHandle:wi,useLayoutEffect:bi,useMemo:Ei,useReducer:li,useRef:mi,useState:function(){return li(ii)},useDebugValue:ki,useDeferredValue:function(e){var t=li(ii),n=t[0],r=t[1];return vi((function(){var t=Ja.transition;Ja.transition=1;try{r(e)}finally{Ja.transition=t}}),[e]),n},useTransition:function(){var e=li(ii)[0];return[mi().current,e]},useMutableSource:fi,useOpaqueIdentifier:function(){return li(ii)[0]},unstable_isNewReconciler:!1},Oi=C.ReactCurrentOwner,Ri=!1;function Ii(e,t,n,r){t.child=null===e?xa(t,null,n,r):ka(t,e.child,n,r)}function Li(e,t,n,r,o){n=n.render;var a=t.ref;return na(t,o),r=ri(e,t,n,r,a,o),null===e||Ri?(t.flags|=1,Ii(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Zi(e,t,o))}function zi(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||Dl(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ul(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Fi(e,t,i,r,o,a))}return i=e.child,0==(o&a)&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:lr)(o,r)&&e.ref===t.ref)?Zi(e,t,a):(t.flags|=1,(e=jl(i,r)).ref=t.ref,e.return=t,t.child=e)}function Fi(e,t,n,r,o,a){if(null!==e&&lr(e.memoizedProps,r)&&e.ref===t.ref){if(Ri=!1,0==(a&o))return t.lanes=e.lanes,Zi(e,t,a);0!=(16384&e.flags)&&(Ri=!0)}return ji(e,t,n,r,a)}function Mi(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},gl(0,n);else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},gl(0,e),null;t.memoizedState={baseLanes:0},gl(0,null!==a?a.baseLanes:n)}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,gl(0,r);return Ii(e,t,o,n),t.child}function Di(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function ji(e,t,n,r,o){var a=ho(n)?fo:uo.current;return a=po(t,a),na(t,o),n=ri(e,t,n,r,a,o),null===e||Ri?(t.flags|=1,Ii(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Zi(e,t,o))}function Ui(e,t,n,r,o){if(ho(n)){var a=!0;yo(t)}else a=!1;if(na(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),ga(t,n,r),ya(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,s=t.memoizedProps;i.props=s;var l=i.context,u=n.contextType;u="object"==typeof u&&null!==u?ra(u):po(t,u=ho(n)?fo:uo.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;f||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(s!==r||l!==u)&&Aa(t,i,r,u),oa=!1;var d=t.memoizedState;i.state=d,ca(t,r,i,o),l=t.memoizedState,s!==r||d!==l||co.current||oa?("function"==typeof c&&(pa(t,n,c,r),l=t.memoizedState),(s=oa||ma(t,n,s,r,d,l,u))?(f||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4)):("function"==typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=l),i.props=r,i.state=l,i.context=u,r=s):("function"==typeof i.componentDidMount&&(t.flags|=4),r=!1)}else{i=t.stateNode,ia(e,t),s=t.memoizedProps,u=t.type===t.elementType?s:Jo(t.type,s),i.props=u,f=t.pendingProps,d=i.context,l="object"==typeof(l=n.contextType)&&null!==l?ra(l):po(t,l=ho(n)?fo:uo.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(s!==f||d!==l)&&Aa(t,i,r,l),oa=!1,d=t.memoizedState,i.state=d,ca(t,r,i,o);var h=t.memoizedState;s!==f||d!==h||co.current||oa?("function"==typeof p&&(pa(t,n,p,r),h=t.memoizedState),(u=oa||ma(t,n,u,r,d,h,l))?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,l),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof i.componentDidUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=l,r=u):("function"!=typeof i.componentDidUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return qi(e,t,n,r,a,o)}function qi(e,t,n,r,o,a){Di(e,t);var i=0!=(64&t.flags);if(!r&&!i)return o&&vo(t,n,!1),Zi(e,t,a);r=t.stateNode,Oi.current=t;var s=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=ka(t,e.child,null,a),t.child=ka(t,null,s,a)):Ii(e,t,s,a),t.memoizedState=r.state,o&&vo(t,n,!0),t.child}function Vi(e){var t=e.stateNode;t.pendingContext?go(0,t.pendingContext,t.pendingContext!==t.context):t.context&&go(0,t.context,!1),Ta(e,t.containerInfo)}var Wi,Hi,Ki,$i={dehydrated:null,retryLane:0};function Ji(e,t,n){var r,o=t.pendingProps,a=Ia.current,i=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),so(Ia,1&a),null===e?(void 0!==o.fallback&&Ua(t),e=o.children,a=o.fallback,i?(e=Qi(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=$i,e):"number"==typeof o.unstable_expectedLoadTime?(e=Qi(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=$i,t.lanes=33554432,e):((n=Vl({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,i?(o=function(e,t,n,r,o){var a=t.mode,i=e.child;e=i.sibling;var s={mode:"hidden",children:n};return 0==(2&a)&&t.child!==i?((n=t.child).childLanes=0,n.pendingProps=s,null!==(i=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):n=jl(i,s),null!==e?r=jl(e,r):(r=ql(r,a,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,o.children,o.fallback,n),i=t.child,a=e.child.memoizedState,i.memoizedState=null===a?{baseLanes:n}:{baseLanes:a.baseLanes|n},i.childLanes=e.childLanes&~n,t.memoizedState=$i,o):(n=function(e,t,n,r){var o=e.child;return e=o.sibling,n=jl(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,o.children,n),t.memoizedState=null,n))}function Qi(e,t,n,r){var o=e.mode,a=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==a?(a.childLanes=0,a.pendingProps=t):a=Vl(t,o,0,null),n=ql(n,o,r,null),a.return=e,n.return=e,a.sibling=n,e.child=a,n}function Yi(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ta(e.return,t)}function Xi(e,t,n,r,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o,i.lastEffect=a)}function Gi(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(Ii(e,t,r.children,n),0!=(2&(r=Ia.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Yi(e,n);else if(19===e.tag)Yi(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(so(Ia,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===La(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Xi(t,!1,o,n,a,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===La(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Xi(t,!0,n,null,a,t.lastEffect);break;case"together":Xi(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Zi(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ls|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=jl(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=jl(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function es(e,t){if(!Ma)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ts(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return ho(t.type)&&mo(),null;case 3:return Ba(),io(co),io(uo),Ka(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Va(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Ra(t);var a=Pa(Na.current);if(n=t.type,null!==e&&null!=t.stateNode)Hi(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=Pa(Sa.current),Va(t)){r=t.stateNode,n=t.type;var s=t.memoizedProps;switch(r[Jr]=t,r[Qr]=s,n){case"dialog":Sr("cancel",r),Sr("close",r);break;case"iframe":case"object":case"embed":Sr("load",r);break;case"video":case"audio":for(e=0;e<wr.length;e++)Sr(wr[e],r);break;case"source":Sr("error",r);break;case"img":case"image":case"link":Sr("error",r),Sr("load",r);break;case"details":Sr("toggle",r);break;case"input":ee(r,s),Sr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!s.multiple},Sr("invalid",r);break;case"textarea":le(r,s),Sr("invalid",r)}for(var u in ke(n,s),e=null,s)s.hasOwnProperty(u)&&(a=s[u],"children"===u?"string"==typeof a?r.textContent!==a&&(e=["children",a]):"number"==typeof a&&r.textContent!==""+a&&(e=["children",""+a]):l.hasOwnProperty(u)&&null!=a&&"onScroll"===u&&Sr("scroll",r));switch(n){case"input":Y(r),re(r,s,!0);break;case"textarea":Y(r),ce(r);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(r.onclick=zr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(u=9===a.nodeType?a:a.ownerDocument,e===fe&&(e=de(n)),e===fe?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[Jr]=t,e[Qr]=r,Wi(e,t),t.stateNode=e,u=xe(n,r),n){case"dialog":Sr("cancel",e),Sr("close",e),a=r;break;case"iframe":case"object":case"embed":Sr("load",e),a=r;break;case"video":case"audio":for(a=0;a<wr.length;a++)Sr(wr[a],e);a=r;break;case"source":Sr("error",e),a=r;break;case"img":case"image":case"link":Sr("error",e),Sr("load",e),a=r;break;case"details":Sr("toggle",e),a=r;break;case"input":ee(e,r),a=Z(e,r),Sr("invalid",e);break;case"option":a=ae(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=o({},r,{value:void 0}),Sr("invalid",e);break;case"textarea":le(e,r),a=se(e,r),Sr("invalid",e);break;default:a=r}ke(n,a);var c=a;for(s in c)if(c.hasOwnProperty(s)){var f=c[s];"style"===s?Ce(e,f):"dangerouslySetInnerHTML"===s?null!=(f=f?f.__html:void 0)&&ge(e,f):"children"===s?"string"==typeof f?("textarea"!==n||""!==f)&&Ae(e,f):"number"==typeof f&&Ae(e,""+f):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?null!=f&&"onScroll"===s&&Sr("scroll",e):null!=f&&b(e,s,f,u))}switch(n){case"input":Y(e),re(e,r,!1);break;case"textarea":Y(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+J(r.value));break;case"select":e.multiple=!!r.multiple,null!=(s=r.value)?ie(e,!!r.multiple,s,!1):null!=r.defaultValue&&ie(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=zr)}Dr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Ki(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=Pa(Na.current),Pa(Sa.current),Va(t)?(r=t.stateNode,n=t.memoizedProps,r[Jr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Jr]=t,t.stateNode=r)}return null;case 13:return io(Ia),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Va(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ia.current)?0===Os&&(Os=3):(0!==Os&&3!==Os||(Os=4),null===_s||0==(134217727&Ls)&&0==(134217727&zs)||dl(_s,Ps))),(r||n)&&(t.flags|=4),null);case 4:return Ba(),null===e&&Nr(t.stateNode.containerInfo),null;case 10:return ea(t),null;case 17:return ho(t.type)&&mo(),null;case 19:if(io(Ia),null===(r=t.memoizedState))return null;if(s=0!=(64&t.flags),null===(u=r.rendering))if(s)es(r,!1);else{if(0!==Os||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(u=La(e))){for(t.flags|=64,es(r,!1),null!==(s=u.updateQueue)&&(t.updateQueue=s,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(s=n).flags&=2,s.nextEffect=null,s.firstEffect=null,s.lastEffect=null,null===(u=s.alternate)?(s.childLanes=0,s.lanes=e,s.child=null,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=u.childLanes,s.lanes=u.lanes,s.child=u.child,s.memoizedProps=u.memoizedProps,s.memoizedState=u.memoizedState,s.updateQueue=u.updateQueue,s.type=u.type,e=u.dependencies,s.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return so(Ia,1&Ia.current|2),t.child}e=e.sibling}null!==r.tail&&jo()>js&&(t.flags|=64,s=!0,es(r,!1),t.lanes=33554432)}else{if(!s)if(null!==(e=La(u))){if(t.flags|=64,s=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),es(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate&&!Ma)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*jo()-r.renderingStartTime>js&&1073741824!==n&&(t.flags|=64,s=!0,es(r,!1),t.lanes=33554432);r.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=r.last)?n.sibling=u:t.child=u,r.last=u)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=jo(),n.sibling=null,t=Ia.current,so(Ia,s?1&t|2:1&t),n):null;case 23:case 24:return Al(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function ns(e){switch(e.tag){case 1:ho(e.type)&&mo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ba(),io(co),io(uo),Ka(),0!=(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return Ra(e),null;case 13:return io(Ia),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return io(Ia),null;case 4:return Ba(),null;case 10:return ea(e),null;case 23:case 24:return Al(),null;default:return null}}function rs(e,t){try{var n="",r=t;do{n+=K(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function os(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Wi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Hi=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Pa(Sa.current);var i,s=null;switch(n){case"input":a=Z(e,a),r=Z(e,r),s=[];break;case"option":a=ae(e,a),r=ae(e,r),s=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),s=[];break;case"textarea":a=se(e,a),r=se(e,r),s=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=zr)}for(f in ke(n,r),n=null,a)if(!r.hasOwnProperty(f)&&a.hasOwnProperty(f)&&null!=a[f])if("style"===f){var u=a[f];for(i in u)u.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(l.hasOwnProperty(f)?s||(s=[]):(s=s||[]).push(f,null));for(f in r){var c=r[f];if(u=null!=a?a[f]:void 0,r.hasOwnProperty(f)&&c!==u&&(null!=c||null!=u))if("style"===f)if(u){for(i in u)!u.hasOwnProperty(i)||c&&c.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in c)c.hasOwnProperty(i)&&u[i]!==c[i]&&(n||(n={}),n[i]=c[i])}else n||(s||(s=[]),s.push(f,n)),n=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(s=s||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(s=s||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(l.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&Sr("scroll",e),s||u===c||(s=[])):"object"==typeof c&&null!==c&&c.$$typeof===L?c.toString():(s=s||[]).push(f,c))}n&&(s=s||[]).push("style",n);var f=s;(t.updateQueue=f)&&(t.flags|=4)}},Ki=function(e,t,n,r){n!==r&&(t.flags|=4)};var as="function"==typeof WeakMap?WeakMap:Map;function is(e,t,n){(n=sa(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ws||(Ws=!0,Hs=r),os(0,t)},n}function ss(e,t,n){(n=sa(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return os(0,t),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Ks?Ks=new Set([this]):Ks.add(this),os(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var ls="function"==typeof WeakSet?WeakSet:Set;function us(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Il(e,t)}else t.current=null}function cs(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Jo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Vr(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(i(163))}function fs(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Bl(n,e),Tl(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Jo(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&fa(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}fa(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Dr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Ct(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(i(163))}function ds(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=be("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function ps(e,t){if(Co&&"function"==typeof Co.onCommitFiberUnmount)try{Co.onCommitFiberUnmount(bo,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Bl(t,n);else{r=t;try{o()}catch(e){Il(r,e)}}n=n.next}while(n!==e)}break;case 1:if(us(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Il(t,e)}break;case 5:us(t);break;case 4:vs(e,t)}}function hs(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function ms(e){return 5===e.tag||3===e.tag||4===e.tag}function gs(e){e:{for(var t=e.return;null!==t;){if(ms(t))break e;t=t.return}throw Error(i(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.flags&&(Ae(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ms(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?As(e,n,t):ys(e,n,t)}function As(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=zr));else if(4!==r&&null!==(e=e.child))for(As(e,t,n),e=e.sibling;null!==e;)As(e,t,n),e=e.sibling}function ys(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(ys(e,t,n),e=e.sibling;null!==e;)ys(e,t,n),e=e.sibling}function vs(e,t){for(var n,r,o=t,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(i(160));switch(n=a.stateNode,a.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var s=e,l=o,u=l;;)if(ps(s,u),null!==u.child&&4!==u.tag)u.child.return=u,u=u.child;else{if(u===l)break e;for(;null===u.sibling;){if(null===u.return||u.return===l)break e;u=u.return}u.sibling.return=u.return,u=u.sibling}r?(s=n,l=o.stateNode,8===s.nodeType?s.parentNode.removeChild(l):s.removeChild(l)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(ps(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function bs(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[Qr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),xe(e,o),t=xe(e,r),o=0;o<a.length;o+=2){var s=a[o],l=a[o+1];"style"===s?Ce(n,l):"dangerouslySetInnerHTML"===s?ge(n,l):"children"===s?Ae(n,l):b(n,s,l,t)}switch(e){case"input":ne(n,r);break;case"textarea":ue(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(a=r.value)?ie(n,!!r.multiple,a,!1):e!==!!r.multiple&&(null!=r.defaultValue?ie(n,!!r.multiple,r.defaultValue,!0):ie(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,Ct(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Ds=jo(),ds(t.child,!0)),void Cs(t);case 19:return void Cs(t);case 17:return;case 23:case 24:return void ds(t,null!==t.memoizedState)}throw Error(i(163))}function Cs(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ls),t.forEach((function(t){var r=zl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function ws(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var ks=Math.ceil,xs=C.ReactCurrentDispatcher,Es=C.ReactCurrentOwner,Ss=0,_s=null,Ns=null,Ps=0,Ts=0,Bs=ao(0),Os=0,Rs=null,Is=0,Ls=0,zs=0,Fs=0,Ms=null,Ds=0,js=1/0;function Us(){js=jo()+500}var qs,Vs=null,Ws=!1,Hs=null,Ks=null,$s=!1,Js=null,Qs=90,Ys=[],Xs=[],Gs=null,Zs=0,el=null,tl=-1,nl=0,rl=0,ol=null,al=!1;function il(){return 0!=(48&Ss)?jo():-1!==tl?tl:tl=jo()}function sl(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Uo()?1:2;if(0===nl&&(nl=Is),0!==$o.transition){0!==rl&&(rl=null!==Ms?Ms.pendingLanes:0),e=nl;var t=4186112&~rl;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Uo(),e=Dt(0!=(4&Ss)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),nl)}function ll(e,t,n){if(50<Zs)throw Zs=0,el=null,Error(i(185));if(null===(e=ul(e,t)))return null;qt(e,t,n),e===_s&&(zs|=t,4===Os&&dl(e,Ps));var r=Uo();1===t?0!=(8&Ss)&&0==(48&Ss)?pl(e):(cl(e,n),0===Ss&&(Us(),Ho())):(0==(4&Ss)||98!==r&&99!==r||(null===Gs?Gs=new Set([e]):Gs.add(e)),cl(e,n)),Ms=e}function ul(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function cl(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,a=e.expirationTimes,s=e.pendingLanes;0<s;){var l=31-Vt(s),u=1<<l,c=a[l];if(-1===c){if(0==(u&r)||0!=(u&o)){c=t,zt(u);var f=Lt;a[l]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=u);s&=~u}if(r=Ft(e,e===_s?Ps:0),t=Lt,0===r)null!==n&&(n!==Io&&xo(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Io&&xo(n)}15===t?(n=pl.bind(null,e),null===zo?(zo=[n],Fo=ko(Po,Ko)):zo.push(n),n=Io):n=14===t?Wo(99,pl.bind(null,e)):Wo(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),fl.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function fl(e){if(tl=-1,rl=nl=0,0!=(48&Ss))throw Error(i(327));var t=e.callbackNode;if(Pl()&&e.callbackNode!==t)return null;var n=Ft(e,e===_s?Ps:0);if(0===n)return null;var r=n,o=Ss;Ss|=16;var a=bl();for(_s===e&&Ps===r||(Us(),yl(e,r));;)try{kl();break}catch(t){vl(e,t)}if(Zo(),xs.current=a,Ss=o,null!==Ns?r=0:(_s=null,Ps=0,r=Os),0!=(Is&zs))yl(e,0);else if(0!==r){if(2===r&&(Ss|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(n=Mt(e))&&(r=Cl(e,n))),1===r)throw t=Rs,yl(e,0),dl(e,n),cl(e,jo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(i(345));case 2:Sl(e);break;case 3:if(dl(e,n),(62914560&n)===n&&10<(r=Ds+500-jo())){if(0!==Ft(e,0))break;if(((o=e.suspendedLanes)&n)!==n){il(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Ur(Sl.bind(null,e),r);break}Sl(e);break;case 4:if(dl(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var s=31-Vt(n);a=1<<s,(s=r[s])>o&&(o=s),n&=~a}if(n=o,10<(n=(120>(n=jo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*ks(n/1960))-n)){e.timeoutHandle=Ur(Sl.bind(null,e),n);break}Sl(e);break;case 5:Sl(e);break;default:throw Error(i(329))}}return cl(e,jo()),e.callbackNode===t?fl.bind(null,e):null}function dl(e,t){for(t&=~Fs,t&=~zs,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Vt(t),r=1<<n;e[n]=-1,t&=~r}}function pl(e){if(0!=(48&Ss))throw Error(i(327));if(Pl(),e===_s&&0!=(e.expiredLanes&Ps)){var t=Ps,n=Cl(e,t);0!=(Is&zs)&&(n=Cl(e,t=Ft(e,t)))}else n=Cl(e,t=Ft(e,0));if(0!==e.tag&&2===n&&(Ss|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(t=Mt(e))&&(n=Cl(e,t))),1===n)throw n=Rs,yl(e,0),dl(e,t),cl(e,jo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Sl(e),cl(e,jo()),null}function hl(e,t){var n=Ss;Ss|=1;try{return e(t)}finally{0===(Ss=n)&&(Us(),Ho())}}function ml(e,t){var n=Ss;Ss&=-2,Ss|=8;try{return e(t)}finally{0===(Ss=n)&&(Us(),Ho())}}function gl(e,t){so(Bs,Ts),Ts|=t,Is|=t}function Al(){Ts=Bs.current,io(Bs)}function yl(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,qr(n)),null!==Ns)for(n=Ns.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&mo();break;case 3:Ba(),io(co),io(uo),Ka();break;case 5:Ra(r);break;case 4:Ba();break;case 13:case 19:io(Ia);break;case 10:ea(r);break;case 23:case 24:Al()}n=n.return}_s=e,Ns=jl(e.current,null),Ps=Ts=Is=t,Os=0,Rs=null,Fs=zs=Ls=0}function vl(e,t){for(;;){var n=Ns;try{if(Zo(),$a.current=Ni,Za){for(var r=Ya.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}Za=!1}if(Qa=0,Ga=Xa=Ya=null,ei=!1,Es.current=null,null===n||null===n.return){Os=1,Rs=t,Ns=null;break}e:{var a=e,i=n.return,s=n,l=t;if(t=Ps,s.flags|=2048,s.firstEffect=s.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var u=l;if(0==(2&s.mode)){var c=s.alternate;c?(s.updateQueue=c.updateQueue,s.memoizedState=c.memoizedState,s.lanes=c.lanes):(s.updateQueue=null,s.memoizedState=null)}var f=0!=(1&Ia.current),d=i;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var m=d.memoizedProps;p=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!f)}}if(p){var g=d.updateQueue;if(null===g){var A=new Set;A.add(u),d.updateQueue=A}else g.add(u);if(0==(2&d.mode)){if(d.flags|=64,s.flags|=16384,s.flags&=-2981,1===s.tag)if(null===s.alternate)s.tag=17;else{var y=sa(-1,1);y.tag=2,la(s,y)}s.lanes|=1;break e}l=void 0,s=t;var v=a.pingCache;if(null===v?(v=a.pingCache=new as,l=new Set,v.set(u,l)):void 0===(l=v.get(u))&&(l=new Set,v.set(u,l)),!l.has(s)){l.add(s);var b=Ll.bind(null,a,u,s);u.then(b,b)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);l=Error(($(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Os&&(Os=2),l=rs(l,s),d=i;do{switch(d.tag){case 3:a=l,d.flags|=4096,t&=-t,d.lanes|=t,ua(d,is(0,a,t));break e;case 1:a=l;var C=d.type,w=d.stateNode;if(0==(64&d.flags)&&("function"==typeof C.getDerivedStateFromError||null!==w&&"function"==typeof w.componentDidCatch&&(null===Ks||!Ks.has(w)))){d.flags|=4096,t&=-t,d.lanes|=t,ua(d,ss(d,a,t));break e}}d=d.return}while(null!==d)}El(n)}catch(e){t=e,Ns===n&&null!==n&&(Ns=n=n.return);continue}break}}function bl(){var e=xs.current;return xs.current=Ni,null===e?Ni:e}function Cl(e,t){var n=Ss;Ss|=16;var r=bl();for(_s===e&&Ps===t||yl(e,t);;)try{wl();break}catch(t){vl(e,t)}if(Zo(),Ss=n,xs.current=r,null!==Ns)throw Error(i(261));return _s=null,Ps=0,Os}function wl(){for(;null!==Ns;)xl(Ns)}function kl(){for(;null!==Ns&&!Eo();)xl(Ns)}function xl(e){var t=qs(e.alternate,e,Ts);e.memoizedProps=e.pendingProps,null===t?El(e):Ns=t,Es.current=null}function El(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=ts(n,t,Ts)))return void(Ns=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Ts)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=ns(t)))return n.flags&=2047,void(Ns=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Ns=t);Ns=t=e}while(null!==t);0===Os&&(Os=5)}function Sl(e){var t=Uo();return Vo(99,_l.bind(null,e,t)),null}function _l(e,t){do{Pl()}while(null!==Js);if(0!=(48&Ss))throw Error(i(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,a=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var s=e.eventTimes,l=e.expirationTimes;0<a;){var u=31-Vt(a),c=1<<u;o[u]=0,s[u]=-1,l[u]=-1,a&=~c}if(null!==Gs&&0==(24&r)&&Gs.has(e)&&Gs.delete(e),e===_s&&(Ns=_s=null,Ps=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Ss,Ss|=32,Es.current=null,Fr=Jt,pr(s=dr())){if("selectionStart"in s)l={start:s.selectionStart,end:s.selectionEnd};else e:if(l=(l=s.ownerDocument)&&l.defaultView||window,(c=l.getSelection&&l.getSelection())&&0!==c.rangeCount){l=c.anchorNode,a=c.anchorOffset,u=c.focusNode,c=c.focusOffset;try{l.nodeType,u.nodeType}catch(e){l=null;break e}var f=0,d=-1,p=-1,h=0,m=0,g=s,A=null;t:for(;;){for(var y;g!==l||0!==a&&3!==g.nodeType||(d=f+a),g!==u||0!==c&&3!==g.nodeType||(p=f+c),3===g.nodeType&&(f+=g.nodeValue.length),null!==(y=g.firstChild);)A=g,g=y;for(;;){if(g===s)break t;if(A===l&&++h===a&&(d=f),A===u&&++m===c&&(p=f),null!==(y=g.nextSibling))break;A=(g=A).parentNode}g=y}l=-1===d||-1===p?null:{start:d,end:p}}else l=null;l=l||{start:0,end:0}}else l=null;Mr={focusedElem:s,selectionRange:l},Jt=!1,ol=null,al=!1,Vs=r;do{try{Nl()}catch(e){if(null===Vs)throw Error(i(330));Il(Vs,e),Vs=Vs.nextEffect}}while(null!==Vs);ol=null,Vs=r;do{try{for(s=e;null!==Vs;){var v=Vs.flags;if(16&v&&Ae(Vs.stateNode,""),128&v){var b=Vs.alternate;if(null!==b){var C=b.ref;null!==C&&("function"==typeof C?C(null):C.current=null)}}switch(1038&v){case 2:gs(Vs),Vs.flags&=-3;break;case 6:gs(Vs),Vs.flags&=-3,bs(Vs.alternate,Vs);break;case 1024:Vs.flags&=-1025;break;case 1028:Vs.flags&=-1025,bs(Vs.alternate,Vs);break;case 4:bs(Vs.alternate,Vs);break;case 8:vs(s,l=Vs);var w=l.alternate;hs(l),null!==w&&hs(w)}Vs=Vs.nextEffect}}catch(e){if(null===Vs)throw Error(i(330));Il(Vs,e),Vs=Vs.nextEffect}}while(null!==Vs);if(C=Mr,b=dr(),v=C.focusedElem,s=C.selectionRange,b!==v&&v&&v.ownerDocument&&fr(v.ownerDocument.documentElement,v)){null!==s&&pr(v)&&(b=s.start,void 0===(C=s.end)&&(C=b),"selectionStart"in v?(v.selectionStart=b,v.selectionEnd=Math.min(C,v.value.length)):(C=(b=v.ownerDocument||document)&&b.defaultView||window).getSelection&&(C=C.getSelection(),l=v.textContent.length,w=Math.min(s.start,l),s=void 0===s.end?w:Math.min(s.end,l),!C.extend&&w>s&&(l=s,s=w,w=l),l=cr(v,w),a=cr(v,s),l&&a&&(1!==C.rangeCount||C.anchorNode!==l.node||C.anchorOffset!==l.offset||C.focusNode!==a.node||C.focusOffset!==a.offset)&&((b=b.createRange()).setStart(l.node,l.offset),C.removeAllRanges(),w>s?(C.addRange(b),C.extend(a.node,a.offset)):(b.setEnd(a.node,a.offset),C.addRange(b))))),b=[];for(C=v;C=C.parentNode;)1===C.nodeType&&b.push({element:C,left:C.scrollLeft,top:C.scrollTop});for("function"==typeof v.focus&&v.focus(),v=0;v<b.length;v++)(C=b[v]).element.scrollLeft=C.left,C.element.scrollTop=C.top}Jt=!!Fr,Mr=Fr=null,e.current=n,Vs=r;do{try{for(v=e;null!==Vs;){var k=Vs.flags;if(36&k&&fs(v,Vs.alternate,Vs),128&k){b=void 0;var x=Vs.ref;if(null!==x){var E=Vs.stateNode;switch(Vs.tag){case 5:b=E;break;default:b=E}"function"==typeof x?x(b):x.current=b}}Vs=Vs.nextEffect}}catch(e){if(null===Vs)throw Error(i(330));Il(Vs,e),Vs=Vs.nextEffect}}while(null!==Vs);Vs=null,Lo(),Ss=o}else e.current=n;if($s)$s=!1,Js=e,Qs=t;else for(Vs=r;null!==Vs;)t=Vs.nextEffect,Vs.nextEffect=null,8&Vs.flags&&((k=Vs).sibling=null,k.stateNode=null),Vs=t;if(0===(r=e.pendingLanes)&&(Ks=null),1===r?e===el?Zs++:(Zs=0,el=e):Zs=0,n=n.stateNode,Co&&"function"==typeof Co.onCommitFiberRoot)try{Co.onCommitFiberRoot(bo,n,void 0,64==(64&n.current.flags))}catch(e){}if(cl(e,jo()),Ws)throw Ws=!1,e=Hs,Hs=null,e;return 0!=(8&Ss)||Ho(),null}function Nl(){for(;null!==Vs;){var e=Vs.alternate;al||null===ol||(0!=(8&Vs.flags)?Ze(Vs,ol)&&(al=!0):13===Vs.tag&&ws(e,Vs)&&Ze(Vs,ol)&&(al=!0));var t=Vs.flags;0!=(256&t)&&cs(e,Vs),0==(512&t)||$s||($s=!0,Wo(97,(function(){return Pl(),null}))),Vs=Vs.nextEffect}}function Pl(){if(90!==Qs){var e=97<Qs?97:Qs;return Qs=90,Vo(e,Ol)}return!1}function Tl(e,t){Ys.push(t,e),$s||($s=!0,Wo(97,(function(){return Pl(),null})))}function Bl(e,t){Xs.push(t,e),$s||($s=!0,Wo(97,(function(){return Pl(),null})))}function Ol(){if(null===Js)return!1;var e=Js;if(Js=null,0!=(48&Ss))throw Error(i(331));var t=Ss;Ss|=32;var n=Xs;Xs=[];for(var r=0;r<n.length;r+=2){var o=n[r],a=n[r+1],s=o.destroy;if(o.destroy=void 0,"function"==typeof s)try{s()}catch(e){if(null===a)throw Error(i(330));Il(a,e)}}for(n=Ys,Ys=[],r=0;r<n.length;r+=2){o=n[r],a=n[r+1];try{var l=o.create;o.destroy=l()}catch(e){if(null===a)throw Error(i(330));Il(a,e)}}for(l=e.current.firstEffect;null!==l;)e=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=e;return Ss=t,Ho(),!0}function Rl(e,t,n){la(e,t=is(0,t=rs(n,t),1)),t=il(),null!==(e=ul(e,1))&&(qt(e,1,t),cl(e,t))}function Il(e,t){if(3===e.tag)Rl(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Rl(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ks||!Ks.has(r))){var o=ss(n,e=rs(t,e),1);if(la(n,o),o=il(),null!==(n=ul(n,1)))qt(n,1,o),cl(n,o);else if("function"==typeof r.componentDidCatch&&(null===Ks||!Ks.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Ll(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=il(),e.pingedLanes|=e.suspendedLanes&n,_s===e&&(Ps&n)===n&&(4===Os||3===Os&&(62914560&Ps)===Ps&&500>jo()-Ds?yl(e,0):Fs|=n),cl(e,t)}function zl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Uo()?1:2:(0===nl&&(nl=Is),0===(t=jt(62914560&~nl))&&(t=4194304))),n=il(),null!==(e=ul(e,t))&&(qt(e,t,n),cl(e,n))}function Fl(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Ml(e,t,n,r){return new Fl(e,t,n,r)}function Dl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function jl(e,t){var n=e.alternate;return null===n?((n=Ml(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ul(e,t,n,r,o,a){var s=2;if(r=e,"function"==typeof e)Dl(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case x:return ql(n.children,o,a,t);case z:s=8,o|=16;break;case E:s=8,o|=1;break;case S:return(e=Ml(12,n,t,8|o)).elementType=S,e.type=S,e.lanes=a,e;case T:return(e=Ml(13,n,t,o)).type=T,e.elementType=T,e.lanes=a,e;case B:return(e=Ml(19,n,t,o)).elementType=B,e.lanes=a,e;case F:return Vl(n,o,a,t);case M:return(e=Ml(24,n,t,o)).elementType=M,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case _:s=10;break e;case N:s=9;break e;case P:s=11;break e;case O:s=14;break e;case R:s=16,r=null;break e;case I:s=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Ml(s,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function ql(e,t,n,r){return(e=Ml(7,e,r,t)).lanes=n,e}function Vl(e,t,n,r){return(e=Ml(23,e,r,t)).elementType=F,e.lanes=n,e}function Wl(e,t,n){return(e=Ml(6,e,null,t)).lanes=n,e}function Hl(e,t,n){return(t=Ml(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Kl(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Ut(0),this.expirationTimes=Ut(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ut(0),this.mutableSourceEagerHydrationData=null}function $l(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Jl(e,t,n,r){var o=t.current,a=il(),s=sl(o);e:if(n){t:{if(Qe(n=n._reactInternals)!==n||1!==n.tag)throw Error(i(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(ho(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(i(171))}if(1===n.tag){var u=n.type;if(ho(u)){n=Ao(n,u,l);break e}}n=l}else n=lo;return null===t.context?t.context=n:t.pendingContext=n,(t=sa(a,s)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),la(o,t),ll(o,s,a),s}function Ql(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Yl(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Xl(e,t){Yl(e,t),(e=e.alternate)&&Yl(e,t)}function Gl(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Kl(e,t,null!=n&&!0===n.hydrate),t=Ml(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,aa(t),e[Yr]=n.current,Nr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function Zl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function eu(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var s=o;o=function(){var e=Ql(i);s.call(e)}}Jl(t,i,e,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Gl(e,0,t?{hydrate:!0}:void 0)}(n,r),i=a._internalRoot,"function"==typeof o){var l=o;o=function(){var e=Ql(i);l.call(e)}}ml((function(){Jl(t,i,e,o)}))}return Ql(i)}function tu(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Zl(t))throw Error(i(200));return $l(e,t,null,n)}qs=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||co.current)Ri=!0;else{if(0==(n&r)){switch(Ri=!1,t.tag){case 3:Vi(t),Wa();break;case 5:Oa(t);break;case 1:ho(t.type)&&yo(t);break;case 4:Ta(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;so(Qo,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Ji(e,t,n):(so(Ia,1&Ia.current),null!==(t=Zi(e,t,n))?t.sibling:null);so(Ia,1&Ia.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Gi(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),so(Ia,Ia.current),r)break;return null;case 23:case 24:return t.lanes=0,Mi(e,t,n)}return Zi(e,t,n)}Ri=0!=(16384&e.flags)}else Ri=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=po(t,uo.current),na(t,n),o=ri(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,ho(r)){var a=!0;yo(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,aa(t);var s=r.getDerivedStateFromProps;"function"==typeof s&&pa(t,r,s,e),o.updater=ha,t.stateNode=o,o._reactInternals=t,ya(t,r,e,n),t=qi(null,t,r,!0,a,n)}else t.tag=0,Ii(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(a=o._init)(o._payload),t.type=o,a=t.tag=function(e){if("function"==typeof e)return Dl(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===O)return 14}return 2}(o),e=Jo(o,e),a){case 0:t=ji(null,t,o,e,n);break e;case 1:t=Ui(null,t,o,e,n);break e;case 11:t=Li(null,t,o,e,n);break e;case 14:t=zi(null,t,o,Jo(o.type,e),r,n);break e}throw Error(i(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,ji(e,t,r,o=t.elementType===r?o:Jo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Ui(e,t,r,o=t.elementType===r?o:Jo(r,o),n);case 3:if(Vi(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,ia(e,t),ca(t,r,null,n),(r=t.memoizedState.element)===o)Wa(),t=Zi(e,t,n);else{if((a=(o=t.stateNode).hydrate)&&(Fa=Wr(t.stateNode.containerInfo.firstChild),za=t,a=Ma=!0),a){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(a=e[o])._workInProgressVersionPrimary=e[o+1],Ha.push(a);for(n=xa(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Ii(e,t,r,n),Wa();t=t.child}return t;case 5:return Oa(t),null===e&&Ua(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,s=o.children,jr(r,o)?s=null:null!==a&&jr(r,a)&&(t.flags|=16),Di(e,t),Ii(e,t,s,n),t.child;case 6:return null===e&&Ua(t),null;case 13:return Ji(e,t,n);case 4:return Ta(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=ka(t,null,r,n):Ii(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Li(e,t,r,o=t.elementType===r?o:Jo(r,o),n);case 7:return Ii(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ii(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,s=t.memoizedProps,a=o.value;var l=t.type._context;if(so(Qo,l._currentValue),l._currentValue=a,null!==s)if(l=s.value,0==(a=ir(l,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,a):1073741823))){if(s.children===o.children&&!co.current){t=Zi(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var u=l.dependencies;if(null!==u){s=l.child;for(var c=u.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&a)){1===l.tag&&((c=sa(-1,n&-n)).tag=2,la(l,c)),l.lanes|=n,null!==(c=l.alternate)&&(c.lanes|=n),ta(l.return,n),u.lanes|=n;break}c=c.next}}else s=10===l.tag&&l.type===t.type?null:l.child;if(null!==s)s.return=l;else for(s=l;null!==s;){if(s===t){s=null;break}if(null!==(l=s.sibling)){l.return=s.return,s=l;break}s=s.return}l=s}Ii(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(a=t.pendingProps).children,na(t,n),r=r(o=ra(o,a.unstable_observedBits)),t.flags|=1,Ii(e,t,r,n),t.child;case 14:return a=Jo(o=t.type,t.pendingProps),zi(e,t,o,a=Jo(o.type,a),r,n);case 15:return Fi(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Jo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,ho(r)?(e=!0,yo(t)):e=!1,na(t,n),ga(t,r,o),ya(t,r,o,n),qi(null,t,r,!0,e,n);case 19:return Gi(e,t,n);case 23:case 24:return Mi(e,t,n)}throw Error(i(156,t.tag))},Gl.prototype.render=function(e){Jl(e,this._internalRoot,null,null)},Gl.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Jl(null,e,null,(function(){t[Yr]=null}))},et=function(e){13===e.tag&&(ll(e,4,il()),Xl(e,4))},tt=function(e){13===e.tag&&(ll(e,67108864,il()),Xl(e,67108864))},nt=function(e){if(13===e.tag){var t=il(),n=sl(e);ll(e,n,t),Xl(e,n)}},rt=function(e,t){return t()},Se=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=to(r);if(!o)throw Error(i(90));X(r),ne(r,o)}}}break;case"textarea":ue(e,n);break;case"select":null!=(t=n.value)&&ie(e,!!n.multiple,t,!1)}},Oe=hl,Re=function(e,t,n,r,o){var a=Ss;Ss|=4;try{return Vo(98,e.bind(null,t,n,r,o))}finally{0===(Ss=a)&&(Us(),Ho())}},Ie=function(){0==(49&Ss)&&(function(){if(null!==Gs){var e=Gs;Gs=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,cl(e,jo())}))}Ho()}(),Pl())},Le=function(e,t){var n=Ss;Ss|=2;try{return e(t)}finally{0===(Ss=n)&&(Us(),Ho())}};var nu={Events:[Zr,eo,to,Te,Be,Pl,{current:!1}]},ru={findFiberByHostInstance:Gr,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},ou={bundleType:ru.bundleType,version:ru.version,rendererPackageName:ru.rendererPackageName,rendererConfig:ru.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:C.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ge(e))?null:e.stateNode},findFiberByHostInstance:ru.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var au=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!au.isDisabled&&au.supportsFiber)try{bo=au.inject(ou),Co=au}catch(me){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=nu,t.createPortal=tu,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return null===(e=Ge(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Ss;if(0!=(48&n))return e(t);Ss|=1;try{if(e)return Vo(99,e.bind(null,t))}finally{Ss=n,Ho()}},t.hydrate=function(e,t,n){if(!Zl(t))throw Error(i(200));return eu(null,e,t,!0,n)},t.render=function(e,t,n){if(!Zl(t))throw Error(i(200));return eu(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Zl(e))throw Error(i(40));return!!e._reactRootContainer&&(ml((function(){eu(null,null,e,!1,(function(){e._reactRootContainer=null,e[Yr]=null}))})),!0)},t.unstable_batchedUpdates=hl,t.unstable_createPortal=function(e,t){return tu(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Zl(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return eu(e,t,n,!1,r)},t.version="17.0.2"},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},2408:(e,t,n)=>{"use strict";var r=n(7418),o=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,s=60110,l=60112;t.Suspense=60113;var u=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),a=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),i=f("react.provider"),s=f("react.context"),l=f("react.forward_ref"),t.Suspense=f("react.suspense"),u=f("react.memo"),c=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function g(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function A(){}function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},A.prototype=g.prototype;var v=y.prototype=new A;v.constructor=y,r(v,g.prototype),v.isPureReactComponent=!0;var b={current:null},C=Object.prototype.hasOwnProperty,w={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,n){var r,a={},i=null,s=null;if(null!=t)for(r in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(i=""+t.key),t)C.call(t,r)&&!w.hasOwnProperty(r)&&(a[r]=t[r]);var l=arguments.length-2;if(1===l)a.children=n;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];a.children=u}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===a[r]&&(a[r]=l[r]);return{$$typeof:o,type:e,key:i,ref:s,props:a,_owner:b.current}}function x(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var E=/\/+/g;function S(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function _(e,t,n,r,i){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case o:case a:l=!0}}if(l)return i=i(l=e),e=""===r?"."+S(l,0):r,Array.isArray(i)?(n="",null!=e&&(n=e.replace(E,"$&/")+"/"),_(i,t,n,"",(function(e){return e}))):null!=i&&(x(i)&&(i=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,n+(!i.key||l&&l.key===i.key?"":(""+i.key).replace(E,"$&/")+"/")+e)),t.push(i)),1;if(l=0,r=""===r?".":r+":",Array.isArray(e))for(var u=0;u<e.length;u++){var c=r+S(s=e[u],u);l+=_(s,t,n,c,i)}else if("function"==typeof(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=c.call(e),u=0;!(s=e.next()).done;)l+=_(s=s.value,t,n,c=r+S(s,u++),i);else if("object"===s)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return l}function N(e,t,n){if(null==e)return e;var r=[],o=0;return _(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function P(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var T={current:null};function B(){var e=T.current;if(null===e)throw Error(p(321));return e}var O={ReactCurrentDispatcher:T,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:b,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:N,forEach:function(e,t,n){N(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return N(e,(function(){t++})),t},toArray:function(e){return N(e,(function(e){return e}))||[]},only:function(e){if(!x(e))throw Error(p(143));return e}},t.Component=g,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=O,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var a=r({},e.props),i=e.key,s=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,l=b.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)C.call(t,c)&&!w.hasOwnProperty(c)&&(a[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)a.children=n;else if(1<c){u=Array(c);for(var f=0;f<c;f++)u[f]=arguments[f+2];a.children=u}return{$$typeof:o,type:e.type,key:i,ref:s,props:a,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:s,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:l,render:e}},t.isValidElement=x,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:P}},t.memo=function(e,t){return{$$typeof:u,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return B().useCallback(e,t)},t.useContext=function(e,t){return B().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return B().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return B().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return B().useLayoutEffect(e,t)},t.useMemo=function(e,t){return B().useMemo(e,t)},t.useReducer=function(e,t,n){return B().useReducer(e,t,n)},t.useRef=function(e){return B().useRef(e)},t.useState=function(e){return B().useState(e)},t.version="17.0.2"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},53:(e,t)=>{"use strict";var n,r,o,a;if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var s=Date,l=s.now();t.unstable_now=function(){return s.now()-l}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,c=null,f=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==u?setTimeout(n,0,e):(u=e,setTimeout(f,0))},r=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},a=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var m=!1,g=null,A=-1,y=5,v=0;t.unstable_shouldYield=function(){return t.unstable_now()>=v},a=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<e?Math.floor(1e3/e):5};var b=new MessageChannel,C=b.port2;b.port1.onmessage=function(){if(null!==g){var e=t.unstable_now();v=e+y;try{g(!0,e)?C.postMessage(null):(m=!1,g=null)}catch(e){throw C.postMessage(null),e}}else m=!1},n=function(e){g=e,m||(m=!0,C.postMessage(null))},r=function(e,n){A=d((function(){e(t.unstable_now())}),n)},o=function(){p(A),A=-1}}function w(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<E(o,t)))break e;e[r]=t,e[n]=o,n=r}}function k(e){return void 0===(e=e[0])?null:e}function x(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],s=a+1,l=e[s];if(void 0!==i&&0>E(i,n))void 0!==l&&0>E(l,i)?(e[r]=l,e[s]=n,r=s):(e[r]=i,e[a]=n,r=a);else{if(!(void 0!==l&&0>E(l,n)))break e;e[r]=l,e[s]=n,r=s}}}return t}return null}function E(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var S=[],_=[],N=1,P=null,T=3,B=!1,O=!1,R=!1;function I(e){for(var t=k(_);null!==t;){if(null===t.callback)x(_);else{if(!(t.startTime<=e))break;x(_),t.sortIndex=t.expirationTime,w(S,t)}t=k(_)}}function L(e){if(R=!1,I(e),!O)if(null!==k(S))O=!0,n(z);else{var t=k(_);null!==t&&r(L,t.startTime-e)}}function z(e,n){O=!1,R&&(R=!1,o()),B=!0;var a=T;try{for(I(n),P=k(S);null!==P&&(!(P.expirationTime>n)||e&&!t.unstable_shouldYield());){var i=P.callback;if("function"==typeof i){P.callback=null,T=P.priorityLevel;var s=i(P.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?P.callback=s:P===k(S)&&x(S),I(n)}else x(S);P=k(S)}if(null!==P)var l=!0;else{var u=k(_);null!==u&&r(L,u.startTime-n),l=!1}return l}finally{P=null,T=a,B=!1}}var F=a;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){O||B||(O=!0,n(z))},t.unstable_getCurrentPriorityLevel=function(){return T},t.unstable_getFirstCallbackNode=function(){return k(S)},t.unstable_next=function(e){switch(T){case 1:case 2:case 3:var t=3;break;default:t=T}var n=T;T=t;try{return e()}finally{T=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=F,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=T;T=e;try{return t()}finally{T=n}},t.unstable_scheduleCallback=function(e,a,i){var s=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?s+i:s,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:N++,callback:a,priorityLevel:e,startTime:i,expirationTime:l=i+l,sortIndex:-1},i>s?(e.sortIndex=i,w(_,e),null===k(S)&&e===k(_)&&(R?o():R=!0,r(L,i-s))):(e.sortIndex=l,w(S,e),O||B||(O=!0,n(z))),e},t.unstable_wrapCallback=function(e){var t=T;return function(){var n=T;T=t;try{return e.apply(this,arguments)}finally{T=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)},751:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.io=t.Socket=t.Manager=t.protocol=void 0;const r=n(6744),o=n(7703),a=n(1227)("socket.io-client");e.exports=t=s;const i=t.managers={};function s(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};const n=r.url(e,t.path||"/socket.io"),s=n.source,l=n.id,u=n.path,c=i[l]&&u in i[l].nsps;let f;return t.forceNew||t["force new connection"]||!1===t.multiplex||c?(a("ignoring socket cache for %s",s),f=new o.Manager(s,t)):(i[l]||(a("new io instance for %s",s),i[l]=new o.Manager(s,t)),f=i[l]),n.query&&!t.query&&(t.query=n.queryKey),f.socket(n.path,t)}t.io=s;var l=n(5485);Object.defineProperty(t,"protocol",{enumerable:!0,get:function(){return l.protocol}}),t.connect=s;var u=n(7703);Object.defineProperty(t,"Manager",{enumerable:!0,get:function(){return u.Manager}});var c=n(2277);Object.defineProperty(t,"Socket",{enumerable:!0,get:function(){return c.Socket}}),t.default=s},7703:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Manager=void 0;const r=n(5983),o=n(2277),a=n(5485),i=n(5657),s=n(3010),l=n(8791),u=n(1227)("socket.io-client:manager");class c extends l.StrictEventEmitter{constructor(e,t){super(),this.nsps={},this.subs=[],e&&"object"==typeof e&&(t=e,e=void 0),(t=t||{}).path=t.path||"/socket.io",this.opts=t,this.reconnection(!1!==t.reconnection),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor(t.randomizationFactor||.5),this.backoff=new s({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==t.timeout?2e4:t.timeout),this._readyState="closed",this.uri=e;const n=t.parser||a;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this._autoConnect=!1!==t.autoConnect,this._autoConnect&&this.open()}reconnection(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection}reconnectionAttempts(e){return void 0===e?this._reconnectionAttempts:(this._reconnectionAttempts=e,this)}reconnectionDelay(e){var t;return void 0===e?this._reconnectionDelay:(this._reconnectionDelay=e,null===(t=this.backoff)||void 0===t||t.setMin(e),this)}randomizationFactor(e){var t;return void 0===e?this._randomizationFactor:(this._randomizationFactor=e,null===(t=this.backoff)||void 0===t||t.setJitter(e),this)}reconnectionDelayMax(e){var t;return void 0===e?this._reconnectionDelayMax:(this._reconnectionDelayMax=e,null===(t=this.backoff)||void 0===t||t.setMax(e),this)}timeout(e){return arguments.length?(this._timeout=e,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(e){if(u("readyState %s",this._readyState),~this._readyState.indexOf("open"))return this;u("opening %s",this.uri),this.engine=r(this.uri,this.opts);const t=this.engine,n=this;this._readyState="opening",this.skipReconnect=!1;const o=i.on(t,"open",(function(){n.onopen(),e&&e()})),a=i.on(t,"error",(t=>{u("error"),n.cleanup(),n._readyState="closed",this.emitReserved("error",t),e?e(t):n.maybeReconnectOnOpen()}));if(!1!==this._timeout){const e=this._timeout;u("connect attempt will timeout after %d",e),0===e&&o();const n=setTimeout((()=>{u("connect attempt timed out after %d",e),o(),t.close(),t.emit("error",new Error("timeout"))}),e);this.opts.autoUnref&&n.unref(),this.subs.push((function(){clearTimeout(n)}))}return this.subs.push(o),this.subs.push(a),this}connect(e){return this.open(e)}onopen(){u("open"),this.cleanup(),this._readyState="open",this.emitReserved("open");const e=this.engine;this.subs.push(i.on(e,"ping",this.onping.bind(this)),i.on(e,"data",this.ondata.bind(this)),i.on(e,"error",this.onerror.bind(this)),i.on(e,"close",this.onclose.bind(this)),i.on(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(e){this.decoder.add(e)}ondecoded(e){this.emitReserved("packet",e)}onerror(e){u("error",e),this.emitReserved("error",e)}socket(e,t){let n=this.nsps[e];return n||(n=new o.Socket(this,e,t),this.nsps[e]=n),n}_destroy(e){const t=Object.keys(this.nsps);for(const e of t)if(this.nsps[e].active)return void u("socket %s is still active, skipping close",e);this._close()}_packet(e){u("writing packet %j",e);const t=this.encoder.encode(e);for(let n=0;n<t.length;n++)this.engine.write(t[n],e.options)}cleanup(){u("cleanup"),this.subs.forEach((e=>e())),this.subs.length=0,this.decoder.destroy()}_close(){u("disconnect"),this.skipReconnect=!0,this._reconnecting=!1,"opening"===this._readyState&&this.cleanup(),this.backoff.reset(),this._readyState="closed",this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(e){u("onclose"),this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",e),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const e=this;if(this.backoff.attempts>=this._reconnectionAttempts)u("reconnect failed"),this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const t=this.backoff.duration();u("will wait %dms before reconnect attempt",t),this._reconnecting=!0;const n=setTimeout((()=>{e.skipReconnect||(u("attempting reconnect"),this.emitReserved("reconnect_attempt",e.backoff.attempts),e.skipReconnect||e.open((t=>{t?(u("reconnect attempt error"),e._reconnecting=!1,e.reconnect(),this.emitReserved("reconnect_error",t)):(u("reconnect success"),e.onreconnect())})))}),t);this.opts.autoUnref&&n.unref(),this.subs.push((function(){clearTimeout(n)}))}}onreconnect(){const e=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",e)}}t.Manager=c},5657:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.on=void 0,t.on=function(e,t,n){return e.on(t,n),function(){e.off(t,n)}}},2277:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Socket=void 0;const r=n(5485),o=n(5657),a=n(8791),i=n(1227)("socket.io-client:socket"),s=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class l extends a.StrictEventEmitter{constructor(e,t,n){super(),this.receiveBuffer=[],this.sendBuffer=[],this.ids=0,this.acks={},this.flags={},this.io=e,this.nsp=t,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},n&&n.auth&&(this.auth=n.auth),this.io._autoConnect&&this.open()}subEvents(){if(this.subs)return;const e=this.io;this.subs=[o.on(e,"open",this.onopen.bind(this)),o.on(e,"packet",this.onpacket.bind(this)),o.on(e,"error",this.onerror.bind(this)),o.on(e,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...e){return e.unshift("message"),this.emit.apply(this,e),this}emit(e,...t){if(s.hasOwnProperty(e))throw new Error('"'+e+'" is a reserved event name');t.unshift(e);const n={type:r.PacketType.EVENT,data:t,options:{}};n.options.compress=!1!==this.flags.compress,"function"==typeof t[t.length-1]&&(i("emitting packet with ack id %d",this.ids),this.acks[this.ids]=t.pop(),n.id=this.ids++);const o=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return!this.flags.volatile||o&&this.connected?this.connected?this.packet(n):this.sendBuffer.push(n):i("discard packet as the transport is not currently writable"),this.flags={},this}packet(e){e.nsp=this.nsp,this.io._packet(e)}onopen(){i("transport is open - connecting"),"function"==typeof this.auth?this.auth((e=>{this.packet({type:r.PacketType.CONNECT,data:e})})):this.packet({type:r.PacketType.CONNECT,data:this.auth})}onerror(e){this.connected||this.emitReserved("connect_error",e)}onclose(e){i("close (%s)",e),this.connected=!1,this.disconnected=!0,delete this.id,this.emitReserved("disconnect",e)}onpacket(e){if(e.nsp===this.nsp)switch(e.type){case r.PacketType.CONNECT:if(e.data&&e.data.sid){const t=e.data.sid;this.onconnect(t)}else this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case r.PacketType.EVENT:case r.PacketType.BINARY_EVENT:this.onevent(e);break;case r.PacketType.ACK:case r.PacketType.BINARY_ACK:this.onack(e);break;case r.PacketType.DISCONNECT:this.ondisconnect();break;case r.PacketType.CONNECT_ERROR:const t=new Error(e.data.message);t.data=e.data.data,this.emitReserved("connect_error",t)}}onevent(e){const t=e.data||[];i("emitting event %j",t),null!=e.id&&(i("attaching ack callback to event"),t.push(this.ack(e.id))),this.connected?this.emitEvent(t):this.receiveBuffer.push(Object.freeze(t))}emitEvent(e){if(this._anyListeners&&this._anyListeners.length){const t=this._anyListeners.slice();for(const n of t)n.apply(this,e)}super.emit.apply(this,e)}ack(e){const t=this;let n=!1;return function(...o){n||(n=!0,i("sending ack %j",o),t.packet({type:r.PacketType.ACK,id:e,data:o}))}}onack(e){const t=this.acks[e.id];"function"==typeof t?(i("calling ack %s with %j",e.id,e.data),t.apply(this,e.data),delete this.acks[e.id]):i("bad ack %s",e.id)}onconnect(e){i("socket connected with id %s",e),this.id=e,this.connected=!0,this.disconnected=!1,this.emitBuffered(),this.emitReserved("connect")}emitBuffered(){this.receiveBuffer.forEach((e=>this.emitEvent(e))),this.receiveBuffer=[],this.sendBuffer.forEach((e=>this.packet(e))),this.sendBuffer=[]}ondisconnect(){i("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach((e=>e())),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&(i("performing disconnect (%s)",this.nsp),this.packet({type:r.PacketType.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(e){return this.flags.compress=e,this}get volatile(){return this.flags.volatile=!0,this}onAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(e),this}prependAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(e),this}offAny(e){if(!this._anyListeners)return this;if(e){const t=this._anyListeners;for(let n=0;n<t.length;n++)if(e===t[n])return t.splice(n,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}}t.Socket=l},8791:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.StrictEventEmitter=void 0;const r=n(8767);t.StrictEventEmitter=class extends r{on(e,t){return super.on(e,t),this}once(e,t){return super.once(e,t),this}emit(e,...t){return super.emit(e,...t),this}emitReserved(e,...t){return super.emit(e,...t),this}listeners(e){return super.listeners(e)}}},6744:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.url=void 0;const r=n(4187),o=n(1227)("socket.io-client:url");t.url=function(e,t="",n){let a=e;n=n||"undefined"!=typeof location&&location,null==e&&(e=n.protocol+"//"+n.host),"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?n.protocol+e:n.host+e),/^(https?|wss?):\/\//.test(e)||(o("protocol-less url %s",e),e=void 0!==n?n.protocol+"//"+e:"https://"+e),o("parse %s",e),a=r(e)),a.port||(/^(http|ws)$/.test(a.protocol)?a.port="80":/^(http|ws)s$/.test(a.protocol)&&(a.port="443")),a.path=a.path||"/";const i=-1!==a.host.indexOf(":")?"["+a.host+"]":a.host;return a.id=a.protocol+"://"+i+":"+a.port+t,a.href=a.protocol+"://"+i+(n&&n.port===a.port?"":":"+a.port),a}},7719:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.reconstructPacket=t.deconstructPacket=void 0;const r=n(2986);function o(e,t){if(!e)return e;if(r.isBinary(e)){const n={_placeholder:!0,num:t.length};return t.push(e),n}if(Array.isArray(e)){const n=new Array(e.length);for(let r=0;r<e.length;r++)n[r]=o(e[r],t);return n}if("object"==typeof e&&!(e instanceof Date)){const n={};for(const r in e)e.hasOwnProperty(r)&&(n[r]=o(e[r],t));return n}return e}function a(e,t){if(!e)return e;if(e&&e._placeholder)return t[e.num];if(Array.isArray(e))for(let n=0;n<e.length;n++)e[n]=a(e[n],t);else if("object"==typeof e)for(const n in e)e.hasOwnProperty(n)&&(e[n]=a(e[n],t));return e}t.deconstructPacket=function(e){const t=[],n=e.data,r=e;return r.data=o(n,t),r.attachments=t.length,{packet:r,buffers:t}},t.reconstructPacket=function(e,t){return e.data=a(e.data,t),e.attachments=void 0,e}},5485:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Decoder=t.Encoder=t.PacketType=t.protocol=void 0;const r=n(8767),o=n(7719),a=n(2986),i=n(1227)("socket.io-parser");var s;t.protocol=5,function(e){e[e.CONNECT=0]="CONNECT",e[e.DISCONNECT=1]="DISCONNECT",e[e.EVENT=2]="EVENT",e[e.ACK=3]="ACK",e[e.CONNECT_ERROR=4]="CONNECT_ERROR",e[e.BINARY_EVENT=5]="BINARY_EVENT",e[e.BINARY_ACK=6]="BINARY_ACK"}(s=t.PacketType||(t.PacketType={})),t.Encoder=class{encode(e){return i("encoding packet %j",e),e.type!==s.EVENT&&e.type!==s.ACK||!a.hasBinary(e)?[this.encodeAsString(e)]:(e.type=e.type===s.EVENT?s.BINARY_EVENT:s.BINARY_ACK,this.encodeAsBinary(e))}encodeAsString(e){let t=""+e.type;return e.type!==s.BINARY_EVENT&&e.type!==s.BINARY_ACK||(t+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(t+=e.nsp+","),null!=e.id&&(t+=e.id),null!=e.data&&(t+=JSON.stringify(e.data)),i("encoded %j as %s",e,t),t}encodeAsBinary(e){const t=o.deconstructPacket(e),n=this.encodeAsString(t.packet),r=t.buffers;return r.unshift(n),r}};class l extends r{constructor(){super()}add(e){let t;if("string"==typeof e)t=this.decodeString(e),t.type===s.BINARY_EVENT||t.type===s.BINARY_ACK?(this.reconstructor=new u(t),0===t.attachments&&super.emit("decoded",t)):super.emit("decoded",t);else{if(!a.isBinary(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");t=this.reconstructor.takeBinaryData(e),t&&(this.reconstructor=null,super.emit("decoded",t))}}decodeString(e){let t=0;const n={type:Number(e.charAt(0))};if(void 0===s[n.type])throw new Error("unknown packet type "+n.type);if(n.type===s.BINARY_EVENT||n.type===s.BINARY_ACK){const r=t+1;for(;"-"!==e.charAt(++t)&&t!=e.length;);const o=e.substring(r,t);if(o!=Number(o)||"-"!==e.charAt(t))throw new Error("Illegal attachments");n.attachments=Number(o)}if("/"===e.charAt(t+1)){const r=t+1;for(;++t&&","!==e.charAt(t)&&t!==e.length;);n.nsp=e.substring(r,t)}else n.nsp="/";const r=e.charAt(t+1);if(""!==r&&Number(r)==r){const r=t+1;for(;++t;){const n=e.charAt(t);if(null==n||Number(n)!=n){--t;break}if(t===e.length)break}n.id=Number(e.substring(r,t+1))}if(e.charAt(++t)){const r=function(e){try{return JSON.parse(e)}catch(e){return!1}}(e.substr(t));if(!l.isPayloadValid(n.type,r))throw new Error("invalid payload");n.data=r}return i("decoded %s as %j",e,n),n}static isPayloadValid(e,t){switch(e){case s.CONNECT:return"object"==typeof t;case s.DISCONNECT:return void 0===t;case s.CONNECT_ERROR:return"string"==typeof t||"object"==typeof t;case s.EVENT:case s.BINARY_EVENT:return Array.isArray(t)&&t.length>0;case s.ACK:case s.BINARY_ACK:return Array.isArray(t)}}destroy(){this.reconstructor&&this.reconstructor.finishedReconstruction()}}t.Decoder=l;class u{constructor(e){this.packet=e,this.buffers=[],this.reconPack=e}takeBinaryData(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){const e=o.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}},2986:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hasBinary=t.isBinary=void 0;const n="function"==typeof ArrayBuffer,r=Object.prototype.toString,o="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===r.call(Blob),a="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===r.call(File);function i(e){return n&&(e instanceof ArrayBuffer||(e=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):e.buffer instanceof ArrayBuffer)(e))||o&&e instanceof Blob||a&&e instanceof File}t.isBinary=i,t.hasBinary=function e(t,n){if(!t||"object"!=typeof t)return!1;if(Array.isArray(t)){for(let n=0,r=t.length;n<r;n++)if(e(t[n]))return!0;return!1}if(i(t))return!0;if(t.toJSON&&"function"==typeof t.toJSON&&1===arguments.length)return e(t.toJSON(),!0);for(const n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&e(t[n]))return!0;return!1}},3379:(e,t,n)=>{"use strict";var r,o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function i(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function s(e,t){for(var n={},r=[],o=0;o<e.length;o++){var s=e[o],l=t.base?s[0]+t.base:s[0],u=n[l]||0,c="".concat(l," ").concat(u);n[l]=u+1;var f=i(c),d={css:s[1],media:s[2],sourceMap:s[3]};-1!==f?(a[f].references++,a[f].updater(d)):a.push({identifier:c,updater:m(d,t),references:1}),r.push(c)}return r}function l(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var a=n.nc;a&&(r.nonce=a)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var i=o(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var u,c=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function f(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=c(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}function d(e,t,n){var r=n.css,o=n.media,a=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,h=0;function m(e,t){var n,r,o;if(t.singleton){var a=h++;n=p||(p=l(t)),r=f.bind(null,n,a,!1),o=f.bind(null,n,a,!0)}else n=l(t),r=d.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=i(n[r]);a[o].references--}for(var l=s(e,t),u=0;u<n.length;u++){var c=i(n[u]);0===a[c].references&&(a[c].updater(),a.splice(c,1))}n=l}}}},2281:e=>{"use strict";var t,n="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),r={},o=0,a=0;function i(e){var t="";do{t=n[e%64]+t,e=Math.floor(e/64)}while(e>0);return t}function s(){var e=i(+new Date);return e!==t?(o=0,t=e):e+"."+i(o++)}for(;a<64;a++)r[n[a]]=a;s.encode=i,s.decode=function(e){var t=0;for(a=0;a<e.length;a++)t=64*t+r[e.charAt(a)];return t},e.exports=s}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=n(7294),t=n(3935),r=n(3379),o=n.n(r),a=n(2061);o()(a.Z,{insert:"head",singleton:!1}),a.Z.locals;const i=()=>e.createElement("div",{className:"topBar"},"Cryptoip",e.createElement("div",{className:"btns"},e.createElement("a",{className:"btn",onClick:()=>{electron.topBarApi.minimizeApp()}},"_"),e.createElement("a",{className:"btn",onClick:()=>{electron.topBarApi.maximizeApp()}},"▭"),e.createElement("a",{className:"btn",onClick:()=>{electron.topBarApi.quitApp()}},"×"))),s=()=>{var[t,n]=(0,e.useState)(electron.utilApi.createSentence()),[r,o]=(0,e.useState)(""),[a,i]=(0,e.useState)(""),[s,l]=(0,e.useState)("");return e.createElement("div",{className:"page register"},e.createElement("form",{className:"form",onSubmit:e=>(e=>{e.preventDefault(),""!=a.replaceAll(" ","")&&""!=s.replaceAll(" ","")&&""!=t.replaceAll(" ","")?a==s?t.replaceAll(" ","-").split("-").length<10?o("Pass sentence need to have minimum 10 words !"):(o(""),electron.configApi.writeConfigPassSentence(t.replaceAll(" ","-"),a),window.location.reload()):o("The two password does not match !"):o("Please fill all inputs !")})(e)},e.createElement("h2",{className:"title"},"Register new account"),e.createElement("label",{className:"form-label"},"Password"),e.createElement("input",{autoFocus:!0,value:a,onInput:e=>i(e.target.value),type:"password",className:"input",placeholder:"e.g Fs4fsef8FS848sf"}),e.createElement("label",{className:"form-label"},"Confirm password"),e.createElement("input",{value:s,onInput:e=>l(e.target.value),type:"password",className:"input",placeholder:"e.g Fs4fsef8FS848sf"}),e.createElement("label",{className:"form-label"},"Pass sentence"),e.createElement("textarea",{onInput:e=>{return(t=e.target.value).replaceAll(" ","-").split("-").length<10?o("Pass sentence need to have minimum 10 words !"):o(""),void n(t);var t},className:"input",rows:"5",cols:"33",value:t.replaceAll("-"," ")}),e.createElement("p",{className:""==r?"hidden":"error"},r),e.createElement("button",{className:"form-button"},"Register")))},l=t=>{var[n,r]=(0,e.useState)(""),[o,a]=(0,e.useState)("");return e.createElement("div",{className:"page login"},e.createElement("form",{className:"form",onSubmit:e=>(e=>{if(e.preventDefault(),""!=n.replaceAll(" ","")){var r=electron.configApi.readConfig(n);0!=r?(a(""),t.handleData(r),t.handleLogged(!0)):a("Incorrect password !")}else a("Please fill all the fields !")})(e)},e.createElement("h2",{className:"title"},"Login"),e.createElement("label",{className:"form-label"},"Password"),e.createElement("input",{autoFocus:!0,value:n,onInput:e=>r(e.target.value),type:"password",className:"input",placeholder:"e.g Fs4fsef8FS848sf"}),e.createElement("p",{className:""==o?"hidden":"error"},o),e.createElement("button",{className:"form-button"},"Login")))},u=t=>{var[n,r]=(0,e.useState)(t.userInfos.username),[o,a]=(0,e.useState)(t.userInfos.serverHistory[t.userInfos.serverHistory.length-1]);return e.createElement("form",{className:"form connectToServer",onSubmit:e=>t.connectToServerHandle(e,o,n)},e.createElement("label",{className:"form-label"},"Username"),e.createElement("input",{className:"input",type:"text",value:n,onInput:e=>r(e.target.value),placeholder:"e.g dimitri"}),e.createElement("label",{className:"form-label"},"Server"),e.createElement("input",{className:"input",type:"text",value:o,onInput:e=>a(e.target.value),placeholder:"e.g 127.0.0.1:3000"}),e.createElement("button",{className:"form-button"},"Connect"),e.createElement("div",{className:t.userInfos.serverHistory.length>0?"show":"hidden"},e.createElement("label",{className:"form-label"},"Server history"),t.userInfos.serverHistory.map((t=>e.createElement("a",{key:t,className:"server",onClick:()=>a(t)},t)))))};var c=n(751);c.Manager,c.Socket;const f=c;function d(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?d(Object(n),!0).forEach((function(t){h(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function h(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var m=null,g="main";function A(e){for(var t="",n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",r=n.length,o=0;o<e;o++)t+=n.charAt(Math.floor(Math.random()*r));return t}var y=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9","+","/"];function v(e){var t,n="",r=e.length;for(t=2;t<r;t+=3)n+=y[e[t-2]>>2],n+=y[(3&e[t-2])<<4|e[t-1]>>4],n+=y[(15&e[t-1])<<2|e[t]>>6],n+=y[63&e[t]];return t===r+1&&(n+=y[e[t-2]>>2],n+=y[(3&e[t-2])<<4],n+="=="),t===r&&(n+=y[e[t-2]>>2],n+=y[(3&e[t-2])<<4|e[t-1]>>4],n+=y[(15&e[t-1])<<2],n+="="),n}var b=(t,n)=>{var[r,o]=(0,e.useState)(!1),[a,i]=(0,e.useState)(!1),[s,l]=(0,e.useState)({}),[u,c]=(0,e.useState)([]),[f,d]=(0,e.useState)(electron.configApi.readMessages(t.userInfos.password,s.endpoint)),[h,y]=(0,e.useState)([]);(0,e.useImperativeHandle)(n,(()=>({setServerInfos(e){l(e)},setChannels(e){c(e)},setMessagesStored(e){d(e)},setClientCallList(e){y(e)},addNotification(e){console.log(g),console.log(e),g!=e&&c((t=>t.map((t=>t.name==e?p(p({},t),{},{unread:t.unread+1}):t))))}})),[]);var[b,C]=(0,e.useState)("");return e.createElement("div",{className:"server"},e.createElement("div",{className:"server-info"},e.createElement("h2",{className:"title host-title"},s.endpoint),e.createElement("button",{className:"form-button disconnect-button",onClick:()=>{o(!1),i(!1),clearInterval(m),t.disconnect()}},e.createElement("i",{className:"fas fa-running"})," Disconnect"),e.createElement("div",{className:"call-buttons"},e.createElement("button",{className:"form-button-outline button-call "+(!r&&a?"show":"hidden"),onClick:()=>{a&&(o(!0),t.socket.emit("muteStatus",!0))}},e.createElement("i",{className:"fas fa-microphone"})),e.createElement("button",{className:"form-button-outline button-call "+(r&&a?"show":"hidden"),onClick:()=>{a&&(o(!1),t.socket.emit("muteStatus",!1))}},e.createElement("i",{className:"fas fa-microphone-slash"})),e.createElement("button",{className:"form-button-outline button-call "+(a?"show":"hidden"),onClick:()=>{i(!1),t.socket.emit("quitCall"),clearInterval(m)}},e.createElement("i",{className:"fas fa-phone-slash"}))),e.createElement("button",{className:"form-button-outline call-btn "+(a?"hidden":"show"),onClick:()=>{i(!0),t.socket.emit("joinCall"),console.log("lesgooo"),navigator.mediaDevices.getUserMedia({audio:!0}).then((function(e){console.log("callback");var n=new MediaRecorder(e);n.onstart=function(e){this.chunks=[]},n.ondataavailable=function(e){this.chunks.push(e.data)},n.onstop=function(e){var n=new Blob(this.chunks,{type:"audio/webm; codecs=opus"}),o=new TextEncoder;r||n.arrayBuffer().then((e=>t.socket.emit("radio",Crypto.encrypt_aes_cbc(Crypto.pkcs_pad(e),o.encode(s.mainKey.slice(0,16)).buffer,o.encode(s.mainKey.slice(0,16)).buffer))))},m=setInterval((()=>{"recording"!=n.state&&(n.start(),setTimeout((()=>{n.stop()}),450))}),10)}))}},e.createElement("i",{className:"fas fa-phone"})),e.createElement("h5",{className:"title motd"},s.motd)),e.createElement("div",{className:"users"},u.map((n=>e.createElement("div",{key:A(16)},n.name!=t.username?e.createElement("a",{disabled:g==n.name,className:"channel-button",onClick:()=>{g=n.name,c((e=>e.map((e=>e.name==n.name?p(p({},e),{},{unread:0}):e))))}},("main"==n.name?"#":"@")+n.name,n.unread>0?e.createElement("p",{className:"notif"},n.unread):e.createElement(e.Fragment,null)):e.createElement(e.Fragment,null))))),e.createElement("div",{className:"panel"},e.createElement("div",{className:"channel",style:{width:a?"85%":"100%"}},e.createElement("h4",{className:"title currentChannel-name"},g),e.createElement("div",{className:"messages"},-1!=u.findIndex((e=>e.name==g))?f.map((t=>e.createElement(e.Fragment,null,t.channel==g?e.createElement("li",{key:A(16),className:"message-holder "+(t.owned?"mine":"")},t.owned?e.createElement("p",{style:{color:"#131313",userSelect:"none"}},"I"):e.createElement(e.Fragment,null),e.createElement("div",{className:"message "+(t.owned?"mine":"")},e.createElement("h5",{className:"title"},t.author),e.createElement("div",{className:"message-content"},e.createElement("p",{className:"text-normal"},t.content),e.createElement("div",{className:"signature-check"},e.createElement("i",{style:{color:t.checked?"#19b019":"#b02819"},className:"fas fa-"+(t.checked?"check-square":"times")}),e.createElement("p",{className:"hover"},e.createElement("strong",null,"Signature:"),t.signature+" ("+(t.checked?"valid":"invalid")+")"))))):e.createElement(e.Fragment,null)))):e.createElement(e.Fragment,null)),e.createElement("form",{className:"sendMessage",onSubmit:e=>{e.preventDefault();var n=A(32),r=A(32),o=u[u.findIndex((e=>e.name==g))],a=electron.utilApi.signData(b,t.keyPair.privateKey,t.userInfos.passSentence);0!=b.replace(/\s/g,"").length&&("main"==o.name?t.socket.emit("message",electron.utilApi.enc(JSON.stringify({message:electron.utilApi.enc(b,r),encryptionKey:v(electron.utilApi.encRSA(r,s.publicKey)),signature:a,receiver:o.socketId,publicKey:btoa(t.keyPair.publicKey)}),n),electron.utilApi.encRSA(n,s.publicKey)):(t.socket.emit("message",electron.utilApi.enc(JSON.stringify({message:electron.utilApi.enc(b,r),encryptionKey:v(electron.utilApi.encRSA(r,u[u.findIndex((e=>e.name==g))].publicKey)),signature:a,receiver:o.socketId}),n),electron.utilApi.encRSA(n,s.publicKey)),d((e=>[...e,{channel:o.name,author:t.username,content:b,owned:!0,signature:a,checked:electron.utilApi.verifySign(b,a,t.keyPair.publicKey)}])))),C("")}},e.createElement("input",{value:b,onChange:e=>C(e.target.value),className:"input message-send",type:"text",placeholder:"Message to "+g}))),a?e.createElement("div",{className:"callPanel"},e.createElement("h4",{className:"title"},"Call"),e.createElement("hr",null),e.createElement("div",{className:"call-list"},h.map((t=>e.createElement("a",{className:"user-call",key:A(16)},u[u.findIndex((e=>e.socketId==t.socketId))].name," ",e.createElement("i",{className:"fas fa-microphone-slash "+(t.muted?"show":"hidden")})))))):e.createElement(e.Fragment,null)))};const C=(0,e.forwardRef)(b);var w=null,k=[255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,62,255,255,255,63,52,53,54,55,56,57,58,59,60,61,255,255,255,0,255,255,255,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,255,255,255,255,255,255,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51];function x(e){if(e>=k.length)throw new Error("Unable to parse base64 string.");var t=k[e];if(255===t)throw new Error("Unable to parse base64 string.");return t}const E=t=>{var[n,r]=(0,e.useState)(!1),[o,a]=(0,e.useState)(electron.utilApi.createKeys()),[i,s]=(0,e.useState)(""),l=(0,e.useRef)();return e.createElement("div",{className:"page main"},n?e.createElement(C,{socket:w,username:i,userInfos:t.userInfos,keyPair:o,disconnect:()=>{w.disconnect(),w=null,r(!1)},ref:l}):e.createElement(u,{userInfos:t.userInfos,connectToServerHandle:(e,n,a)=>{e.preventDefault(),s(a),w=f("http://"+n);var i="",u=[];w.on("connect",(()=>{electron.configApi.writeConfigConnect(n,a),r(!0),w.on("publicKey",(e=>{var r=function(e){for(var t="",n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",r=n.length,o=0;o<32;o++)t+=n.charAt(Math.floor(Math.random()*r));return t}();w.emit("connection",electron.utilApi.enc(JSON.stringify({username:a,keyHash:t.userInfos.keyHash,publicKey:o.publicKey}),r),electron.utilApi.encRSA(r,e)),w.on("infos",(function(t,r){var a=JSON.parse(electron.utilApi.dec(t,(new TextDecoder).decode(electron.utilApi.decRSA(r,o.privateKey))));l.current.setServerInfos({endpoint:n,motd:a.motd,publicKey:e,mainKey:a.mainKey}),i=a.mainKey})),w.on("clientList",(function(e,t){var n=JSON.parse(electron.utilApi.dec(e,(new TextDecoder).decode(electron.utilApi.decRSA(t,o.privateKey))));l.current.setChannels([{name:"main",socketId:"none",unread:0}]),n.forEach((e=>{l.current.setChannels((t=>[...t,{name:e.username,socketId:e.socketId,publicKey:e.publicKey,unread:0}])),u.push({name:e.username,publicKey:e.publicKey})}))})),w.on("kick",(function(e,t){w.disconnect(),l.current.setConnected(!1),alert(electron.utilApi.dec(e,(new TextDecoder).decode(electron.utilApi.decRSA(t,o.privateKey))))})),w.on("message",(function(e,t){var n=JSON.parse(electron.utilApi.dec(e,(new TextDecoder).decode(electron.utilApi.decRSA(t,o.privateKey))).toString()),r=("/html/body/div/div/div[2]/div/div[3]/div/div",document.evaluate("/html/body/div/div/div[2]/div/div[3]/div/div",document,null,XPathResult.FIRST_ORDERED_NODE_TYPE,null).singleNodeValue),i=r.scrollTop+r.clientHeight>r.scrollHeight-50,s=electron.utilApi.dec(n.message,(new TextDecoder).decode(electron.utilApi.decRSA(function(e){if(e.length%4!=0)throw new Error("Unable to parse base64 string.");var t=e.indexOf("=");if(-1!==t&&t<e.length-2)throw new Error("Unable to parse base64 string.");for(var n,r=e.endsWith("==")?2:e.endsWith("=")?1:0,o=e.length,a=new Uint8Array(o/4*3),i=0,s=0;i<o;i+=4,s+=3)n=x(e.charCodeAt(i))<<18|x(e.charCodeAt(i+1))<<12|x(e.charCodeAt(i+2))<<6|x(e.charCodeAt(i+3)),a[s]=n>>16,a[s+1]=n>>8&255,a[s+2]=255&n;return a.subarray(0,a.length-r)}(n.encryptionKey),o.privateKey)));l.current.addNotification(n.isMain?"main":n.author==a?n.receiverName:n.author),l.current.setMessagesStored((e=>[...e,{channel:n.isMain?"main":n.author==a?n.receiverName:n.author,author:n.author,content:s,owned:n.author==a,signature:n.signature,checked:n.isMain?electron.utilApi.verifySign(s,n.signature,atob(n.publicKey)):electron.utilApi.verifySign(s,n.signature,u.find((e=>e.name==n.author==a?n.receiverName:n.author)).publicKey)}])),i&&(r.scrollTop=r.scrollHeight)})),w.on("joinedcall",(()=>{new Audio("./connected.wav").play()})),w.on("disconnectcall",(()=>{new Audio("./disconnect.wav").play()})),w.on("callList",((e,t)=>{var n=JSON.parse(electron.utilApi.dec(e,(new TextDecoder).decode(electron.utilApi.decRSA(t,o.privateKey))));l.current.setClientCallList(n)})),w.on("voice",(function(e){var t=new TextEncoder,n=new Blob([Crypto.pkcs_unpad(Crypto.decrypt_aes_cbc(e,t.encode(i.slice(0,16)).buffer,t.encode(i.slice(0,16)).buffer))],{type:"audio/webm; codecs=opus"}),r=document.createElement("audio");r.src=window.URL.createObjectURL(n),r.play()}))}))}))}}))};var S=n(9669),_=n.n(S);const N=()=>{var[t,n]=(0,e.useState)(!1);return e.createElement("div",{className:"clear-data "+(t?"opened":"closed")},t?e.createElement("div",{className:"confirm"},e.createElement("h4",{className:"text-normal"},"Do you really want to delete all your data ?",e.createElement("br",null),e.createElement("span",{className:"infotext"},"(You will loose your account, messages, server history and you cannot undo, files are encrypted)")),e.createElement("div",{className:"buttons"},e.createElement("button",{className:"form-button-outline",onClick:()=>n(!1)},"Cancel"),e.createElement("button",{className:"form-button",onClick:()=>{electron.configApi.clearData(),window.location.reload()}},"Delete"))):e.createElement(e.Fragment,null),e.createElement("button",{className:"form-button-outline cleardata-btn",onClick:()=>n(!0)},"Clear data"))},P=()=>{var[t,n]=(0,e.useState)(!1),[r,o]=(0,e.useState)({});return(0,e.useEffect)((()=>{_().get("https://api.github.com/repos/Drayneur/cryptoip/releases").then((e=>{"1.8"!=e.data[0].tag_name&&alert("New version: "+e.data[0].tag_name+" with name: "+e.data[0].name)}))}),[]),e.createElement("div",{className:"page"},e.createElement(i,null),electron.configApi.isRegister()?e.createElement(e.Fragment,null,t?e.createElement(E,{userInfos:r,handleData:o}):e.createElement(l,{handleLogged:n,handleData:o})):e.createElement(s,null),e.createElement(N,null))};t.render(e.createElement(P,null),document.getElementById("root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,