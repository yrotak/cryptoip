/*! For license information please see app.js.LICENSE.txt */
(()=>{var e={63:(e,t)=>{function n(e){if(e)return function(e){for(var t in n.prototype)e[t]=n.prototype[t];return e}(e)}t.Q=n,n.prototype.on=n.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},n.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},n.prototype.off=n.prototype.removeListener=n.prototype.removeAllListeners=n.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var o=0;o<r.length;o++)if((n=r[o])===t||n.fn===t){r.splice(o,1);break}return 0===r.length&&delete this._callbacks["$"+e],this},n.prototype.emit=function(e){this._callbacks=this._callbacks||{};for(var t=new Array(arguments.length-1),n=this._callbacks["$"+e],r=1;r<arguments.length;r++)t[r-1]=arguments[r];if(n){r=0;for(var o=(n=n.slice(0)).length;r<o;++r)n[r].apply(this,t)}return this},n.prototype.emitReserved=n.prototype.emit,n.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},n.prototype.hasListeners=function(e){return!!this.listeners(e).length}},669:(e,t,n)=>{e.exports=n(609)},592:(e,t,n)=>{"use strict";var r=n(867),o=n(26),a=n(372),i=n(327),s=n(97),l=n(109),u=n(985),c=n(916);e.exports=function(e){return new Promise((function(t,n){var d=e.data,f=e.headers,p=e.responseType;r.isFormData(d)&&delete f["Content-Type"];var h=new XMLHttpRequest;if(e.auth){var m=e.auth.username||"",A=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";f.Authorization="Basic "+btoa(m+":"+A)}var g=s(e.baseURL,e.url);function y(){if(h){var r="getAllResponseHeaders"in h?l(h.getAllResponseHeaders()):null,a={data:p&&"text"!==p&&"json"!==p?h.response:h.responseText,status:h.status,statusText:h.statusText,headers:r,config:e,request:h};o(t,n,a),h=null}}if(h.open(e.method.toUpperCase(),i(g,e.params,e.paramsSerializer),!0),h.timeout=e.timeout,"onloadend"in h?h.onloadend=y:h.onreadystatechange=function(){h&&4===h.readyState&&(0!==h.status||h.responseURL&&0===h.responseURL.indexOf("file:"))&&setTimeout(y)},h.onabort=function(){h&&(n(c("Request aborted",e,"ECONNABORTED",h)),h=null)},h.onerror=function(){n(c("Network Error",e,null,h)),h=null},h.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(c(t,e,e.transitional&&e.transitional.clarifyTimeoutError?"ETIMEDOUT":"ECONNABORTED",h)),h=null},r.isStandardBrowserEnv()){var b=(e.withCredentials||u(g))&&e.xsrfCookieName?a.read(e.xsrfCookieName):void 0;b&&(f[e.xsrfHeaderName]=b)}"setRequestHeader"in h&&r.forEach(f,(function(e,t){void 0===d&&"content-type"===t.toLowerCase()?delete f[t]:h.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(h.withCredentials=!!e.withCredentials),p&&"json"!==p&&(h.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&h.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&h.upload&&h.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){h&&(h.abort(),n(e),h=null)})),d||(d=null),h.send(d)}))}},609:(e,t,n)=>{"use strict";var r=n(867),o=n(849),a=n(321),i=n(185);function s(e){var t=new a(e),n=o(a.prototype.request,t);return r.extend(n,a.prototype,t),r.extend(n,t),n}var l=s(n(655));l.Axios=a,l.create=function(e){return s(i(l.defaults,e))},l.Cancel=n(263),l.CancelToken=n(972),l.isCancel=n(502),l.all=function(e){return Promise.all(e)},l.spread=n(713),l.isAxiosError=n(268),e.exports=l,e.exports.default=l},263:e=>{"use strict";function t(e){this.message=e}t.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},t.prototype.__CANCEL__=!0,e.exports=t},972:(e,t,n)=>{"use strict";var r=n(263);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,n)=>{"use strict";var r=n(867),o=n(327),a=n(782),i=n(572),s=n(185),l=n(875),u=l.validators;function c(e){this.defaults=e,this.interceptors={request:new a,response:new a}}c.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=s(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=e.transitional;void 0!==t&&l.assertOptions(t,{silentJSONParsing:u.transitional(u.boolean,"1.0.0"),forcedJSONParsing:u.transitional(u.boolean,"1.0.0"),clarifyTimeoutError:u.transitional(u.boolean,"1.0.0")},!1);var n=[],r=!0;this.interceptors.request.forEach((function(t){"function"==typeof t.runWhen&&!1===t.runWhen(e)||(r=r&&t.synchronous,n.unshift(t.fulfilled,t.rejected))}));var o,a=[];if(this.interceptors.response.forEach((function(e){a.push(e.fulfilled,e.rejected)})),!r){var c=[i,void 0];for(Array.prototype.unshift.apply(c,n),c=c.concat(a),o=Promise.resolve(e);c.length;)o=o.then(c.shift(),c.shift());return o}for(var d=e;n.length;){var f=n.shift(),p=n.shift();try{d=f(d)}catch(e){p(e);break}}try{o=i(d)}catch(e){return Promise.reject(e)}for(;a.length;)o=o.then(a.shift(),a.shift());return o},c.prototype.getUri=function(e){return e=s(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){c.prototype[e]=function(t,n){return this.request(s(n||{},{method:e,url:t,data:(n||{}).data}))}})),r.forEach(["post","put","patch"],(function(e){c.prototype[e]=function(t,n,r){return this.request(s(r||{},{method:e,url:t,data:n}))}})),e.exports=c},782:(e,t,n)=>{"use strict";var r=n(867);function o(){this.handlers=[]}o.prototype.use=function(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},97:(e,t,n)=>{"use strict";var r=n(793),o=n(303);e.exports=function(e,t){return e&&!r(t)?o(e,t):t}},916:(e,t,n)=>{"use strict";var r=n(481);e.exports=function(e,t,n,o,a){var i=new Error(e);return r(i,t,n,o,a)}},572:(e,t,n)=>{"use strict";var r=n(867),o=n(527),a=n(502),i=n(655);function s(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return s(e),e.headers=e.headers||{},e.data=o.call(e,e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||i.adapter)(e).then((function(t){return s(e),t.data=o.call(e,t.data,t.headers,e.transformResponse),t}),(function(t){return a(t)||(s(e),t&&t.response&&(t.response.data=o.call(e,t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},481:e=>{"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},185:(e,t,n)=>{"use strict";var r=n(867);e.exports=function(e,t){t=t||{};var n={},o=["url","method","data"],a=["headers","auth","proxy","params"],i=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],s=["validateStatus"];function l(e,t){return r.isPlainObject(e)&&r.isPlainObject(t)?r.merge(e,t):r.isPlainObject(t)?r.merge({},t):r.isArray(t)?t.slice():t}function u(o){r.isUndefined(t[o])?r.isUndefined(e[o])||(n[o]=l(void 0,e[o])):n[o]=l(e[o],t[o])}r.forEach(o,(function(e){r.isUndefined(t[e])||(n[e]=l(void 0,t[e]))})),r.forEach(a,u),r.forEach(i,(function(o){r.isUndefined(t[o])?r.isUndefined(e[o])||(n[o]=l(void 0,e[o])):n[o]=l(void 0,t[o])})),r.forEach(s,(function(r){r in t?n[r]=l(e[r],t[r]):r in e&&(n[r]=l(void 0,e[r]))}));var c=o.concat(a).concat(i).concat(s),d=Object.keys(e).concat(Object.keys(t)).filter((function(e){return-1===c.indexOf(e)}));return r.forEach(d,u),n}},26:(e,t,n)=>{"use strict";var r=n(916);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},527:(e,t,n)=>{"use strict";var r=n(867),o=n(655);e.exports=function(e,t,n){var a=this||o;return r.forEach(n,(function(n){e=n.call(a,e,t)})),e}},655:(e,t,n)=>{"use strict";var r=n(867),o=n(16),a=n(481),i={"Content-Type":"application/x-www-form-urlencoded"};function s(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var l,u={transitional:{silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(l=n(592)),l),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(s(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)||t&&"application/json"===t["Content-Type"]?(s(t,"application/json"),function(e,t,n){if(r.isString(e))try{return(0,JSON.parse)(e),r.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var t=this.transitional,n=t&&t.silentJSONParsing,o=t&&t.forcedJSONParsing,i=!n&&"json"===this.responseType;if(i||o&&r.isString(e)&&e.length)try{return JSON.parse(e)}catch(e){if(i){if("SyntaxError"===e.name)throw a(e,this,"E_JSON_PARSE");throw e}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],(function(e){u.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){u.headers[e]=r.merge(i)})),e.exports=u},849:e=>{"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},327:(e,t,n)=>{"use strict";var r=n(867);function o(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var a;if(n)a=n(t);else if(r.isURLSearchParams(t))a=t.toString();else{var i=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),i.push(o(t)+"="+o(e))})))})),a=i.join("&")}if(a){var s=e.indexOf("#");-1!==s&&(e=e.slice(0,s)),e+=(-1===e.indexOf("?")?"?":"&")+a}return e}},303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},372:(e,t,n)=>{"use strict";var r=n(867);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,a,i){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(o)&&s.push("path="+o),r.isString(a)&&s.push("domain="+a),!0===i&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},268:e=>{"use strict";e.exports=function(e){return"object"==typeof e&&!0===e.isAxiosError}},985:(e,t,n)=>{"use strict";var r=n(867);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},16:(e,t,n)=>{"use strict";var r=n(867);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},109:(e,t,n)=>{"use strict";var r=n(867),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,a,i={};return e?(r.forEach(e.split("\n"),(function(e){if(a=e.indexOf(":"),t=r.trim(e.substr(0,a)).toLowerCase(),n=r.trim(e.substr(a+1)),t){if(i[t]&&o.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([n]):i[t]?i[t]+", "+n:n}})),i):i}},713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},875:(e,t,n)=>{"use strict";var r=n(593),o={};["object","boolean","number","function","string","symbol"].forEach((function(e,t){o[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));var a={},i=r.version.split(".");function s(e,t){for(var n=t?t.split("."):i,r=e.split("."),o=0;o<3;o++){if(n[o]>r[o])return!0;if(n[o]<r[o])return!1}return!1}o.transitional=function(e,t,n){var o=t&&s(t);function i(e,t){return"[Axios v"+r.version+"] Transitional option '"+e+"'"+t+(n?". "+n:"")}return function(n,r,s){if(!1===e)throw new Error(i(r," has been removed in "+t));return o&&!a[r]&&(a[r]=!0,console.warn(i(r," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,r,s)}},e.exports={isOlderVersion:s,assertOptions:function(e,t,n){if("object"!=typeof e)throw new TypeError("options must be an object");for(var r=Object.keys(e),o=r.length;o-- >0;){var a=r[o],i=t[a];if(i){var s=e[a],l=void 0===s||i(s,a,e);if(!0!==l)throw new TypeError("option "+a+" must be "+l)}else if(!0!==n)throw Error("Unknown option "+a)}},validators:o}},867:(e,t,n)=>{"use strict";var r=n(849),o=Object.prototype.toString;function a(e){return"[object Array]"===o.call(e)}function i(e){return void 0===e}function s(e){return null!==e&&"object"==typeof e}function l(e){if("[object Object]"!==o.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function u(e){return"[object Function]"===o.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),a(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:function(e){return null!==e&&!i(e)&&null!==e.constructor&&!i(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isPlainObject:l,isUndefined:i,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:u,isStream:function(e){return s(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:c,merge:function e(){var t={};function n(n,r){l(t[r])&&l(n)?t[r]=e(t[r],n):l(n)?t[r]=e({},n):a(n)?t[r]=n.slice():t[r]=n}for(var r=0,o=arguments.length;r<o;r++)c(arguments[r],n);return t},extend:function(e,t,n){return c(t,(function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},10:e=>{function t(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}e.exports=t,t.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),n=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-n:e+n}return 0|Math.min(e,this.max)},t.prototype.reset=function(){this.attempts=0},t.prototype.setMin=function(e){this.ms=e},t.prototype.setMax=function(e){this.max=e},t.prototype.setJitter=function(e){this.jitter=e}},61:(e,t,n)=>{"use strict";n.d(t,{Z:()=>s});var r=n(15),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,'.register{color:#eef}.register .form{top:35%;width:310px}.register .form textarea{resize:none}.register .form .hidden{display:none}.register .form .error{color:#931621;word-break:break-all}.login{color:#eef}.login .form{top:35%;width:310px}.login .form .hidden{display:none}.login .form .error{color:#931621;word-break:break-all}.connectToServer .show{display:block}.connectToServer .hidden{display:hidden}.connectToServer .server{display:block;color:#eef;cursor:pointer;opacity:.8;transition:.2s opacity}.connectToServer .server:hover{transition:.2s opacity;opacity:1}.server .dragging{display:flex;position:absolute;top:0;bottom:0;right:0;left:0;justify-content:center;align-items:center;align-content:center;background-color:#1313137c}.server .dragging .middle{background-color:#232323;border-radius:5px;border:1px solid #333;padding:15px;color:#eef;text-align:center}.server .dragging .middle .icon{font-size:36px;animation:pulse 2s linear infinite;margin-bottom:15px}.server .uploading{position:absolute;right:15px;bottom:15px;padding:15px;padding-top:25px;padding-bottom:25px;border-radius:5px;border:1px solid #1d1d1d;background:#131313;display:flex;justify-content:center;align-content:center;align-items:center}.server .uploading .progressbar{background:#232323;border-radius:4px;width:200px;height:20px;position:relative}.server .uploading .progressbar .progress{background:#931621;height:100%;border-radius:4px;position:absolute;left:0;top:0;bottom:0}.server .uploading .progressbar .progress .text{font-size:12px;color:#eef;position:absolute;top:0;left:0;bottom:0}.server .screenshare{position:absolute;top:50%;left:50%;width:90%;height:90%;transform:translate(-50%, -50%);border-radius:4px;background:#0f0f0f;z-index:99;border:1px solid #1d1d1d}.server .screenshare .vid{position:absolute;width:100%;height:100%;top:0;left:0;right:0;bottom:0;border-radius:4px}.server .screenshare .closebtn{position:absolute;top:15px;right:15px;background:#000;color:#eef;border-radius:4px;font-size:36px;border:none;width:45px;height:45px;cursor:pointer;z-index:9999}.server .screenshare .closebtn:focus{outline:none}.server .dragdrophandler{position:absolute;top:0;bottom:0;right:0;left:0;z-index:9999;pointer-events:none}.server .title{color:#eef}.server .button-call,.server .call-btn,.server .call-buttons{display:inline;float:right;margin-right:5px}.server .callPanel{background:#131313;width:15%;height:80vh;margin-right:10px;align-self:center;border-radius:4px;padding:10px}@media only screen and (min-width: 992px)and (max-width: 1200px){.server .callPanel{width:20%}}@media only screen and (max-height: 900px){.server .callPanel{height:70vh}}.server .callPanel .call-list{margin-top:5px}.server .channel{padding:15px;margin-top:20px;width:85%;align-self:center}@media only screen and (min-width: 992px)and (max-width: 1200px){.server .channel{width:80%}}.server .channel-button:disabled,.server .channel-button[disabled]{background:#232323;cursor:not-allowed;box-shadow:none}.server .channel-button{display:flex;justify-content:space-between;cursor:pointer;padding-top:5px;padding-bottom:5px;padding-right:10px;padding-left:10px;width:130px;color:#eef;text-decoration:none;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transition:.2s;position:relative}.server .notif{position:absolute;background:#931621;border-radius:50%;right:5px;width:16px;height:16px;top:50%;transform:translateY(-50%);font-size:12px;z-index:4;text-align:center}.server .channel-button:hover{-webkit-box-shadow:2px 0px 0px 0px #931621;-moz-box-shadow:2px 0px 0px 0px #931621;box-shadow:2px 0px 0px 0px #931621;transition:.2s}.server .user-call{display:block;cursor:pointer;user-select:none;width:130px;color:#eef;text-decoration:none;white-space:nowrap;text-overflow:ellipsis;overflow:hidden;transition:.2s}.server .users{background:#131313;height:100vh;width:150px;padding-top:5px}.server .messages{padding:10px;position:relative;height:80vh;scroll-behavior:smooth;background:#131313;border-radius:4px 4px 0px 0px;overflow-y:auto}@media only screen and (max-height: 900px){.server .messages{height:70vh}}.server .disconnect-button{float:right;display:inline}.server .host-title{display:inline}.server .server-info{background:#131313;margin-top:25px;padding:20px;z-index:2;height:50px;border-bottom:#333 solid 1px}.server .motd{position:absolute;-moz-transform:translateX(100%);-webkit-transform:translateX(100%);transform:translateX(100%);-moz-animation:scroll-left 15s linear infinite;-webkit-animation:scroll-left 15s linear infinite;animation:scroll-left 15s linear infinite;user-select:none}.server .incall{width:85%}.server .message-send{text-align:left;box-sizing:border-box;width:100%;border-radius:0px 0px 4px 4px}.server .incall-input{width:76%}.server .panel{display:flex;position:absolute;bottom:0;left:150px;top:100px;right:0}.server .message-holder{list-style-type:none;display:flex;margin:5px}.server .message-holder .message{background:#1d1d1d;border-radius:4px;box-sizing:border-box;padding:5px;width:400px}.server .message-holder .message.mine{background:linear-gradient(to bottom left, #6e1018, #931621)}.server .message-holder .message .message-content{display:inline;color:#ccc}.server .message-holder .message .message-content .text-normal{margin-left:5px;overflow-wrap:break-word;text-align:justify;display:inline}.server .message-file{list-style-type:none;margin:5px}.server .message-file .file{background-color:#1d1d1d;padding:15px;border-radius:4px;display:flex;font-size:16px;justify-content:space-between;width:400px}.server .message-file .file .title{text-decoration:none;white-space:nowrap;text-overflow:ellipsis;overflow:hidden}.server .message-file .file .icon{color:#ccc;cursor:pointer}.server .message-file .img{max-width:350px;max-height:250px}.server .hidden{display:none}.server .show{display:initial}@-moz-keyframes scroll-left{0%{-moz-transform:translateX(-100%)}100%{-moz-transform:translateX(100vw)}}@-webkit-keyframes scroll-left{0%{-webkit-transform:translateX(-100%)}100%{-webkit-transform:translateX(100vw)}}@keyframes scroll-left{0%{-moz-transform:translateX(-100%);-webkit-transform:translateX(-100%);transform:translateX(-100%)}100%{-moz-transform:translateX(100vw);-webkit-transform:translateX(100vw);transform:translateX(100vw)}}@keyframes pulse{0%{opacity:.2}50%{opacity:1}100%{opacity:.2}}.clear-data .confirm{position:absolute;transform:translate(-50%, -50%);width:250px;height:125px;background:#131313;border-radius:4px;border:2px solid #931621;left:50%;top:50%;z-index:9999;padding:15px}.clear-data .confirm .text-normal{color:#eef}.clear-data .confirm .text-normal .infotext{font-size:12px;font-style:italic}.clear-data .confirm .buttons{display:flex;justify-content:space-between;align-items:center;width:60%;margin:0 auto;margin-top:10px}.clear-data .cleardata-btn{position:absolute;background:transparent;left:5px;bottom:5px}.opened{position:absolute;top:0;bottom:0;right:0;left:0;background:rgba(13,13,13,.8)}.topBar{z-index:9999;user-select:none;padding:5px;position:absolute;top:0;right:0;left:0;height:25px;background:#000;color:#eef;-webkit-app-region:drag;display:flex}.topBar .btns{margin-left:auto}.topBar .btns .btn{-webkit-app-region:no-drag;padding:10px;padding-left:10px;padding-right:10px;transition:.2s background;cursor:pointer}.topBar .btns .btn:hover{transition:.2s background;background:#232323}html,body{overflow:hidden;height:100%}.page{background:#232323;position:absolute;top:0;bottom:0;right:0;left:0}*{padding:0;margin:0;font-family:"Consolas",sans-serif}.form{background:#131313;width:fit-content;padding:15px;border-radius:4px;position:absolute;transform:translate(-50%);top:40%;left:50%}.input{background:#333;border:none;min-width:300px;display:block;padding:5px;color:#eef}.input:focus{outline:none}.form-button-outline{background:transparent;color:#eef;padding-top:5px;padding-bottom:5px;padding-right:10px;padding-left:10px;border:1px solid #931621;border-radius:2px;margin-top:2px;margin-bottom:2px;transition:.2s;cursor:pointer}.form-button-outline:hover{background:#931621;transition:.2s}.form-button-outline:focus{outline:none}.form-label{color:#eef}.form-button{background:#931621;color:#eef;padding-top:5px;padding-bottom:5px;padding-right:10px;padding-left:10px;border:1px solid #931621;border-radius:2px;margin-top:2px;margin-bottom:2px;transition:.2s;cursor:pointer}.form-button:hover{background:#6e1018;transition:.2s}.form-button:focus{outline:none}::-webkit-scrollbar{width:10px}::-webkit-scrollbar-track{background:#131313}::-webkit-scrollbar-thumb{background:#232323}::-webkit-scrollbar-thumb:hover{background:#333}',"",{version:3,sources:["webpack://./src/styles/Register.scss","webpack://./src/styles/Login.scss","webpack://./src/styles/ConnectToServer.scss","webpack://./src/styles/Server.scss","webpack://./src/styles/ClearData.scss","webpack://./src/styles/TopBar.scss","webpack://./src/styles/index.scss"],names:[],mappings:"AAAA,UACI,UAAA,CACA,gBACI,OAAA,CACA,WAAA,CACA,yBACI,WAAA,CAEJ,wBACI,YAAA,CAEJ,uBACI,aAAA,CACA,oBAAA,CCbZ,OACI,UAAA,CACA,aACI,OAAA,CACA,WAAA,CACA,qBACI,YAAA,CAEJ,oBACI,aAAA,CACA,oBAAA,CCTR,uBACI,aAAA,CAEJ,yBACI,cAAA,CAEJ,yBACI,aAAA,CACA,UAAA,CACA,cAAA,CACA,UAAA,CACA,sBAAA,CACA,+BACI,sBAAA,CACA,SAAA,CCdR,kBACI,YAAA,CACA,iBAAA,CACA,KAAA,CACA,QAAA,CACA,OAAA,CACA,MAAA,CACA,sBAAA,CACA,kBAAA,CACA,oBAAA,CACA,0BAAA,CACA,0BACI,wBAAA,CACA,iBAAA,CACA,qBAAA,CACA,YAAA,CACA,UAAA,CACA,iBAAA,CACA,gCACI,cAAA,CACA,kCAAA,CACA,kBAAA,CAIZ,mBACI,iBAAA,CACA,UAAA,CACA,WAAA,CACA,YAAA,CACA,gBAAA,CACA,mBAAA,CACA,iBAAA,CACA,wBAAA,CACA,kBAAA,CACA,YAAA,CACA,sBAAA,CACA,oBAAA,CACA,kBAAA,CACA,gCACI,kBAAA,CACA,iBAAA,CACA,WAAA,CACA,WAAA,CACA,iBAAA,CACA,0CACI,kBAAA,CACA,WAAA,CACA,iBAAA,CACA,iBAAA,CACA,MAAA,CACA,KAAA,CACA,QAAA,CACA,gDACI,cAAA,CACA,UAAA,CACA,iBAAA,CACA,KAAA,CACA,MAAA,CACA,QAAA,CAKhB,qBACI,iBAAA,CACA,OAAA,CACA,QAAA,CACA,SAAA,CACA,UAAA,CACA,+BAAA,CACA,iBAAA,CACA,kBAAA,CAEA,UAAA,CACA,wBAAA,CACA,0BACI,iBAAA,CACA,UAAA,CACA,WAAA,CACA,KAAA,CACA,MAAA,CACA,OAAA,CACA,QAAA,CACA,iBAAA,CAEJ,+BACI,iBAAA,CACA,QAAA,CACA,UAAA,CACA,eAAA,CACA,UAAA,CACA,iBAAA,CACA,cAAA,CACA,WAAA,CACA,UAAA,CACA,WAAA,CACA,cAAA,CACA,YAAA,CACA,qCACI,YAAA,CAIZ,yBACI,iBAAA,CACA,KAAA,CACA,QAAA,CACA,OAAA,CACA,MAAA,CACA,YAAA,CACA,mBAAA,CAEJ,eACI,UAAA,CAEJ,6DAGI,cAAA,CACA,WAAA,CACA,gBAAA,CAEJ,mBACI,kBAAA,CACA,SAAA,CACA,WAAA,CAOA,iBAAA,CACA,iBAAA,CACA,iBAAA,CACA,YAAA,CATA,iEAJJ,mBAKQ,SAAA,CAAA,CAEJ,2CAPJ,mBAQQ,WAAA,CAAA,CAMJ,8BACI,cAAA,CAGR,iBACI,YAAA,CACA,eAAA,CACA,SAAA,CAIA,iBAAA,CAHA,iEAJJ,iBAKQ,SAAA,CAAA,CAKR,mEAEI,kBAAA,CACA,kBAAA,CACA,eAAA,CAEJ,wBACI,YAAA,CACA,6BAAA,CACA,cAAA,CACA,eAAA,CACA,kBAAA,CACA,kBAAA,CACA,iBAAA,CACA,WAAA,CACA,UAAA,CACA,oBAAA,CACA,kBAAA,CACA,sBAAA,CACA,eAAA,CACA,cAAA,CACA,iBAAA,CAEJ,eACI,iBAAA,CACA,kBAAA,CACA,iBAAA,CACA,SAAA,CACA,UAAA,CACA,WAAA,CACA,OAAA,CACA,0BAAA,CACA,cAAA,CACA,SAAA,CACA,iBAAA,CAEJ,8BACI,0CAAA,CACA,uCAAA,CACA,kCAAA,CACA,cAAA,CAEJ,mBACI,aAAA,CACA,cAAA,CACA,gBAAA,CACA,WAAA,CACA,UAAA,CACA,oBAAA,CACA,kBAAA,CACA,sBAAA,CACA,eAAA,CACA,cAAA,CAEJ,eACI,kBAAA,CACA,YAAA,CACA,WAAA,CACA,eAAA,CAGJ,kBACI,YAAA,CACA,iBAAA,CACA,WAAA,CAIA,sBAAA,CACA,kBAAA,CACA,6BAAA,CACA,eAAA,CANA,2CAJJ,kBAKQ,WAAA,CAAA,CAOR,2BACI,WAAA,CACA,cAAA,CAEJ,oBACI,cAAA,CAEJ,qBACI,kBAAA,CACA,eAAA,CACA,YAAA,CACA,SAAA,CACA,WAAA,CACA,4BAAA,CAGJ,cACI,iBAAA,CACA,+BAAA,CACA,kCAAA,CACA,0BAAA,CACA,8CAAA,CACA,iDAAA,CACA,yCAAA,CACA,gBAAA,CAEJ,gBACI,SAAA,CAEJ,sBACI,eAAA,CACA,qBAAA,CACA,UAAA,CACA,6BAAA,CAEJ,sBACI,SAAA,CAEJ,eACI,YAAA,CACA,iBAAA,CACA,QAAA,CACA,UAAA,CACA,SAAA,CACA,OAAA,CAEJ,wBACI,oBAAA,CACA,YAAA,CACA,UAAA,CAEA,iCACI,kBAAA,CACA,iBAAA,CACA,qBAAA,CACA,WAAA,CACA,WAAA,CACA,sCACI,4DAAA,CAEJ,kDACI,cAAA,CACA,UAAA,CAGJ,+DACI,eAAA,CACA,wBAAA,CACA,kBAAA,CACA,cAAA,CAIZ,sBACI,oBAAA,CACA,UAAA,CAEA,4BACI,wBAAA,CACA,YAAA,CACA,iBAAA,CACA,YAAA,CACA,cAAA,CACA,6BAAA,CACA,WAAA,CACA,mCACI,oBAAA,CACA,kBAAA,CACA,sBAAA,CACA,eAAA,CAEJ,kCACI,UAAA,CACA,cAAA,CAGR,2BACI,eAAA,CACA,gBAAA,CAGR,gBACI,YAAA,CAEJ,cACI,eAAA,CAIR,4BACI,GACI,gCAAA,CAEJ,KACI,gCAAA,CAAA,CAIR,+BACI,GACI,mCAAA,CAEJ,KACI,mCAAA,CAAA,CAIR,uBACI,GACI,gCAAA,CACA,mCAAA,CACA,2BAAA,CAEJ,KACI,gCAAA,CACA,mCAAA,CACA,2BAAA,CAAA,CAIR,iBACI,GACI,UAAA,CAEJ,IACI,SAAA,CAEJ,KACI,UAAA,CAAA,CCpXJ,qBACI,iBAAA,CACA,+BAAA,CACA,WAAA,CACA,YAAA,CACA,kBAAA,CACA,iBAAA,CACA,wBAAA,CACA,QAAA,CACA,OAAA,CACA,YAAA,CACA,YAAA,CACA,kCACI,UAAA,CACA,4CACI,cAAA,CACA,iBAAA,CAGR,8BACI,YAAA,CACA,6BAAA,CACA,kBAAA,CACA,SAAA,CACA,aAAA,CACA,eAAA,CAGR,2BACI,iBAAA,CACA,sBAAA,CACA,QAAA,CACA,UAAA,CAGR,QACI,iBAAA,CACA,KAAA,CACA,QAAA,CACA,OAAA,CACA,MAAA,CACA,4BAAA,CC1CJ,QACI,YAAA,CACA,gBAAA,CACA,WAAA,CACA,iBAAA,CACA,KAAA,CACA,OAAA,CACA,MAAA,CACA,WAAA,CACA,eAAA,CACA,UAAA,CACA,uBAAA,CACA,YAAA,CACA,cACI,gBAAA,CACA,mBACI,0BAAA,CACA,YAAA,CACA,iBAAA,CACA,kBAAA,CACA,yBAAA,CACA,cAAA,CACA,yBACI,yBAAA,CACA,kBAAA,CClBhB,UACI,eAAA,CACA,WAAA,CAEJ,MACI,kBAAA,CACA,iBAAA,CACA,KAAA,CACA,QAAA,CACA,OAAA,CACA,MAAA,CAEJ,EACI,SAAA,CACA,QAAA,CACA,iCAAA,CAEJ,MACI,kBAAA,CACA,iBAAA,CACA,YAAA,CACA,iBAAA,CACA,iBAAA,CACA,yBAAA,CACA,OAAA,CACA,QAAA,CAEJ,OACI,eAAA,CACA,WAAA,CACA,eAAA,CACA,aAAA,CACA,WAAA,CACA,UAAA,CACA,aACI,YAAA,CAGR,qBACI,sBAAA,CACA,UAAA,CACA,eAAA,CACA,kBAAA,CACA,kBAAA,CACA,iBAAA,CACA,wBAAA,CACA,iBAAA,CACA,cAAA,CACA,iBAAA,CACA,cAAA,CACA,cAAA,CACA,2BACI,kBAAA,CACA,cAAA,CAGJ,2BACI,YAAA,CAGR,YACI,UAAA,CAEJ,aACI,kBAAA,CACA,UAAA,CACA,eAAA,CACA,kBAAA,CACA,kBAAA,CACA,iBAAA,CACA,wBAAA,CACA,iBAAA,CACA,cAAA,CACA,iBAAA,CACA,cAAA,CACA,cAAA,CACA,mBACI,kBAAA,CACA,cAAA,CAEJ,mBACI,YAAA,CAGR,oBACI,UAAA,CAGJ,0BACI,kBAAA,CAGJ,0BACI,kBAAA,CAGJ,gCACI,eAAA",sourcesContent:[".register {\r\n    color: #eeeeff;\r\n    .form {\r\n        top: 35%;\r\n        width: 310px;\r\n        textarea {\r\n            resize: none;\r\n        }\r\n        .hidden {\r\n            display: none;\r\n        }\r\n        .error {\r\n            color: #931621;\r\n            word-break: break-all;\r\n        }\r\n    }\r\n}",".login {\r\n    color: #eeeeff;\r\n    .form {\r\n        top: 35%;\r\n        width: 310px;\r\n        .hidden {\r\n            display: none;\r\n        }\r\n        .error {\r\n            color: #931621;\r\n            word-break: break-all;\r\n        }\r\n    }\r\n}",".connectToServer {\r\n    .show {\r\n        display: block;\r\n    }\r\n    .hidden {\r\n        display: hidden;\r\n    }\r\n    .server {\r\n        display: block;\r\n        color: #eeeeff;\r\n        cursor: pointer;\r\n        opacity: 0.8;\r\n        transition: 0.2s opacity;\r\n        &:hover {\r\n            transition: 0.2s opacity;\r\n            opacity: 1.0;\r\n        }\r\n    }\r\n} ",".server {\r\n    .dragging {\r\n        display: flex;\r\n        position: absolute;\r\n        top: 0;\r\n        bottom: 0;\r\n        right: 0;\r\n        left: 0;\r\n        justify-content: center;\r\n        align-items: center;\r\n        align-content: center;\r\n        background-color: #1313137c;\r\n        .middle {\r\n            background-color: #232323;\r\n            border-radius: 5px;\r\n            border: 1px solid #333333;\r\n            padding: 15px;\r\n            color: #eeeeff;\r\n            text-align: center;\r\n            .icon {\r\n                font-size: 36px;\r\n                animation: pulse 2s linear infinite;\r\n                margin-bottom: 15px;\r\n            }\r\n        }\r\n    }\r\n    .uploading {\r\n        position: absolute;\r\n        right: 15px;\r\n        bottom: 15px;\r\n        padding: 15px;\r\n        padding-top: 25px;\r\n        padding-bottom: 25px;\r\n        border-radius: 5px;\r\n        border: 1px solid #1d1d1d;\r\n        background: #131313;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-content: center;\r\n        align-items: center;\r\n        .progressbar {\r\n            background: #232323;\r\n            border-radius: 4px;\r\n            width: 200px;\r\n            height: 20px;\r\n            position: relative;\r\n            .progress {\r\n                background: #931621;\r\n                height: 100%;\r\n                border-radius: 4px;\r\n                position: absolute;\r\n                left: 0;\r\n                top: 0;\r\n                bottom: 0;\r\n                .text {\r\n                    font-size: 12px;\r\n                    color: #eeeeff;\r\n                    position: absolute;\r\n                    top: 0;\r\n                    left: 0;\r\n                    bottom: 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    .screenshare {\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 50%;\r\n        width: 90%;\r\n        height: 90%;\r\n        transform: translate(-50%, -50%);\r\n        border-radius: 4px;\r\n        background: #0f0f0f;\r\n\r\n        z-index: 99;\r\n        border: 1px solid #1d1d1d;\r\n        .vid {\r\n            position: absolute;\r\n            width: 100%;\r\n            height: 100%;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            bottom: 0;\r\n            border-radius: 4px;\r\n        }\r\n        .closebtn {\r\n            position: absolute;\r\n            top: 15px;\r\n            right: 15px;\r\n            background: #000;\r\n            color: #eeeeff;\r\n            border-radius: 4px;\r\n            font-size: 36px;\r\n            border: none;\r\n            width: 45px;\r\n            height: 45px;\r\n            cursor: pointer;\r\n            z-index: 9999;\r\n            &:focus {\r\n                outline: none;\r\n            }\r\n        }\r\n    }\r\n    .dragdrophandler {\r\n        position: absolute;\r\n        top: 0;\r\n        bottom: 0;\r\n        right: 0;\r\n        left: 0;\r\n        z-index: 9999;\r\n        pointer-events: none;\r\n    }\r\n    .title {\r\n        color: #eeeeff;\r\n    }\r\n    .button-call,\r\n    .call-btn,\r\n    .call-buttons {\r\n        display: inline;\r\n        float: right;\r\n        margin-right: 5px;\r\n    }\r\n    .callPanel {\r\n        background: #131313;\r\n        width: 15%;\r\n        height: 80vh;\r\n        @media only screen and (min-width: 992px) and (max-width: 1200px) {\r\n            width: 20%;\r\n        }\r\n        @media only screen and (max-height: 900px) {\r\n            height: 70vh;\r\n        }\r\n        margin-right: 10px;\r\n        align-self: center;\r\n        border-radius: 4px;\r\n        padding: 10px;\r\n        .call-list {\r\n            margin-top: 5px;\r\n        }\r\n    }\r\n    .channel {\r\n        padding: 15px;\r\n        margin-top: 20px;\r\n        width: 85%;\r\n        @media only screen and (min-width: 992px) and (max-width: 1200px) {\r\n            width: 80%;\r\n        }\r\n        align-self: center;\r\n    }\r\n\r\n    .channel-button:disabled,\r\n    .channel-button[disabled] {\r\n        background: #232323;\r\n        cursor: not-allowed;\r\n        box-shadow: none;\r\n    }\r\n    .channel-button {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        cursor: pointer;\r\n        padding-top: 5px;\r\n        padding-bottom: 5px;\r\n        padding-right: 10px;\r\n        padding-left: 10px;\r\n        width: 130px;\r\n        color: #eeeeff;\r\n        text-decoration: none;\r\n        white-space: nowrap;\r\n        text-overflow: ellipsis;\r\n        overflow: hidden;\r\n        transition: 0.2s;\r\n        position: relative;\r\n    }\r\n    .notif {\r\n        position: absolute;\r\n        background: #931621;\r\n        border-radius: 50%;\r\n        right: 5px;\r\n        width: 16px;\r\n        height: 16px;\r\n        top: 50%;\r\n        transform: translateY(-50%);\r\n        font-size: 12px;\r\n        z-index: 4;\r\n        text-align: center;\r\n    }\r\n    .channel-button:hover {\r\n        -webkit-box-shadow: 2px 0px 0px 0px rgba(147, 22, 33, 1);\r\n        -moz-box-shadow: 2px 0px 0px 0px rgba(147, 22, 33, 1);\r\n        box-shadow: 2px 0px 0px 0px rgba(147, 22, 33, 1);\r\n        transition: 0.2s;\r\n    }\r\n    .user-call {\r\n        display: block;\r\n        cursor: pointer;\r\n        user-select: none;\r\n        width: 130px;\r\n        color: #eeeeff;\r\n        text-decoration: none;\r\n        white-space: nowrap;\r\n        text-overflow: ellipsis;\r\n        overflow: hidden;\r\n        transition: 0.2s;\r\n    }\r\n    .users {\r\n        background: #131313;\r\n        height: 100vh;\r\n        width: 150px;\r\n        padding-top: 5px;\r\n        /* box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px; */\r\n    }\r\n    .messages {\r\n        padding: 10px;\r\n        position: relative;\r\n        height: 80vh;\r\n        @media only screen and (max-height: 900px) {\r\n            height: 70vh;\r\n        }\r\n        scroll-behavior: smooth;\r\n        background: #131313;\r\n        border-radius: 4px 4px 0px 0px;\r\n        overflow-y: auto;\r\n    }\r\n    .disconnect-button {\r\n        float: right;\r\n        display: inline;\r\n    }\r\n    .host-title {\r\n        display: inline;\r\n    }\r\n    .server-info {\r\n        background: #131313;\r\n        margin-top: 25px;\r\n        padding: 20px;\r\n        z-index: 2;\r\n        height: 50px;\r\n        border-bottom: #333333 solid 1px;\r\n        /* box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px; */\r\n    }\r\n    .motd {\r\n        position: absolute;\r\n        -moz-transform: translateX(100%);\r\n        -webkit-transform: translateX(100%);\r\n        transform: translateX(100%);\r\n        -moz-animation: scroll-left 15s linear infinite;\r\n        -webkit-animation: scroll-left 15s linear infinite;\r\n        animation: scroll-left 15s linear infinite;\r\n        user-select: none;\r\n    }\r\n    .incall {\r\n        width: 85%;\r\n    }\r\n    .message-send {\r\n        text-align: left;\r\n        box-sizing: border-box;\r\n        width: 100%;\r\n        border-radius: 0px 0px 4px 4px;\r\n    }\r\n    .incall-input {\r\n        width: 76%;\r\n    }\r\n    .panel {\r\n        display: flex;\r\n        position: absolute;\r\n        bottom: 0;\r\n        left: 150px;\r\n        top: 100px;\r\n        right: 0;\r\n    }\r\n    .message-holder {\r\n        list-style-type: none;\r\n        display: flex;\r\n        margin: 5px;\r\n\r\n        .message {\r\n            background: #1d1d1d;\r\n            border-radius: 4px;\r\n            box-sizing: border-box;\r\n            padding: 5px;\r\n            width: 400px;\r\n            &.mine {\r\n                background: linear-gradient(to bottom left, #6e1018, #931621);\r\n            }\r\n            .message-content {\r\n                display: inline;\r\n                color: #ccc;\r\n            }\r\n\r\n            .message-content .text-normal {\r\n                margin-left: 5px;\r\n                overflow-wrap: break-word;\r\n                text-align: justify;\r\n                display: inline;\r\n            }\r\n        }\r\n    }\r\n    .message-file {\r\n        list-style-type: none;\r\n        margin: 5px;\r\n\r\n        .file {\r\n            background-color: #1d1d1d;\r\n            padding: 15px;\r\n            border-radius: 4px;\r\n            display: flex;\r\n            font-size: 16px;\r\n            justify-content: space-between;\r\n            width: 400px;\r\n            .title {\r\n                text-decoration: none;\r\n                white-space: nowrap;\r\n                text-overflow: ellipsis;\r\n                overflow: hidden;\r\n            }\r\n            .icon {\r\n                color: #ccc;\r\n                cursor: pointer;\r\n            }\r\n        }\r\n        .img {\r\n            max-width: 350px;\r\n            max-height: 250px;\r\n        }\r\n    }\r\n    .hidden {\r\n        display: none;\r\n    }\r\n    .show {\r\n        display: initial;\r\n    }\r\n}\r\n\r\n@-moz-keyframes scroll-left {\r\n    0% {\r\n        -moz-transform: translateX(-100%);\r\n    }\r\n    100% {\r\n        -moz-transform: translateX(100vw);\r\n    }\r\n}\r\n\r\n@-webkit-keyframes scroll-left {\r\n    0% {\r\n        -webkit-transform: translateX(-100%);\r\n    }\r\n    100% {\r\n        -webkit-transform: translateX(100vw);\r\n    }\r\n}\r\n\r\n@keyframes scroll-left {\r\n    0% {\r\n        -moz-transform: translateX(-100%);\r\n        -webkit-transform: translateX(-100%);\r\n        transform: translateX(-100%);\r\n    }\r\n    100% {\r\n        -moz-transform: translateX(100vw);\r\n        -webkit-transform: translateX(100vw);\r\n        transform: translateX(100vw);\r\n    }\r\n}\r\n\r\n@keyframes pulse {\r\n    0% {\r\n        opacity: 0.2;\r\n    }\r\n    50% {\r\n        opacity: 1;\r\n    }\r\n    100% {\r\n        opacity: 0.2;\r\n    }\r\n}\r\n",".clear-data {\r\n    .confirm {\r\n        position: absolute;\r\n        transform: translate(-50%, -50%);\r\n        width: 250px;\r\n        height: 125px;\r\n        background: #131313;\r\n        border-radius: 4px;\r\n        border: 2px solid #931621;\r\n        left: 50%;\r\n        top: 50%;\r\n        z-index: 9999;\r\n        padding: 15px;\r\n        .text-normal {\r\n            color: #eeeeff;\r\n            .infotext {\r\n                font-size: 12px;\r\n                font-style: italic;\r\n            }\r\n        }\r\n        .buttons {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            align-items: center;\r\n            width: 60%;\r\n            margin: 0 auto;\r\n            margin-top: 10px;\r\n        }\r\n    }\r\n    .cleardata-btn {\r\n        position: absolute;\r\n        background: transparent;\r\n        left: 5px;\r\n        bottom: 5px;\r\n    }\r\n}\r\n.opened {\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n    left: 0;\r\n    background: rgba(13, 13, 13, 0.8);\r\n}",".topBar {\r\n    z-index: 9999;\r\n    user-select: none;\r\n    padding: 5px;\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n    left: 0;\r\n    height: 25px;\r\n    background: #000;\r\n    color: #eeeeff;\r\n    -webkit-app-region: drag;\r\n    display: flex;\r\n    .btns {\r\n        margin-left: auto;\r\n        .btn {\r\n            -webkit-app-region: no-drag;\r\n            padding: 10px;\r\n            padding-left: 10px;\r\n            padding-right: 10px;\r\n            transition: 0.2s background;\r\n            cursor: pointer;\r\n            &:hover {\r\n                transition: 0.2s background;\r\n                background: #232323;\r\n            }\r\n        }\r\n    }\r\n}","@import './Register.scss';\r\n@import './Login.scss';\r\n@import './ConnectToServer.scss';\r\n@import './Server.scss';\r\n@import './ClearData.scss';\r\n@import './TopBar.scss';\r\nhtml,body {\r\n    overflow: hidden;\r\n    height: 100%;\r\n}\r\n.page {\r\n    background: #232323;\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    right: 0;\r\n    left: 0;\r\n}\r\n* {\r\n    padding: 0;\r\n    margin: 0;\r\n    font-family: 'Consolas', sans-serif;\r\n}\r\n.form {\r\n    background: #131313;\r\n    width: fit-content;\r\n    padding: 15px;\r\n    border-radius: 4px;\r\n    position: absolute;\r\n    transform: translate(-50%);\r\n    top: 40%;\r\n    left: 50%;\r\n}\r\n.input {\r\n    background: #333333;\r\n    border: none;\r\n    min-width: 300px;\r\n    display: block;\r\n    padding: 5px;\r\n    color: #eeeeff;\r\n    &:focus {\r\n        outline: none;\r\n    }\r\n}\r\n.form-button-outline {\r\n    background: transparent;\r\n    color: #eeeeff;\r\n    padding-top: 5px;\r\n    padding-bottom: 5px;\r\n    padding-right: 10px;\r\n    padding-left: 10px;\r\n    border: 1px solid #931621;\r\n    border-radius: 2px;\r\n    margin-top: 2px;\r\n    margin-bottom: 2px;\r\n    transition: 0.2s;\r\n    cursor: pointer;\r\n    &:hover {\r\n        background: #931621;\r\n        transition: 0.2s;\r\n    }\r\n\r\n    &:focus {\r\n        outline: none;\r\n    }\r\n}\r\n.form-label {\r\n    color: #eeeeff;\r\n}\r\n.form-button {\r\n    background: #931621;\r\n    color: #eeeeff;\r\n    padding-top: 5px;\r\n    padding-bottom: 5px;\r\n    padding-right: 10px;\r\n    padding-left: 10px;\r\n    border: 1px solid #931621;\r\n    border-radius: 2px;\r\n    margin-top: 2px;\r\n    margin-bottom: 2px;\r\n    transition: 0.2s;\r\n    cursor: pointer;\r\n    &:hover {\r\n        background: #6e1018;\r\n        transition: 0.2s;\r\n    }\r\n    &:focus {\r\n        outline: none;\r\n    }\r\n}\r\n::-webkit-scrollbar {\r\n    width: 10px;\r\n}\r\n\r\n::-webkit-scrollbar-track {\r\n    background: #131313;\r\n}\r\n\r\n::-webkit-scrollbar-thumb {\r\n    background: #232323;\r\n}\r\n\r\n::-webkit-scrollbar-thumb:hover {\r\n    background: #333333;\r\n}\r\n"],sourceRoot:""}]);const s=i},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var i=this[a][0];null!=i&&(o[i]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);r&&o[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),t.push(l))}},t}},15:e=>{"use strict";function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n,r,o=(r=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){var n=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=n){var r,o,a=[],i=!0,s=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){s=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(s)throw o}}return a}}(n,r)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=o[1],i=o[3];if(!i)return a;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),u="/*# ".concat(l," */"),c=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[a].concat(c).concat([u]).join("\n")}return[a].join("\n")}},227:(e,t,n)=>{t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let r=0,o=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(r++,"%c"===e&&(o=r))})),t.splice(o,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=n(447)(t);const{formatters:r}=e.exports;r.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},447:(e,t,n)=>{e.exports=function(e){function t(e){let n,o,a,i=null;function s(...e){if(!s.enabled)return;const r=s,o=Number(new Date),a=o-(n||o);r.diff=a,r.prev=n,r.curr=o,n=o,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let i=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((n,o)=>{if("%%"===n)return"%";i++;const a=t.formatters[o];if("function"==typeof a){const t=e[i];n=a.call(r,t),e.splice(i,1),i--}return n})),t.formatArgs.call(r,e),(r.log||t.log).apply(r,e)}return s.namespace=e,s.useColors=t.useColors(),s.color=t.selectColor(e),s.extend=r,s.destroy=t.destroy,Object.defineProperty(s,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==i?i:(o!==t.namespaces&&(o=t.namespaces,a=t.enabled(e)),a),set:e=>{i=e}}),"function"==typeof t.init&&t.init(s),s}function r(e,n){const r=t(this.namespace+(void 0===n?":":n)+e);return r.log=this.log,r}function o(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(o),...t.skips.map(o).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let n;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const r=("string"==typeof e?e:"").split(/[\s,]+/),o=r.length;for(n=0;n<o;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(824),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((n=>{t[n]=e[n]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let n=0;for(let t=0;t<e.length;t++)n=(n<<5)-n+e.charCodeAt(t),n|=0;return t.colors[Math.abs(n)%t.colors.length]},t.enable(t.load()),t}},58:e=>{try{e.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(t){e.exports=!1}},824:e=>{var t=1e3,n=60*t,r=60*n,o=24*r;function a(e,t,n,r){var o=t>=1.5*n;return Math.round(e/n)+" "+r+(o?"s":"")}e.exports=function(e,i){i=i||{};var s,l,u=typeof e;if("string"===u&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var a=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(a){var i=parseFloat(a[1]);switch((a[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*i;case"weeks":case"week":case"w":return 6048e5*i;case"days":case"day":case"d":return i*o;case"hours":case"hour":case"hrs":case"hr":case"h":return i*r;case"minutes":case"minute":case"mins":case"min":case"m":return i*n;case"seconds":case"second":case"secs":case"sec":case"s":return i*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return i;default:return}}}}(e);if("number"===u&&isFinite(e))return i.long?(s=e,(l=Math.abs(s))>=o?a(s,l,o,"day"):l>=r?a(s,l,r,"hour"):l>=n?a(s,l,n,"minute"):l>=t?a(s,l,t,"second"):s+" ms"):function(e){var a=Math.abs(e);return a>=o?Math.round(e/o)+"d":a>=r?Math.round(e/r)+"h":a>=n?Math.round(e/n)+"m":a>=t?Math.round(e/t)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,a){for(var i,s,l=o(e),u=1;u<arguments.length;u++){for(var c in i=Object(arguments[u]))n.call(i,c)&&(l[c]=i[c]);if(t){s=t(i);for(var d=0;d<s.length;d++)r.call(i,s[d])&&(l[s[d]]=i[s[d]])}}return l}},830:(e,t)=>{t.encode=function(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t.length&&(t+="&"),t+=encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t},t.decode=function(e){for(var t={},n=e.split("&"),r=0,o=n.length;r<o;r++){var a=n[r].split("=");t[decodeURIComponent(a[0])]=decodeURIComponent(a[1])}return t}},187:e=>{var t=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,n=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];e.exports=function(e){var r,o,a=e,i=e.indexOf("["),s=e.indexOf("]");-1!=i&&-1!=s&&(e=e.substring(0,i)+e.substring(i,s).replace(/:/g,";")+e.substring(s,e.length));for(var l,u,c=t.exec(e||""),d={},f=14;f--;)d[n[f]]=c[f]||"";return-1!=i&&-1!=s&&(d.source=a,d.host=d.host.substring(1,d.host.length-1).replace(/;/g,":"),d.authority=d.authority.replace("[","").replace("]","").replace(/;/g,":"),d.ipv6uri=!0),d.pathNames=(r=d.path,o=r.replace(/\/{2,9}/g,"/").split("/"),"/"!=r.substr(0,1)&&0!==r.length||o.splice(0,1),"/"==r.substr(r.length-1,1)&&o.splice(o.length-1,1),o),d.queryKey=(l=d.query,u={},l.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(e,t,n){t&&(u[t]=n)})),u),d}},448:(e,t,n)=>{"use strict";var r=n(294),o=n(418),a=n(840);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));var s=new Set,l={};function u(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(l[e]=t,e=0;e<t.length;e++)s.add(t[e])}var d=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},m={};function A(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new A(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new A(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new A(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new A(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new A(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new A(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new A(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new A(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new A(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function v(e,t,n,r){var o=g.hasOwnProperty(t)?g[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(m,e)||!p.call(h,e)&&(f.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new A(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);g[t]=new A(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);g[t]=new A(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new A(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new A("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new A(e,1,!1,e.toLowerCase(),null,!0,!0)}));var C=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=60103,k=60106,x=60107,E=60108,S=60114,N=60109,_=60110,B=60112,T=60113,O=60120,I=60115,P=60116,R=60121,L=60128,F=60129,z=60130,j=60131;if("function"==typeof Symbol&&Symbol.for){var M=Symbol.for;w=M("react.element"),k=M("react.portal"),x=M("react.fragment"),E=M("react.strict_mode"),S=M("react.profiler"),N=M("react.provider"),_=M("react.context"),B=M("react.forward_ref"),T=M("react.suspense"),O=M("react.suspense_list"),I=M("react.memo"),P=M("react.lazy"),R=M("react.block"),M("react.scope"),L=M("react.opaque.id"),F=M("react.debug_trace_mode"),z=M("react.offscreen"),j=M("react.legacy_hidden")}var D,U="function"==typeof Symbol&&Symbol.iterator;function H(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=U&&e[U]||e["@@iterator"])?e:null}function q(e){if(void 0===D)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);D=t&&t[1]||""}return"\n"+D+e}var W=!1;function V(e,t){if(!e||W)return"";W=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,s=a.length-1;1<=i&&0<=s&&o[i]!==a[s];)s--;for(;1<=i&&0<=s;i--,s--)if(o[i]!==a[s]){if(1!==i||1!==s)do{if(i--,0>--s||o[i]!==a[s])return"\n"+o[i].replace(" at new "," at ")}while(1<=i&&0<=s);break}}}finally{W=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?q(e):""}function K(e){switch(e.tag){case 5:return q(e.type);case 16:return q("Lazy");case 13:return q("Suspense");case 19:return q("SuspenseList");case 0:case 2:case 15:return V(e.type,!1);case 11:return V(e.type.render,!1);case 22:return V(e.type._render,!1);case 1:return V(e.type,!0);default:return""}}function J(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case x:return"Fragment";case k:return"Portal";case S:return"Profiler";case E:return"StrictMode";case T:return"Suspense";case O:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case _:return(e.displayName||"Context")+".Consumer";case N:return(e._context.displayName||"Context")+".Provider";case B:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case I:return J(e.type);case R:return J(e._render);case P:t=e._payload,e=e._init;try{return J(e(t))}catch(e){}}return null}function Q(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function $(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Y(e){e._valueTracker||(e._valueTracker=function(e){var t=$(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function X(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=$(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function G(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Q(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&v(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=Q(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,Q(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&G(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ae(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Q(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function se(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function le(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:Q(n)}}function ue(e,t){var n=Q(t.value),r=Q(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var de="http://www.w3.org/1999/xhtml";function fe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?fe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,me,Ae=(me=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return me(e,t)}))}:me);function ge(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ye={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function ve(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ye.hasOwnProperty(e)&&ye[e]?(""+t).trim():t+"px"}function Ce(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=ve(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ye).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ye[t]=ye[e]}))}));var we=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ke(e,t){if(t){if(we[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function xe(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Ee(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Se=null,Ne=null,_e=null;function Be(e){if(e=no(e)){if("function"!=typeof Se)throw Error(i(280));var t=e.stateNode;t&&(t=oo(t),Se(e.stateNode,e.type,t))}}function Te(e){Ne?_e?_e.push(e):_e=[e]:Ne=e}function Oe(){if(Ne){var e=Ne,t=_e;if(_e=Ne=null,Be(e),t)for(e=0;e<t.length;e++)Be(t[e])}}function Ie(e,t){return e(t)}function Pe(e,t,n,r,o){return e(t,n,r,o)}function Re(){}var Le=Ie,Fe=!1,ze=!1;function je(){null===Ne&&null===_e||(Re(),Oe())}function Me(e,t){var n=e.stateNode;if(null===n)return null;var r=oo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var De=!1;if(d)try{var Ue={};Object.defineProperty(Ue,"passive",{get:function(){De=!0}}),window.addEventListener("test",Ue,Ue),window.removeEventListener("test",Ue,Ue)}catch(me){De=!1}function He(e,t,n,r,o,a,i,s,l){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var qe=!1,We=null,Ve=!1,Ke=null,Je={onError:function(e){qe=!0,We=e}};function Qe(e,t,n,r,o,a,i,s,l){qe=!1,We=null,He.apply(Je,arguments)}function $e(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ye(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Xe(e){if($e(e)!==e)throw Error(i(188))}function Ge(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=$e(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return Xe(o),e;if(a===r)return Xe(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var s=!1,l=o.child;l;){if(l===n){s=!0,n=o,r=a;break}if(l===r){s=!0,r=o,n=a;break}l=l.sibling}if(!s){for(l=a.child;l;){if(l===n){s=!0,n=a,r=o;break}if(l===r){s=!0,r=a,n=o;break}l=l.sibling}if(!s)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Ze(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,at=[],it=null,st=null,lt=null,ut=new Map,ct=new Map,dt=[],ft="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":it=null;break;case"dragenter":case"dragleave":st=null;break;case"mouseover":case"mouseout":lt=null;break;case"pointerover":case"pointerout":ut.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function mt(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e=pt(t,n,r,o,a),null!==t&&null!==(t=no(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function At(e){var t=to(e.target);if(null!==t){var n=$e(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ye(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function gt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Gt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=no(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function yt(e,t,n){gt(e)&&n.delete(t)}function bt(){for(ot=!1;0<at.length;){var e=at[0];if(null!==e.blockedOn){null!==(e=no(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Gt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&at.shift()}null!==it&&gt(it)&&(it=null),null!==st&&gt(st)&&(st=null),null!==lt&&gt(lt)&&(lt=null),ut.forEach(yt),ct.forEach(yt)}function vt(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,bt)))}function Ct(e){function t(t){return vt(t,e)}if(0<at.length){vt(at[0],e);for(var n=1;n<at.length;n++){var r=at[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==it&&vt(it,e),null!==st&&vt(st,e),null!==lt&&vt(lt,e),ut.forEach(t),ct.forEach(t),n=0;n<dt.length;n++)(r=dt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<dt.length&&null===(n=dt[0]).blockedOn;)At(n),null===n.blockedOn&&dt.shift()}function wt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kt={animationend:wt("Animation","AnimationEnd"),animationiteration:wt("Animation","AnimationIteration"),animationstart:wt("Animation","AnimationStart"),transitionend:wt("Transition","TransitionEnd")},xt={},Et={};function St(e){if(xt[e])return xt[e];if(!kt[e])return e;var t,n=kt[e];for(t in n)if(n.hasOwnProperty(t)&&t in Et)return xt[e]=n[t];return e}d&&(Et=document.createElement("div").style,"AnimationEvent"in window||(delete kt.animationend.animation,delete kt.animationiteration.animation,delete kt.animationstart.animation),"TransitionEvent"in window||delete kt.transitionend.transition);var Nt=St("animationend"),_t=St("animationiteration"),Bt=St("animationstart"),Tt=St("transitionend"),Ot=new Map,It=new Map,Pt=["abort","abort",Nt,"animationEnd",_t,"animationIteration",Bt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Tt,"transitionEnd","waiting","waiting"];function Rt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),It.set(r,t),Ot.set(r,o),u(o,[r])}}(0,a.unstable_now)();var Lt=8;function Ft(e){if(0!=(1&e))return Lt=15,1;if(0!=(2&e))return Lt=14,2;if(0!=(4&e))return Lt=13,4;var t=24&e;return 0!==t?(Lt=12,t):0!=(32&e)?(Lt=11,32):0!=(t=192&e)?(Lt=10,t):0!=(256&e)?(Lt=9,256):0!=(t=3584&e)?(Lt=8,t):0!=(4096&e)?(Lt=7,4096):0!=(t=4186112&e)?(Lt=6,t):0!=(t=62914560&e)?(Lt=5,t):67108864&e?(Lt=4,67108864):0!=(134217728&e)?(Lt=3,134217728):0!=(t=805306368&e)?(Lt=2,t):0!=(1073741824&e)?(Lt=1,1073741824):(Lt=8,e)}function zt(e,t){var n=e.pendingLanes;if(0===n)return Lt=0;var r=0,o=0,a=e.expiredLanes,i=e.suspendedLanes,s=e.pingedLanes;if(0!==a)r=a,o=Lt=15;else if(0!=(a=134217727&n)){var l=a&~i;0!==l?(r=Ft(l),o=Lt):0!=(s&=a)&&(r=Ft(s),o=Lt)}else 0!=(a=n&~i)?(r=Ft(a),o=Lt):0!==s&&(r=Ft(s),o=Lt);if(0===r)return 0;if(r=n&((0>(r=31-qt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&i)){if(Ft(t),o<=Lt)return t;Lt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-qt(t)),r|=e[n],t&=~o;return r}function jt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Mt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Dt(24&~t))?Mt(10,t):e;case 10:return 0===(e=Dt(192&~t))?Mt(8,t):e;case 8:return 0===(e=Dt(3584&~t))&&0===(e=Dt(4186112&~t))&&(e=512),e;case 2:return 0===(t=Dt(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function Dt(e){return e&-e}function Ut(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ht(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-qt(t)]=n}var qt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Wt(e)/Vt|0)|0},Wt=Math.log,Vt=Math.LN2,Kt=a.unstable_UserBlockingPriority,Jt=a.unstable_runWithPriority,Qt=!0;function $t(e,t,n,r){Fe||Re();var o=Xt,a=Fe;Fe=!0;try{Pe(o,e,t,n,r)}finally{(Fe=a)||je()}}function Yt(e,t,n,r){Jt(Kt,Xt.bind(null,e,t,n,r))}function Xt(e,t,n,r){var o;if(Qt)if((o=0==(4&t))&&0<at.length&&-1<ft.indexOf(e))e=pt(null,e,t,n,r),at.push(e);else{var a=Gt(e,t,n,r);if(null===a)o&&ht(e,r);else{if(o){if(-1<ft.indexOf(e))return e=pt(a,e,t,n,r),void at.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return it=mt(it,e,t,n,r,o),!0;case"dragenter":return st=mt(st,e,t,n,r,o),!0;case"mouseover":return lt=mt(lt,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return ut.set(a,mt(ut.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,ct.set(a,mt(ct.get(a)||null,e,t,n,r,o)),!0}return!1}(a,e,t,n,r))return;ht(e,r)}Rr(e,t,r,null,n)}}}function Gt(e,t,n,r){var o=Ee(r);if(null!==(o=to(o))){var a=$e(o);if(null===a)o=null;else{var i=a.tag;if(13===i){if(null!==(o=Ye(a)))return o;o=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;o=null}else a!==o&&(o=null)}}return Rr(e,t,r,o,n),null}var Zt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Zt?Zt.value:Zt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function sn(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var ln,un,cn,dn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},fn=sn(dn),pn=o({},dn,{view:0,detail:0}),hn=sn(pn),mn=o({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Nn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(ln=e.screenX-cn.screenX,un=e.screenY-cn.screenY):un=ln=0,cn=e),ln)},movementY:function(e){return"movementY"in e?e.movementY:un}}),An=sn(mn),gn=sn(o({},mn,{dataTransfer:0})),yn=sn(o({},pn,{relatedTarget:0})),bn=sn(o({},dn,{animationName:0,elapsedTime:0,pseudoElement:0})),vn=o({},dn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Cn=sn(vn),wn=sn(o({},dn,{data:0})),kn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},En={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Sn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=En[e])&&!!t[e]}function Nn(){return Sn}var _n=o({},pn,{key:function(e){if(e.key){var t=kn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?xn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Nn,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Bn=sn(_n),Tn=sn(o({},mn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),On=sn(o({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Nn})),In=sn(o({},dn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Pn=o({},mn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Rn=sn(Pn),Ln=[9,13,27,32],Fn=d&&"CompositionEvent"in window,zn=null;d&&"documentMode"in document&&(zn=document.documentMode);var jn=d&&"TextEvent"in window&&!zn,Mn=d&&(!Fn||zn&&8<zn&&11>=zn),Dn=String.fromCharCode(32),Un=!1;function Hn(e,t){switch(e){case"keyup":return-1!==Ln.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function qn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Wn=!1,Vn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Kn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Vn[e.type]:"textarea"===t}function Jn(e,t,n,r){Te(r),0<(t=Fr(t,"onChange")).length&&(n=new fn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Qn=null,$n=null;function Yn(e){_r(e,0)}function Xn(e){if(X(ro(e)))return e}function Gn(e,t){if("change"===e)return t}var Zn=!1;if(d){var er;if(d){var tr="oninput"in document;if(!tr){var nr=document.createElement("div");nr.setAttribute("oninput","return;"),tr="function"==typeof nr.oninput}er=tr}else er=!1;Zn=er&&(!document.documentMode||9<document.documentMode)}function rr(){Qn&&(Qn.detachEvent("onpropertychange",or),$n=Qn=null)}function or(e){if("value"===e.propertyName&&Xn($n)){var t=[];if(Jn(t,$n,e,Ee(e)),e=Yn,Fe)e(t);else{Fe=!0;try{Ie(e,t)}finally{Fe=!1,je()}}}}function ar(e,t,n){"focusin"===e?(rr(),$n=n,(Qn=t).attachEvent("onpropertychange",or)):"focusout"===e&&rr()}function ir(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Xn($n)}function sr(e,t){if("click"===e)return Xn(t)}function lr(e,t){if("input"===e||"change"===e)return Xn(t)}var ur="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},cr=Object.prototype.hasOwnProperty;function dr(e,t){if(ur(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!cr.call(t,n[r])||!ur(e[n[r]],t[n[r]]))return!1;return!0}function fr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function pr(e,t){var n,r=fr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=fr(r)}}function hr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?hr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function mr(){for(var e=window,t=G();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=G((e=t.contentWindow).document)}return t}function Ar(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var gr=d&&"documentMode"in document&&11>=document.documentMode,yr=null,br=null,vr=null,Cr=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;Cr||null==yr||yr!==G(r)||(r="selectionStart"in(r=yr)&&Ar(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&dr(vr,r)||(vr=r,0<(r=Fr(br,"onSelect")).length&&(t=new fn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=yr)))}Rt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Rt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Rt(Pt,2);for(var kr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),xr=0;xr<kr.length;xr++)It.set(kr[xr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),u("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),u("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),u("onBeforeInput",["compositionend","keypress","textInput","paste"]),u("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),u("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Er="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Sr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Er));function Nr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,s,l,u){if(Qe.apply(this,arguments),qe){if(!qe)throw Error(i(198));var c=We;qe=!1,We=null,Ve||(Ve=!0,Ke=c)}}(r,t,void 0,e),e.currentTarget=null}function _r(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var s=r[i],l=s.instance,u=s.currentTarget;if(s=s.listener,l!==a&&o.isPropagationStopped())break e;Nr(o,s,u),a=l}else for(i=0;i<r.length;i++){if(l=(s=r[i]).instance,u=s.currentTarget,s=s.listener,l!==a&&o.isPropagationStopped())break e;Nr(o,s,u),a=l}}}if(Ve)throw e=Ke,Ve=!1,Ke=null,e}function Br(e,t){var n=ao(t),r=e+"__bubble";n.has(r)||(Pr(t,e,2,!1),n.add(r))}var Tr="_reactListening"+Math.random().toString(36).slice(2);function Or(e){e[Tr]||(e[Tr]=!0,s.forEach((function(t){Sr.has(t)||Ir(t,!1,e,null),Ir(t,!0,e,null)})))}function Ir(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=n;if("selectionchange"===e&&9!==n.nodeType&&(a=n.ownerDocument),null!==r&&!t&&Sr.has(e)){if("scroll"!==e)return;o|=2,a=r}var i=ao(a),s=e+"__"+(t?"capture":"bubble");i.has(s)||(t&&(o|=4),Pr(a,e,o,t),i.add(s))}function Pr(e,t,n,r){var o=It.get(t);switch(void 0===o?2:o){case 0:o=$t;break;case 1:o=Yt;break;default:o=Xt}n=o.bind(null,t,n,e),o=void 0,!De||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Rr(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var s=r.stateNode.containerInfo;if(s===o||8===s.nodeType&&s.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var l=i.tag;if((3===l||4===l)&&((l=i.stateNode.containerInfo)===o||8===l.nodeType&&l.parentNode===o))return;i=i.return}for(;null!==s;){if(null===(i=to(s)))return;if(5===(l=i.tag)||6===l){r=a=i;continue e}s=s.parentNode}}r=r.return}!function(e,t,n){if(ze)return e();ze=!0;try{Le(e,t,n)}finally{ze=!1,je()}}((function(){var r=a,o=Ee(n),i=[];e:{var s=Ot.get(e);if(void 0!==s){var l=fn,u=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":l=Bn;break;case"focusin":u="focus",l=yn;break;case"focusout":u="blur",l=yn;break;case"beforeblur":case"afterblur":l=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=An;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=On;break;case Nt:case _t:case Bt:l=bn;break;case Tt:l=In;break;case"scroll":l=hn;break;case"wheel":l=Rn;break;case"copy":case"cut":case"paste":l=Cn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Tn}var c=0!=(4&t),d=!c&&"scroll"===e,f=c?null!==s?s+"Capture":null:s;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==f&&null!=(m=Me(h,f))&&c.push(Lr(h,m,p))),d)break;h=h.return}0<c.length&&(s=new l(s,u,null,n,o),i.push({event:s,listeners:c}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(u=n.relatedTarget||n.fromElement)||!to(u)&&!u[Zr])&&(l||s)&&(s=o.window===o?o:(s=o.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(u=(u=n.relatedTarget||n.toElement)?to(u):null)&&(u!==(d=$e(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(l=null,u=r),l!==u)){if(c=An,m="onMouseLeave",f="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Tn,m="onPointerLeave",f="onPointerEnter",h="pointer"),d=null==l?s:ro(l),p=null==u?s:ro(u),(s=new c(m,h+"leave",l,n,o)).target=d,s.relatedTarget=p,m=null,to(o)===r&&((c=new c(f,h+"enter",u,n,o)).target=p,c.relatedTarget=d,m=c),d=m,l&&u)e:{for(f=u,h=0,p=c=l;p;p=zr(p))h++;for(p=0,m=f;m;m=zr(m))p++;for(;0<h-p;)c=zr(c),h--;for(;0<p-h;)f=zr(f),p--;for(;h--;){if(c===f||null!==f&&c===f.alternate)break e;c=zr(c),f=zr(f)}c=null}else c=null;null!==l&&jr(i,s,l,c,!1),null!==u&&null!==d&&jr(i,d,u,c,!0)}if("select"===(l=(s=r?ro(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var A=Gn;else if(Kn(s))if(Zn)A=lr;else{A=ir;var g=ar}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(A=sr);switch(A&&(A=A(e,r))?Jn(i,A,n,o):(g&&g(e,s,r),"focusout"===e&&(g=s._wrapperState)&&g.controlled&&"number"===s.type&&oe(s,"number",s.value)),g=r?ro(r):window,e){case"focusin":(Kn(g)||"true"===g.contentEditable)&&(yr=g,br=r,vr=null);break;case"focusout":vr=br=yr=null;break;case"mousedown":Cr=!0;break;case"contextmenu":case"mouseup":case"dragend":Cr=!1,wr(i,n,o);break;case"selectionchange":if(gr)break;case"keydown":case"keyup":wr(i,n,o)}var y;if(Fn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Wn?Hn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Mn&&"ko"!==n.locale&&(Wn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Wn&&(y=nn()):(en="value"in(Zt=o)?Zt.value:Zt.textContent,Wn=!0)),0<(g=Fr(r,b)).length&&(b=new wn(b,e,null,n,o),i.push({event:b,listeners:g}),(y||null!==(y=qn(n)))&&(b.data=y))),(y=jn?function(e,t){switch(e){case"compositionend":return qn(t);case"keypress":return 32!==t.which?null:(Un=!0,Dn);case"textInput":return(e=t.data)===Dn&&Un?null:e;default:return null}}(e,n):function(e,t){if(Wn)return"compositionend"===e||!Fn&&Hn(e,t)?(e=nn(),tn=en=Zt=null,Wn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Mn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Fr(r,"onBeforeInput")).length&&(o=new wn("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=y)}_r(i,t)}))}function Lr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Fr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Me(e,n))&&r.unshift(Lr(e,a,o)),null!=(a=Me(e,t))&&r.push(Lr(e,a,o))),e=e.return}return r}function zr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function jr(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var s=n,l=s.alternate,u=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==u&&(s=u,o?null!=(l=Me(n,a))&&i.unshift(Lr(n,l,s)):o||null!=(l=Me(n,a))&&i.push(Lr(n,l,s))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}function Mr(){}var Dr=null,Ur=null;function Hr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function qr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Wr="function"==typeof setTimeout?setTimeout:void 0,Vr="function"==typeof clearTimeout?clearTimeout:void 0;function Kr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Jr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Qr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var $r=0,Yr=Math.random().toString(36).slice(2),Xr="__reactFiber$"+Yr,Gr="__reactProps$"+Yr,Zr="__reactContainer$"+Yr,eo="__reactEvents$"+Yr;function to(e){var t=e[Xr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Zr]||n[Xr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Qr(e);null!==e;){if(n=e[Xr])return n;e=Qr(e)}return t}n=(e=n).parentNode}return null}function no(e){return!(e=e[Xr]||e[Zr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ro(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function oo(e){return e[Gr]||null}function ao(e){var t=e[eo];return void 0===t&&(t=e[eo]=new Set),t}var io=[],so=-1;function lo(e){return{current:e}}function uo(e){0>so||(e.current=io[so],io[so]=null,so--)}function co(e,t){so++,io[so]=e.current,e.current=t}var fo={},po=lo(fo),ho=lo(!1),mo=fo;function Ao(e,t){var n=e.type.contextTypes;if(!n)return fo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function go(e){return null!=e.childContextTypes}function yo(){uo(ho),uo(po)}function bo(e,t,n){if(po.current!==fo)throw Error(i(168));co(po,t),co(ho,n)}function vo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(i(108,J(t)||"Unknown",a));return o({},n,r)}function Co(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||fo,mo=po.current,co(po,e),co(ho,ho.current),!0}function wo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=vo(e,t,mo),r.__reactInternalMemoizedMergedChildContext=e,uo(ho),uo(po),co(po,e)):uo(ho),co(ho,n)}var ko=null,xo=null,Eo=a.unstable_runWithPriority,So=a.unstable_scheduleCallback,No=a.unstable_cancelCallback,_o=a.unstable_shouldYield,Bo=a.unstable_requestPaint,To=a.unstable_now,Oo=a.unstable_getCurrentPriorityLevel,Io=a.unstable_ImmediatePriority,Po=a.unstable_UserBlockingPriority,Ro=a.unstable_NormalPriority,Lo=a.unstable_LowPriority,Fo=a.unstable_IdlePriority,zo={},jo=void 0!==Bo?Bo:function(){},Mo=null,Do=null,Uo=!1,Ho=To(),qo=1e4>Ho?To:function(){return To()-Ho};function Wo(){switch(Oo()){case Io:return 99;case Po:return 98;case Ro:return 97;case Lo:return 96;case Fo:return 95;default:throw Error(i(332))}}function Vo(e){switch(e){case 99:return Io;case 98:return Po;case 97:return Ro;case 96:return Lo;case 95:return Fo;default:throw Error(i(332))}}function Ko(e,t){return e=Vo(e),Eo(e,t)}function Jo(e,t,n){return e=Vo(e),So(e,t,n)}function Qo(){if(null!==Do){var e=Do;Do=null,No(e)}$o()}function $o(){if(!Uo&&null!==Mo){Uo=!0;var e=0;try{var t=Mo;Ko(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Mo=null}catch(t){throw null!==Mo&&(Mo=Mo.slice(e+1)),So(Io,Qo),t}finally{Uo=!1}}}var Yo=C.ReactCurrentBatchConfig;function Xo(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Go=lo(null),Zo=null,ea=null,ta=null;function na(){ta=ea=Zo=null}function ra(e){var t=Go.current;uo(Go),e.type._context._currentValue=t}function oa(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function aa(e,t){Zo=e,ta=ea=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Fi=!0),e.firstContext=null)}function ia(e,t){if(ta!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ta=e,t=1073741823),t={context:e,observedBits:t,next:null},null===ea){if(null===Zo)throw Error(i(308));ea=t,Zo.dependencies={lanes:0,firstContext:t,responders:null}}else ea=ea.next=t;return e._currentValue}var sa=!1;function la(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ua(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ca(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function da(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function fa(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function pa(e,t,n,r){var a=e.updateQueue;sa=!1;var i=a.firstBaseUpdate,s=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var u=l,c=u.next;u.next=null,null===s?i=c:s.next=c,s=u;var d=e.alternate;if(null!==d){var f=(d=d.updateQueue).lastBaseUpdate;f!==s&&(null===f?d.firstBaseUpdate=c:f.next=c,d.lastBaseUpdate=u)}}if(null!==i){for(f=a.baseState,s=0,d=c=u=null;;){l=i.lane;var p=i.eventTime;if((r&l)===l){null!==d&&(d=d.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var h=e,m=i;switch(l=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){f=h.call(p,f,l);break e}f=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(l="function"==typeof(h=m.payload)?h.call(p,f,l):h))break e;f=o({},f,l);break e;case 2:sa=!0}}null!==i.callback&&(e.flags|=32,null===(l=a.effects)?a.effects=[i]:l.push(i))}else p={eventTime:p,lane:l,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===d?(c=d=p,u=f):d=d.next=p,s|=l;if(null===(i=i.next)){if(null===(l=a.shared.pending))break;i=l.next,l.next=null,a.lastBaseUpdate=l,a.shared.pending=null}}null===d&&(u=f),a.baseState=u,a.firstBaseUpdate=c,a.lastBaseUpdate=d,js|=s,e.lanes=s,e.memoizedState=f}}function ha(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var ma=(new r.Component).refs;function Aa(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var ga={isMounted:function(e){return!!(e=e._reactInternals)&&$e(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=ul(),o=cl(e),a=ca(r,o);a.payload=t,null!=n&&(a.callback=n),da(e,a),dl(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=ul(),o=cl(e),a=ca(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),da(e,a),dl(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ul(),r=cl(e),o=ca(n,r);o.tag=2,null!=t&&(o.callback=t),da(e,o),dl(e,r,n)}};function ya(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&dr(n,r)&&dr(o,a))}function ba(e,t,n){var r=!1,o=fo,a=t.contextType;return"object"==typeof a&&null!==a?a=ia(a):(o=go(t)?mo:po.current,a=(r=null!=(r=t.contextTypes))?Ao(e,o):fo),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ga,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function va(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ga.enqueueReplaceState(t,t.state,null)}function Ca(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=ma,la(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=ia(a):(a=go(t)?mo:po.current,o.context=Ao(e,a)),pa(e,n,o,r),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(Aa(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&ga.enqueueReplaceState(o,o.state,null),pa(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var wa=Array.isArray;function ka(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:(t=function(e){var t=r.refs;t===ma&&(t=r.refs={}),null===e?delete t[o]:t[o]=e},t._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function xa(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Ea(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=ql(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function s(t){return e&&null===t.alternate&&(t.flags=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Jl(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function u(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=ka(e,t,n),r.return=e,r):((r=Wl(n.type,n.key,n.props,null,e.mode,r)).ref=ka(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ql(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function d(e,t,n,r,a){return null===t||7!==t.tag?((t=Vl(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Jl(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return(n=Wl(t.type,t.key,t.props,null,e.mode,n)).ref=ka(e,null,t),n.return=e,n;case k:return(t=Ql(t,e.mode,n)).return=e,t}if(wa(t)||H(t))return(t=Vl(t,e.mode,n,null)).return=e,t;xa(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===o?n.type===x?d(e,t,n.props.children,r,o):u(e,t,n,r):null;case k:return n.key===o?c(e,t,n,r):null}if(wa(n)||H(n))return null!==o?null:d(e,t,n,r,null);xa(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return e=e.get(null===r.key?n:r.key)||null,r.type===x?d(t,e,r.props.children,o,r.key):u(t,e,r,o);case k:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(wa(r)||H(r))return d(t,e=e.get(n)||null,r,o,null);xa(t,r)}return null}function m(o,i,s,l){for(var u=null,c=null,d=i,m=i=0,A=null;null!==d&&m<s.length;m++){d.index>m?(A=d,d=null):A=d.sibling;var g=p(o,d,s[m],l);if(null===g){null===d&&(d=A);break}e&&d&&null===g.alternate&&t(o,d),i=a(g,i,m),null===c?u=g:c.sibling=g,c=g,d=A}if(m===s.length)return n(o,d),u;if(null===d){for(;m<s.length;m++)null!==(d=f(o,s[m],l))&&(i=a(d,i,m),null===c?u=d:c.sibling=d,c=d);return u}for(d=r(o,d);m<s.length;m++)null!==(A=h(d,o,m,s[m],l))&&(e&&null!==A.alternate&&d.delete(null===A.key?m:A.key),i=a(A,i,m),null===c?u=A:c.sibling=A,c=A);return e&&d.forEach((function(e){return t(o,e)})),u}function A(o,s,l,u){var c=H(l);if("function"!=typeof c)throw Error(i(150));if(null==(l=c.call(l)))throw Error(i(151));for(var d=c=null,m=s,A=s=0,g=null,y=l.next();null!==m&&!y.done;A++,y=l.next()){m.index>A?(g=m,m=null):g=m.sibling;var b=p(o,m,y.value,u);if(null===b){null===m&&(m=g);break}e&&m&&null===b.alternate&&t(o,m),s=a(b,s,A),null===d?c=b:d.sibling=b,d=b,m=g}if(y.done)return n(o,m),c;if(null===m){for(;!y.done;A++,y=l.next())null!==(y=f(o,y.value,u))&&(s=a(y,s,A),null===d?c=y:d.sibling=y,d=y);return c}for(m=r(o,m);!y.done;A++,y=l.next())null!==(y=h(m,o,A,y.value,u))&&(e&&null!==y.alternate&&m.delete(null===y.key?A:y.key),s=a(y,s,A),null===d?c=y:d.sibling=y,d=y);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,a,l){var u="object"==typeof a&&null!==a&&a.type===x&&null===a.key;u&&(a=a.props.children);var c="object"==typeof a&&null!==a;if(c)switch(a.$$typeof){case w:e:{for(c=a.key,u=r;null!==u;){if(u.key===c){if(7===u.tag){if(a.type===x){n(e,u.sibling),(r=o(u,a.props.children)).return=e,e=r;break e}}else if(u.elementType===a.type){n(e,u.sibling),(r=o(u,a.props)).ref=ka(e,u,a),r.return=e,e=r;break e}n(e,u);break}t(e,u),u=u.sibling}a.type===x?((r=Vl(a.props.children,e.mode,l,a.key)).return=e,e=r):((l=Wl(a.type,a.key,a.props,null,e.mode,l)).ref=ka(e,r,a),l.return=e,e=l)}return s(e);case k:e:{for(u=a.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Ql(a,e.mode,l)).return=e,e=r}return s(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a)).return=e,e=r):(n(e,r),(r=Jl(a,e.mode,l)).return=e,e=r),s(e);if(wa(a))return m(e,r,a,l);if(H(a))return A(e,r,a,l);if(c&&xa(e,a),void 0===a&&!u)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,J(e.type)||"Component"))}return n(e,r)}}var Sa=Ea(!0),Na=Ea(!1),_a={},Ba=lo(_a),Ta=lo(_a),Oa=lo(_a);function Ia(e){if(e===_a)throw Error(i(174));return e}function Pa(e,t){switch(co(Oa,t),co(Ta,e),co(Ba,_a),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}uo(Ba),co(Ba,t)}function Ra(){uo(Ba),uo(Ta),uo(Oa)}function La(e){Ia(Oa.current);var t=Ia(Ba.current),n=pe(t,e.type);t!==n&&(co(Ta,e),co(Ba,n))}function Fa(e){Ta.current===e&&(uo(Ba),uo(Ta))}var za=lo(0);function ja(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Ma=null,Da=null,Ua=!1;function Ha(e,t){var n=Ul(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function qa(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Wa(e){if(Ua){var t=Da;if(t){var n=t;if(!qa(e,t)){if(!(t=Jr(n.nextSibling))||!qa(e,t))return e.flags=-1025&e.flags|2,Ua=!1,void(Ma=e);Ha(Ma,n)}Ma=e,Da=Jr(t.firstChild)}else e.flags=-1025&e.flags|2,Ua=!1,Ma=e}}function Va(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Ma=e}function Ka(e){if(e!==Ma)return!1;if(!Ua)return Va(e),Ua=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!qr(t,e.memoizedProps))for(t=Da;t;)Ha(e,t),t=Jr(t.nextSibling);if(Va(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Da=Jr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Da=null}}else Da=Ma?Jr(e.stateNode.nextSibling):null;return!0}function Ja(){Da=Ma=null,Ua=!1}var Qa=[];function $a(){for(var e=0;e<Qa.length;e++)Qa[e]._workInProgressVersionPrimary=null;Qa.length=0}var Ya=C.ReactCurrentDispatcher,Xa=C.ReactCurrentBatchConfig,Ga=0,Za=null,ei=null,ti=null,ni=!1,ri=!1;function oi(){throw Error(i(321))}function ai(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ur(e[n],t[n]))return!1;return!0}function ii(e,t,n,r,o,a){if(Ga=a,Za=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Ya.current=null===e||null===e.memoizedState?Ii:Pi,e=n(r,o),ri){a=0;do{if(ri=!1,!(25>a))throw Error(i(301));a+=1,ti=ei=null,t.updateQueue=null,Ya.current=Ri,e=n(r,o)}while(ri)}if(Ya.current=Oi,t=null!==ei&&null!==ei.next,Ga=0,ti=ei=Za=null,ni=!1,t)throw Error(i(300));return e}function si(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ti?Za.memoizedState=ti=e:ti=ti.next=e,ti}function li(){if(null===ei){var e=Za.alternate;e=null!==e?e.memoizedState:null}else e=ei.next;var t=null===ti?Za.memoizedState:ti.next;if(null!==t)ti=t,ei=e;else{if(null===e)throw Error(i(310));e={memoizedState:(ei=e).memoizedState,baseState:ei.baseState,baseQueue:ei.baseQueue,queue:ei.queue,next:null},null===ti?Za.memoizedState=ti=e:ti=ti.next=e}return ti}function ui(e,t){return"function"==typeof t?t(e):t}function ci(e){var t=li(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=ei,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var s=o.next;o.next=a.next,a.next=s}r.baseQueue=o=a,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var l=s=a=null,u=o;do{var c=u.lane;if((Ga&c)===c)null!==l&&(l=l.next={lane:0,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null}),r=u.eagerReducer===e?u.eagerState:e(r,u.action);else{var d={lane:c,action:u.action,eagerReducer:u.eagerReducer,eagerState:u.eagerState,next:null};null===l?(s=l=d,a=r):l=l.next=d,Za.lanes|=c,js|=c}u=u.next}while(null!==u&&u!==o);null===l?a=r:l.next=s,ur(r,t.memoizedState)||(Fi=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function di(e){var t=li(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var s=o=o.next;do{a=e(a,s.action),s=s.next}while(s!==o);ur(a,t.memoizedState)||(Fi=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function fi(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Ga&e)===e)&&(t._workInProgressVersionPrimary=r,Qa.push(t))),e)return n(t._source);throw Qa.push(t),Error(i(350))}function pi(e,t,n,r){var o=Ts;if(null===o)throw Error(i(349));var a=t._getVersion,s=a(t._source),l=Ya.current,u=l.useState((function(){return fi(o,t,n)})),c=u[1],d=u[0];u=ti;var f=e.memoizedState,p=f.refs,h=p.getSnapshot,m=f.source;f=f.subscribe;var A=Za;return e.memoizedState={refs:p,source:t,subscribe:r},l.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=a(t._source);if(!ur(s,e)){e=n(t._source),ur(d,e)||(c(e),e=cl(A),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,i=e;0<i;){var l=31-qt(i),u=1<<l;r[l]|=e,i&=~u}}}),[n,t,r]),l.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=cl(A);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ur(h,n)&&ur(m,t)&&ur(f,r)||((e={pending:null,dispatch:null,lastRenderedReducer:ui,lastRenderedState:d}).dispatch=c=Ti.bind(null,Za,e),u.queue=e,u.baseQueue=null,d=fi(o,t,n),u.memoizedState=u.baseState=d),d}function hi(e,t,n){return pi(li(),e,t,n)}function mi(e){var t=si();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ui,lastRenderedState:e}).dispatch=Ti.bind(null,Za,e),[t.memoizedState,e]}function Ai(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Za.updateQueue)?(t={lastEffect:null},Za.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function gi(e){return e={current:e},si().memoizedState=e}function yi(){return li().memoizedState}function bi(e,t,n,r){var o=si();Za.flags|=e,o.memoizedState=Ai(1|t,n,void 0,void 0===r?null:r)}function vi(e,t,n,r){var o=li();r=void 0===r?null:r;var a=void 0;if(null!==ei){var i=ei.memoizedState;if(a=i.destroy,null!==r&&ai(r,i.deps))return void Ai(t,n,a,r)}Za.flags|=e,o.memoizedState=Ai(1|t,n,a,r)}function Ci(e,t){return bi(516,4,e,t)}function wi(e,t){return vi(516,4,e,t)}function ki(e,t){return vi(4,2,e,t)}function xi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ei(e,t,n){return n=null!=n?n.concat([e]):null,vi(4,2,xi.bind(null,t,e),n)}function Si(){}function Ni(e,t){var n=li();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ai(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function _i(e,t){var n=li();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ai(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Bi(e,t){var n=Wo();Ko(98>n?98:n,(function(){e(!0)})),Ko(97<n?97:n,(function(){var n=Xa.transition;Xa.transition=1;try{e(!1),t()}finally{Xa.transition=n}}))}function Ti(e,t,n){var r=ul(),o=cl(e),a={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),t.pending=a,i=e.alternate,e===Za||null!==i&&i===Za)ri=ni=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var s=t.lastRenderedState,l=i(s,n);if(a.eagerReducer=i,a.eagerState=l,ur(l,s))return}catch(e){}dl(e,o,r)}}var Oi={readContext:ia,useCallback:oi,useContext:oi,useEffect:oi,useImperativeHandle:oi,useLayoutEffect:oi,useMemo:oi,useReducer:oi,useRef:oi,useState:oi,useDebugValue:oi,useDeferredValue:oi,useTransition:oi,useMutableSource:oi,useOpaqueIdentifier:oi,unstable_isNewReconciler:!1},Ii={readContext:ia,useCallback:function(e,t){return si().memoizedState=[e,void 0===t?null:t],e},useContext:ia,useEffect:Ci,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,bi(4,2,xi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return bi(4,2,e,t)},useMemo:function(e,t){var n=si();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=si();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ti.bind(null,Za,e),[r.memoizedState,e]},useRef:gi,useState:mi,useDebugValue:Si,useDeferredValue:function(e){var t=mi(e),n=t[0],r=t[1];return Ci((function(){var t=Xa.transition;Xa.transition=1;try{r(e)}finally{Xa.transition=t}}),[e]),n},useTransition:function(){var e=mi(!1),t=e[0];return gi(e=Bi.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=si();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},pi(r,e,t,n)},useOpaqueIdentifier:function(){if(Ua){var e=!1,t=function(e){return{$$typeof:L,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+($r++).toString(36))),Error(i(355))})),n=mi(t)[1];return 0==(2&Za.mode)&&(Za.flags|=516,Ai(5,(function(){n("r:"+($r++).toString(36))}),void 0,null)),t}return mi(t="r:"+($r++).toString(36)),t},unstable_isNewReconciler:!1},Pi={readContext:ia,useCallback:Ni,useContext:ia,useEffect:wi,useImperativeHandle:Ei,useLayoutEffect:ki,useMemo:_i,useReducer:ci,useRef:yi,useState:function(){return ci(ui)},useDebugValue:Si,useDeferredValue:function(e){var t=ci(ui),n=t[0],r=t[1];return wi((function(){var t=Xa.transition;Xa.transition=1;try{r(e)}finally{Xa.transition=t}}),[e]),n},useTransition:function(){var e=ci(ui)[0];return[yi().current,e]},useMutableSource:hi,useOpaqueIdentifier:function(){return ci(ui)[0]},unstable_isNewReconciler:!1},Ri={readContext:ia,useCallback:Ni,useContext:ia,useEffect:wi,useImperativeHandle:Ei,useLayoutEffect:ki,useMemo:_i,useReducer:di,useRef:yi,useState:function(){return di(ui)},useDebugValue:Si,useDeferredValue:function(e){var t=di(ui),n=t[0],r=t[1];return wi((function(){var t=Xa.transition;Xa.transition=1;try{r(e)}finally{Xa.transition=t}}),[e]),n},useTransition:function(){var e=di(ui)[0];return[yi().current,e]},useMutableSource:hi,useOpaqueIdentifier:function(){return di(ui)[0]},unstable_isNewReconciler:!1},Li=C.ReactCurrentOwner,Fi=!1;function zi(e,t,n,r){t.child=null===e?Na(t,null,n,r):Sa(t,e.child,n,r)}function ji(e,t,n,r,o){n=n.render;var a=t.ref;return aa(t,o),r=ii(e,t,n,r,a,o),null===e||Fi?(t.flags|=1,zi(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,ns(e,t,o))}function Mi(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||Hl(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Wl(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Di(e,t,i,r,o,a))}return i=e.child,0==(o&a)&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:dr)(o,r)&&e.ref===t.ref)?ns(e,t,a):(t.flags|=1,(e=ql(i,r)).ref=t.ref,e.return=t,t.child=e)}function Di(e,t,n,r,o,a){if(null!==e&&dr(e.memoizedProps,r)&&e.ref===t.ref){if(Fi=!1,0==(a&o))return t.lanes=e.lanes,ns(e,t,a);0!=(16384&e.flags)&&(Fi=!0)}return qi(e,t,n,r,a)}function Ui(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},bl(0,n);else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},bl(0,e),null;t.memoizedState={baseLanes:0},bl(0,null!==a?a.baseLanes:n)}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,bl(0,r);return zi(e,t,o,n),t.child}function Hi(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function qi(e,t,n,r,o){var a=go(n)?mo:po.current;return a=Ao(t,a),aa(t,o),n=ii(e,t,n,r,a,o),null===e||Fi?(t.flags|=1,zi(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,ns(e,t,o))}function Wi(e,t,n,r,o){if(go(n)){var a=!0;Co(t)}else a=!1;if(aa(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),ba(t,n,r),Ca(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,s=t.memoizedProps;i.props=s;var l=i.context,u=n.contextType;u="object"==typeof u&&null!==u?ia(u):Ao(t,u=go(n)?mo:po.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(s!==r||l!==u)&&va(t,i,r,u),sa=!1;var f=t.memoizedState;i.state=f,pa(t,r,i,o),l=t.memoizedState,s!==r||f!==l||ho.current||sa?("function"==typeof c&&(Aa(t,n,c,r),l=t.memoizedState),(s=sa||ya(t,n,s,r,f,l,u))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4)):("function"==typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=l),i.props=r,i.state=l,i.context=u,r=s):("function"==typeof i.componentDidMount&&(t.flags|=4),r=!1)}else{i=t.stateNode,ua(e,t),s=t.memoizedProps,u=t.type===t.elementType?s:Xo(t.type,s),i.props=u,d=t.pendingProps,f=i.context,l="object"==typeof(l=n.contextType)&&null!==l?ia(l):Ao(t,l=go(n)?mo:po.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(s!==d||f!==l)&&va(t,i,r,l),sa=!1,f=t.memoizedState,i.state=f,pa(t,r,i,o);var h=t.memoizedState;s!==d||f!==h||ho.current||sa?("function"==typeof p&&(Aa(t,n,p,r),h=t.memoizedState),(u=sa||ya(t,n,u,r,f,h,l))?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,l),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof i.componentDidUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=l,r=u):("function"!=typeof i.componentDidUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=256),r=!1)}return Vi(e,t,n,r,a,o)}function Vi(e,t,n,r,o,a){Hi(e,t);var i=0!=(64&t.flags);if(!r&&!i)return o&&wo(t,n,!1),ns(e,t,a);r=t.stateNode,Li.current=t;var s=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Sa(t,e.child,null,a),t.child=Sa(t,null,s,a)):zi(e,t,s,a),t.memoizedState=r.state,o&&wo(t,n,!0),t.child}function Ki(e){var t=e.stateNode;t.pendingContext?bo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&bo(0,t.context,!1),Pa(e,t.containerInfo)}var Ji,Qi,$i,Yi={dehydrated:null,retryLane:0};function Xi(e,t,n){var r,o=t.pendingProps,a=za.current,i=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),co(za,1&a),null===e?(void 0!==o.fallback&&Wa(t),e=o.children,a=o.fallback,i?(e=Gi(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Yi,e):"number"==typeof o.unstable_expectedLoadTime?(e=Gi(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Yi,t.lanes=33554432,e):((n=Kl({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,i?(o=function(e,t,n,r,o){var a=t.mode,i=e.child;e=i.sibling;var s={mode:"hidden",children:n};return 0==(2&a)&&t.child!==i?((n=t.child).childLanes=0,n.pendingProps=s,null!==(i=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):n=ql(i,s),null!==e?r=ql(e,r):(r=Vl(r,a,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,o.children,o.fallback,n),i=t.child,a=e.child.memoizedState,i.memoizedState=null===a?{baseLanes:n}:{baseLanes:a.baseLanes|n},i.childLanes=e.childLanes&~n,t.memoizedState=Yi,o):(n=function(e,t,n,r){var o=e.child;return e=o.sibling,n=ql(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,o.children,n),t.memoizedState=null,n))}function Gi(e,t,n,r){var o=e.mode,a=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==a?(a.childLanes=0,a.pendingProps=t):a=Kl(t,o,0,null),n=Vl(n,o,r,null),a.return=e,n.return=e,a.sibling=n,e.child=a,n}function Zi(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),oa(e.return,t)}function es(e,t,n,r,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o,i.lastEffect=a)}function ts(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(zi(e,t,r.children,n),0!=(2&(r=za.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Zi(e,n);else if(19===e.tag)Zi(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(co(za,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ja(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),es(t,!1,o,n,a,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ja(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}es(t,!0,n,null,a,t.lastEffect);break;case"together":es(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function ns(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),js|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=ql(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=ql(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function rs(e,t){if(!Ua)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function os(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return go(t.type)&&yo(),null;case 3:return Ra(),uo(ho),uo(po),$a(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Ka(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Fa(t);var a=Ia(Oa.current);if(n=t.type,null!==e&&null!=t.stateNode)Qi(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=Ia(Ba.current),Ka(t)){r=t.stateNode,n=t.type;var s=t.memoizedProps;switch(r[Xr]=t,r[Gr]=s,n){case"dialog":Br("cancel",r),Br("close",r);break;case"iframe":case"object":case"embed":Br("load",r);break;case"video":case"audio":for(e=0;e<Er.length;e++)Br(Er[e],r);break;case"source":Br("error",r);break;case"img":case"image":case"link":Br("error",r),Br("load",r);break;case"details":Br("toggle",r);break;case"input":ee(r,s),Br("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!s.multiple},Br("invalid",r);break;case"textarea":le(r,s),Br("invalid",r)}for(var u in ke(n,s),e=null,s)s.hasOwnProperty(u)&&(a=s[u],"children"===u?"string"==typeof a?r.textContent!==a&&(e=["children",a]):"number"==typeof a&&r.textContent!==""+a&&(e=["children",""+a]):l.hasOwnProperty(u)&&null!=a&&"onScroll"===u&&Br("scroll",r));switch(n){case"input":Y(r),re(r,s,!0);break;case"textarea":Y(r),ce(r);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(r.onclick=Mr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(u=9===a.nodeType?a:a.ownerDocument,e===de&&(e=fe(n)),e===de?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[Xr]=t,e[Gr]=r,Ji(e,t),t.stateNode=e,u=xe(n,r),n){case"dialog":Br("cancel",e),Br("close",e),a=r;break;case"iframe":case"object":case"embed":Br("load",e),a=r;break;case"video":case"audio":for(a=0;a<Er.length;a++)Br(Er[a],e);a=r;break;case"source":Br("error",e),a=r;break;case"img":case"image":case"link":Br("error",e),Br("load",e),a=r;break;case"details":Br("toggle",e),a=r;break;case"input":ee(e,r),a=Z(e,r),Br("invalid",e);break;case"option":a=ae(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=o({},r,{value:void 0}),Br("invalid",e);break;case"textarea":le(e,r),a=se(e,r),Br("invalid",e);break;default:a=r}ke(n,a);var c=a;for(s in c)if(c.hasOwnProperty(s)){var d=c[s];"style"===s?Ce(e,d):"dangerouslySetInnerHTML"===s?null!=(d=d?d.__html:void 0)&&Ae(e,d):"children"===s?"string"==typeof d?("textarea"!==n||""!==d)&&ge(e,d):"number"==typeof d&&ge(e,""+d):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?null!=d&&"onScroll"===s&&Br("scroll",e):null!=d&&v(e,s,d,u))}switch(n){case"input":Y(e),re(e,r,!1);break;case"textarea":Y(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+Q(r.value));break;case"select":e.multiple=!!r.multiple,null!=(s=r.value)?ie(e,!!r.multiple,s,!1):null!=r.defaultValue&&ie(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Mr)}Hr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)$i(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=Ia(Oa.current),Ia(Ba.current),Ka(t)?(r=t.stateNode,n=t.memoizedProps,r[Xr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Xr]=t,t.stateNode=r)}return null;case 13:return uo(za),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Ka(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&za.current)?0===Ls&&(Ls=3):(0!==Ls&&3!==Ls||(Ls=4),null===Ts||0==(134217727&js)&&0==(134217727&Ms)||ml(Ts,Is))),(r||n)&&(t.flags|=4),null);case 4:return Ra(),null===e&&Or(t.stateNode.containerInfo),null;case 10:return ra(t),null;case 19:if(uo(za),null===(r=t.memoizedState))return null;if(s=0!=(64&t.flags),null===(u=r.rendering))if(s)rs(r,!1);else{if(0!==Ls||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(u=ja(e))){for(t.flags|=64,rs(r,!1),null!==(s=u.updateQueue)&&(t.updateQueue=s,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(s=n).flags&=2,s.nextEffect=null,s.firstEffect=null,s.lastEffect=null,null===(u=s.alternate)?(s.childLanes=0,s.lanes=e,s.child=null,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=u.childLanes,s.lanes=u.lanes,s.child=u.child,s.memoizedProps=u.memoizedProps,s.memoizedState=u.memoizedState,s.updateQueue=u.updateQueue,s.type=u.type,e=u.dependencies,s.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return co(za,1&za.current|2),t.child}e=e.sibling}null!==r.tail&&qo()>qs&&(t.flags|=64,s=!0,rs(r,!1),t.lanes=33554432)}else{if(!s)if(null!==(e=ja(u))){if(t.flags|=64,s=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),rs(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate&&!Ua)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*qo()-r.renderingStartTime>qs&&1073741824!==n&&(t.flags|=64,s=!0,rs(r,!1),t.lanes=33554432);r.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=r.last)?n.sibling=u:t.child=u,r.last=u)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=qo(),n.sibling=null,t=za.current,co(za,s?1&t|2:1&t),n):null;case 23:case 24:return vl(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function as(e){switch(e.tag){case 1:go(e.type)&&yo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ra(),uo(ho),uo(po),$a(),0!=(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return Fa(e),null;case 13:return uo(za),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return uo(za),null;case 4:return Ra(),null;case 10:return ra(e),null;case 23:case 24:return vl(),null;default:return null}}function is(e,t){try{var n="",r=t;do{n+=K(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function ss(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Ji=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Qi=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Ia(Ba.current);var i,s=null;switch(n){case"input":a=Z(e,a),r=Z(e,r),s=[];break;case"option":a=ae(e,a),r=ae(e,r),s=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),s=[];break;case"textarea":a=se(e,a),r=se(e,r),s=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Mr)}for(d in ke(n,r),n=null,a)if(!r.hasOwnProperty(d)&&a.hasOwnProperty(d)&&null!=a[d])if("style"===d){var u=a[d];for(i in u)u.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==d&&"children"!==d&&"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&"autoFocus"!==d&&(l.hasOwnProperty(d)?s||(s=[]):(s=s||[]).push(d,null));for(d in r){var c=r[d];if(u=null!=a?a[d]:void 0,r.hasOwnProperty(d)&&c!==u&&(null!=c||null!=u))if("style"===d)if(u){for(i in u)!u.hasOwnProperty(i)||c&&c.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in c)c.hasOwnProperty(i)&&u[i]!==c[i]&&(n||(n={}),n[i]=c[i])}else n||(s||(s=[]),s.push(d,n)),n=c;else"dangerouslySetInnerHTML"===d?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(s=s||[]).push(d,c)):"children"===d?"string"!=typeof c&&"number"!=typeof c||(s=s||[]).push(d,""+c):"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&(l.hasOwnProperty(d)?(null!=c&&"onScroll"===d&&Br("scroll",e),s||u===c||(s=[])):"object"==typeof c&&null!==c&&c.$$typeof===L?c.toString():(s=s||[]).push(d,c))}n&&(s=s||[]).push("style",n);var d=s;(t.updateQueue=d)&&(t.flags|=4)}},$i=function(e,t,n,r){n!==r&&(t.flags|=4)};var ls="function"==typeof WeakMap?WeakMap:Map;function us(e,t,n){(n=ca(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Js||(Js=!0,Qs=r),ss(0,t)},n}function cs(e,t,n){(n=ca(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return ss(0,t),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===$s?$s=new Set([this]):$s.add(this),ss(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var ds="function"==typeof WeakSet?WeakSet:Set;function fs(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){zl(e,t)}else t.current=null}function ps(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Xo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Kr(t.stateNode.containerInfo))}throw Error(i(163))}function hs(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Rl(n,e),Pl(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Xo(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&ha(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:case 1:e=n.child.stateNode}ha(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Hr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Ct(n)))))}throw Error(i(163))}function ms(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=ve("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function As(e,t){if(xo&&"function"==typeof xo.onCommitFiberUnmount)try{xo.onCommitFiberUnmount(ko,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Rl(t,n);else{r=t;try{o()}catch(e){zl(r,e)}}n=n.next}while(n!==e)}break;case 1:if(fs(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){zl(t,e)}break;case 5:fs(t);break;case 4:ws(e,t)}}function gs(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function ys(e){return 5===e.tag||3===e.tag||4===e.tag}function bs(e){e:{for(var t=e.return;null!==t;){if(ys(t))break e;t=t.return}throw Error(i(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.flags&&(ge(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ys(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?vs(e,n,t):Cs(e,n,t)}function vs(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Mr));else if(4!==r&&null!==(e=e.child))for(vs(e,t,n),e=e.sibling;null!==e;)vs(e,t,n),e=e.sibling}function Cs(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(Cs(e,t,n),e=e.sibling;null!==e;)Cs(e,t,n),e=e.sibling}function ws(e,t){for(var n,r,o=t,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(i(160));switch(n=a.stateNode,a.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var s=e,l=o,u=l;;)if(As(s,u),null!==u.child&&4!==u.tag)u.child.return=u,u=u.child;else{if(u===l)break e;for(;null===u.sibling;){if(null===u.return||u.return===l)break e;u=u.return}u.sibling.return=u.return,u=u.sibling}r?(s=n,l=o.stateNode,8===s.nodeType?s.parentNode.removeChild(l):s.removeChild(l)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(As(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function ks(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[Gr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),xe(e,o),t=xe(e,r),o=0;o<a.length;o+=2){var s=a[o],l=a[o+1];"style"===s?Ce(n,l):"dangerouslySetInnerHTML"===s?Ae(n,l):"children"===s?ge(n,l):v(n,s,l,t)}switch(e){case"input":ne(n,r);break;case"textarea":ue(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(a=r.value)?ie(n,!!r.multiple,a,!1):e!==!!r.multiple&&(null!=r.defaultValue?ie(n,!!r.multiple,r.defaultValue,!0):ie(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,Ct(n.containerInfo)));case 13:return null!==t.memoizedState&&(Hs=qo(),ms(t.child,!0)),void xs(t);case 19:return void xs(t);case 23:case 24:return void ms(t,null!==t.memoizedState)}throw Error(i(163))}function xs(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ds),t.forEach((function(t){var r=Ml.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function Es(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var Ss=Math.ceil,Ns=C.ReactCurrentDispatcher,_s=C.ReactCurrentOwner,Bs=0,Ts=null,Os=null,Is=0,Ps=0,Rs=lo(0),Ls=0,Fs=null,zs=0,js=0,Ms=0,Ds=0,Us=null,Hs=0,qs=1/0;function Ws(){qs=qo()+500}var Vs,Ks=null,Js=!1,Qs=null,$s=null,Ys=!1,Xs=null,Gs=90,Zs=[],el=[],tl=null,nl=0,rl=null,ol=-1,al=0,il=0,sl=null,ll=!1;function ul(){return 0!=(48&Bs)?qo():-1!==ol?ol:ol=qo()}function cl(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Wo()?1:2;if(0===al&&(al=zs),0!==Yo.transition){0!==il&&(il=null!==Us?Us.pendingLanes:0),e=al;var t=4186112&~il;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Wo(),e=Mt(0!=(4&Bs)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),al)}function dl(e,t,n){if(50<nl)throw nl=0,rl=null,Error(i(185));if(null===(e=fl(e,t)))return null;Ht(e,t,n),e===Ts&&(Ms|=t,4===Ls&&ml(e,Is));var r=Wo();1===t?0!=(8&Bs)&&0==(48&Bs)?Al(e):(pl(e,n),0===Bs&&(Ws(),Qo())):(0==(4&Bs)||98!==r&&99!==r||(null===tl?tl=new Set([e]):tl.add(e)),pl(e,n)),Us=e}function fl(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function pl(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,a=e.expirationTimes,s=e.pendingLanes;0<s;){var l=31-qt(s),u=1<<l,c=a[l];if(-1===c){if(0==(u&r)||0!=(u&o)){c=t,Ft(u);var d=Lt;a[l]=10<=d?c+250:6<=d?c+5e3:-1}}else c<=t&&(e.expiredLanes|=u);s&=~u}if(r=zt(e,e===Ts?Is:0),t=Lt,0===r)null!==n&&(n!==zo&&No(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==zo&&No(n)}15===t?(n=Al.bind(null,e),null===Mo?(Mo=[n],Do=So(Io,$o)):Mo.push(n),n=zo):14===t?n=Jo(99,Al.bind(null,e)):(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),n=Jo(n,hl.bind(null,e))),e.callbackPriority=t,e.callbackNode=n}}function hl(e){if(ol=-1,il=al=0,0!=(48&Bs))throw Error(i(327));var t=e.callbackNode;if(Il()&&e.callbackNode!==t)return null;var n=zt(e,e===Ts?Is:0);if(0===n)return null;var r=n,o=Bs;Bs|=16;var a=kl();for(Ts===e&&Is===r||(Ws(),Cl(e,r));;)try{Sl();break}catch(t){wl(e,t)}if(na(),Ns.current=a,Bs=o,null!==Os?r=0:(Ts=null,Is=0,r=Ls),0!=(zs&Ms))Cl(e,0);else if(0!==r){if(2===r&&(Bs|=64,e.hydrate&&(e.hydrate=!1,Kr(e.containerInfo)),0!==(n=jt(e))&&(r=xl(e,n))),1===r)throw t=Fs,Cl(e,0),ml(e,n),pl(e,qo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(i(345));case 2:case 5:Bl(e);break;case 3:if(ml(e,n),(62914560&n)===n&&10<(r=Hs+500-qo())){if(0!==zt(e,0))break;if(((o=e.suspendedLanes)&n)!==n){ul(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Wr(Bl.bind(null,e),r);break}Bl(e);break;case 4:if(ml(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var s=31-qt(n);a=1<<s,(s=r[s])>o&&(o=s),n&=~a}if(n=o,10<(n=(120>(n=qo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Ss(n/1960))-n)){e.timeoutHandle=Wr(Bl.bind(null,e),n);break}Bl(e);break;default:throw Error(i(329))}}return pl(e,qo()),e.callbackNode===t?hl.bind(null,e):null}function ml(e,t){for(t&=~Ds,t&=~Ms,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-qt(t),r=1<<n;e[n]=-1,t&=~r}}function Al(e){if(0!=(48&Bs))throw Error(i(327));if(Il(),e===Ts&&0!=(e.expiredLanes&Is)){var t=Is,n=xl(e,t);0!=(zs&Ms)&&(n=xl(e,t=zt(e,t)))}else n=xl(e,t=zt(e,0));if(0!==e.tag&&2===n&&(Bs|=64,e.hydrate&&(e.hydrate=!1,Kr(e.containerInfo)),0!==(t=jt(e))&&(n=xl(e,t))),1===n)throw n=Fs,Cl(e,0),ml(e,t),pl(e,qo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Bl(e),pl(e,qo()),null}function gl(e,t){var n=Bs;Bs|=1;try{return e(t)}finally{0===(Bs=n)&&(Ws(),Qo())}}function yl(e,t){var n=Bs;Bs&=-2,Bs|=8;try{return e(t)}finally{0===(Bs=n)&&(Ws(),Qo())}}function bl(e,t){co(Rs,Ps),Ps|=t,zs|=t}function vl(){Ps=Rs.current,uo(Rs)}function Cl(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Vr(n)),null!==Os)for(n=Os.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&yo();break;case 3:Ra(),uo(ho),uo(po),$a();break;case 5:Fa(r);break;case 4:Ra();break;case 13:case 19:uo(za);break;case 10:ra(r);break;case 23:case 24:vl()}n=n.return}Ts=e,Os=ql(e.current,null),Is=Ps=zs=t,Ls=0,Fs=null,Ds=Ms=js=0}function wl(e,t){for(;;){var n=Os;try{if(na(),Ya.current=Oi,ni){for(var r=Za.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}ni=!1}if(Ga=0,ti=ei=Za=null,ri=!1,_s.current=null,null===n||null===n.return){Ls=1,Fs=t,Os=null;break}e:{var a=e,i=n.return,s=n,l=t;if(t=Is,s.flags|=2048,s.firstEffect=s.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var u=l;if(0==(2&s.mode)){var c=s.alternate;c?(s.updateQueue=c.updateQueue,s.memoizedState=c.memoizedState,s.lanes=c.lanes):(s.updateQueue=null,s.memoizedState=null)}var d=0!=(1&za.current),f=i;do{var p;if(p=13===f.tag){var h=f.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var m=f.memoizedProps;p=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!d)}}if(p){var A=f.updateQueue;if(null===A){var g=new Set;g.add(u),f.updateQueue=g}else A.add(u);if(0==(2&f.mode)){if(f.flags|=64,s.flags|=16384,s.flags&=-2981,1===s.tag)if(null===s.alternate)s.tag=17;else{var y=ca(-1,1);y.tag=2,da(s,y)}s.lanes|=1;break e}l=void 0,s=t;var b=a.pingCache;if(null===b?(b=a.pingCache=new ls,l=new Set,b.set(u,l)):void 0===(l=b.get(u))&&(l=new Set,b.set(u,l)),!l.has(s)){l.add(s);var v=jl.bind(null,a,u,s);u.then(v,v)}f.flags|=4096,f.lanes=t;break e}f=f.return}while(null!==f);l=Error((J(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Ls&&(Ls=2),l=is(l,s),f=i;do{switch(f.tag){case 3:a=l,f.flags|=4096,t&=-t,f.lanes|=t,fa(f,us(0,a,t));break e;case 1:a=l;var C=f.type,w=f.stateNode;if(0==(64&f.flags)&&("function"==typeof C.getDerivedStateFromError||null!==w&&"function"==typeof w.componentDidCatch&&(null===$s||!$s.has(w)))){f.flags|=4096,t&=-t,f.lanes|=t,fa(f,cs(f,a,t));break e}}f=f.return}while(null!==f)}_l(n)}catch(e){t=e,Os===n&&null!==n&&(Os=n=n.return);continue}break}}function kl(){var e=Ns.current;return Ns.current=Oi,null===e?Oi:e}function xl(e,t){var n=Bs;Bs|=16;var r=kl();for(Ts===e&&Is===t||Cl(e,t);;)try{El();break}catch(t){wl(e,t)}if(na(),Bs=n,Ns.current=r,null!==Os)throw Error(i(261));return Ts=null,Is=0,Ls}function El(){for(;null!==Os;)Nl(Os)}function Sl(){for(;null!==Os&&!_o();)Nl(Os)}function Nl(e){var t=Vs(e.alternate,e,Ps);e.memoizedProps=e.pendingProps,null===t?_l(e):Os=t,_s.current=null}function _l(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=os(n,t,Ps)))return void(Os=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Ps)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=as(t)))return n.flags&=2047,void(Os=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Os=t);Os=t=e}while(null!==t);0===Ls&&(Ls=5)}function Bl(e){var t=Wo();return Ko(99,Tl.bind(null,e,t)),null}function Tl(e,t){do{Il()}while(null!==Xs);if(0!=(48&Bs))throw Error(i(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,a=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var s=e.eventTimes,l=e.expirationTimes;0<a;){var u=31-qt(a),c=1<<u;o[u]=0,s[u]=-1,l[u]=-1,a&=~c}if(null!==tl&&0==(24&r)&&tl.has(e)&&tl.delete(e),e===Ts&&(Os=Ts=null,Is=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Bs,Bs|=32,_s.current=null,Dr=Qt,Ar(s=mr())){if("selectionStart"in s)l={start:s.selectionStart,end:s.selectionEnd};else e:if(l=(l=s.ownerDocument)&&l.defaultView||window,(c=l.getSelection&&l.getSelection())&&0!==c.rangeCount){l=c.anchorNode,a=c.anchorOffset,u=c.focusNode,c=c.focusOffset;try{l.nodeType,u.nodeType}catch(e){l=null;break e}var d=0,f=-1,p=-1,h=0,m=0,A=s,g=null;t:for(;;){for(var y;A!==l||0!==a&&3!==A.nodeType||(f=d+a),A!==u||0!==c&&3!==A.nodeType||(p=d+c),3===A.nodeType&&(d+=A.nodeValue.length),null!==(y=A.firstChild);)g=A,A=y;for(;;){if(A===s)break t;if(g===l&&++h===a&&(f=d),g===u&&++m===c&&(p=d),null!==(y=A.nextSibling))break;g=(A=g).parentNode}A=y}l=-1===f||-1===p?null:{start:f,end:p}}else l=null;l=l||{start:0,end:0}}else l=null;Ur={focusedElem:s,selectionRange:l},Qt=!1,sl=null,ll=!1,Ks=r;do{try{Ol()}catch(e){if(null===Ks)throw Error(i(330));zl(Ks,e),Ks=Ks.nextEffect}}while(null!==Ks);sl=null,Ks=r;do{try{for(s=e;null!==Ks;){var b=Ks.flags;if(16&b&&ge(Ks.stateNode,""),128&b){var v=Ks.alternate;if(null!==v){var C=v.ref;null!==C&&("function"==typeof C?C(null):C.current=null)}}switch(1038&b){case 2:bs(Ks),Ks.flags&=-3;break;case 6:bs(Ks),Ks.flags&=-3,ks(Ks.alternate,Ks);break;case 1024:Ks.flags&=-1025;break;case 1028:Ks.flags&=-1025,ks(Ks.alternate,Ks);break;case 4:ks(Ks.alternate,Ks);break;case 8:ws(s,l=Ks);var w=l.alternate;gs(l),null!==w&&gs(w)}Ks=Ks.nextEffect}}catch(e){if(null===Ks)throw Error(i(330));zl(Ks,e),Ks=Ks.nextEffect}}while(null!==Ks);if(C=Ur,v=mr(),b=C.focusedElem,s=C.selectionRange,v!==b&&b&&b.ownerDocument&&hr(b.ownerDocument.documentElement,b)){null!==s&&Ar(b)&&(v=s.start,void 0===(C=s.end)&&(C=v),"selectionStart"in b?(b.selectionStart=v,b.selectionEnd=Math.min(C,b.value.length)):(C=(v=b.ownerDocument||document)&&v.defaultView||window).getSelection&&(C=C.getSelection(),l=b.textContent.length,w=Math.min(s.start,l),s=void 0===s.end?w:Math.min(s.end,l),!C.extend&&w>s&&(l=s,s=w,w=l),l=pr(b,w),a=pr(b,s),l&&a&&(1!==C.rangeCount||C.anchorNode!==l.node||C.anchorOffset!==l.offset||C.focusNode!==a.node||C.focusOffset!==a.offset)&&((v=v.createRange()).setStart(l.node,l.offset),C.removeAllRanges(),w>s?(C.addRange(v),C.extend(a.node,a.offset)):(v.setEnd(a.node,a.offset),C.addRange(v))))),v=[];for(C=b;C=C.parentNode;)1===C.nodeType&&v.push({element:C,left:C.scrollLeft,top:C.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<v.length;b++)(C=v[b]).element.scrollLeft=C.left,C.element.scrollTop=C.top}Qt=!!Dr,Ur=Dr=null,e.current=n,Ks=r;do{try{for(b=e;null!==Ks;){var k=Ks.flags;if(36&k&&hs(b,Ks.alternate,Ks),128&k){v=void 0;var x=Ks.ref;if(null!==x){var E=Ks.stateNode;Ks.tag,v=E,"function"==typeof x?x(v):x.current=v}}Ks=Ks.nextEffect}}catch(e){if(null===Ks)throw Error(i(330));zl(Ks,e),Ks=Ks.nextEffect}}while(null!==Ks);Ks=null,jo(),Bs=o}else e.current=n;if(Ys)Ys=!1,Xs=e,Gs=t;else for(Ks=r;null!==Ks;)t=Ks.nextEffect,Ks.nextEffect=null,8&Ks.flags&&((k=Ks).sibling=null,k.stateNode=null),Ks=t;if(0===(r=e.pendingLanes)&&($s=null),1===r?e===rl?nl++:(nl=0,rl=e):nl=0,n=n.stateNode,xo&&"function"==typeof xo.onCommitFiberRoot)try{xo.onCommitFiberRoot(ko,n,void 0,64==(64&n.current.flags))}catch(e){}if(pl(e,qo()),Js)throw Js=!1,e=Qs,Qs=null,e;return 0!=(8&Bs)||Qo(),null}function Ol(){for(;null!==Ks;){var e=Ks.alternate;ll||null===sl||(0!=(8&Ks.flags)?Ze(Ks,sl)&&(ll=!0):13===Ks.tag&&Es(e,Ks)&&Ze(Ks,sl)&&(ll=!0));var t=Ks.flags;0!=(256&t)&&ps(e,Ks),0==(512&t)||Ys||(Ys=!0,Jo(97,(function(){return Il(),null}))),Ks=Ks.nextEffect}}function Il(){if(90!==Gs){var e=97<Gs?97:Gs;return Gs=90,Ko(e,Ll)}return!1}function Pl(e,t){Zs.push(t,e),Ys||(Ys=!0,Jo(97,(function(){return Il(),null})))}function Rl(e,t){el.push(t,e),Ys||(Ys=!0,Jo(97,(function(){return Il(),null})))}function Ll(){if(null===Xs)return!1;var e=Xs;if(Xs=null,0!=(48&Bs))throw Error(i(331));var t=Bs;Bs|=32;var n=el;el=[];for(var r=0;r<n.length;r+=2){var o=n[r],a=n[r+1],s=o.destroy;if(o.destroy=void 0,"function"==typeof s)try{s()}catch(e){if(null===a)throw Error(i(330));zl(a,e)}}for(n=Zs,Zs=[],r=0;r<n.length;r+=2){o=n[r],a=n[r+1];try{var l=o.create;o.destroy=l()}catch(e){if(null===a)throw Error(i(330));zl(a,e)}}for(l=e.current.firstEffect;null!==l;)e=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=e;return Bs=t,Qo(),!0}function Fl(e,t,n){da(e,t=us(0,t=is(n,t),1)),t=ul(),null!==(e=fl(e,1))&&(Ht(e,1,t),pl(e,t))}function zl(e,t){if(3===e.tag)Fl(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Fl(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===$s||!$s.has(r))){var o=cs(n,e=is(t,e),1);if(da(n,o),o=ul(),null!==(n=fl(n,1)))Ht(n,1,o),pl(n,o);else if("function"==typeof r.componentDidCatch&&(null===$s||!$s.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function jl(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=ul(),e.pingedLanes|=e.suspendedLanes&n,Ts===e&&(Is&n)===n&&(4===Ls||3===Ls&&(62914560&Is)===Is&&500>qo()-Hs?Cl(e,0):Ds|=n),pl(e,t)}function Ml(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Wo()?1:2:(0===al&&(al=zs),0===(t=Dt(62914560&~al))&&(t=4194304))),n=ul(),null!==(e=fl(e,t))&&(Ht(e,t,n),pl(e,n))}function Dl(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Ul(e,t,n,r){return new Dl(e,t,n,r)}function Hl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function ql(e,t){var n=e.alternate;return null===n?((n=Ul(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Wl(e,t,n,r,o,a){var s=2;if(r=e,"function"==typeof e)Hl(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case x:return Vl(n.children,o,a,t);case F:s=8,o|=16;break;case E:s=8,o|=1;break;case S:return(e=Ul(12,n,t,8|o)).elementType=S,e.type=S,e.lanes=a,e;case T:return(e=Ul(13,n,t,o)).type=T,e.elementType=T,e.lanes=a,e;case O:return(e=Ul(19,n,t,o)).elementType=O,e.lanes=a,e;case z:return Kl(n,o,a,t);case j:return(e=Ul(24,n,t,o)).elementType=j,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case N:s=10;break e;case _:s=9;break e;case B:s=11;break e;case I:s=14;break e;case P:s=16,r=null;break e;case R:s=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Ul(s,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function Vl(e,t,n,r){return(e=Ul(7,e,r,t)).lanes=n,e}function Kl(e,t,n,r){return(e=Ul(23,e,r,t)).elementType=z,e.lanes=n,e}function Jl(e,t,n){return(e=Ul(6,e,null,t)).lanes=n,e}function Ql(e,t,n){return(t=Ul(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function $l(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Ut(0),this.expirationTimes=Ut(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ut(0),this.mutableSourceEagerHydrationData=null}function Yl(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Xl(e,t,n,r){var o=t.current,a=ul(),s=cl(o);e:if(n){t:{if($e(n=n._reactInternals)!==n||1!==n.tag)throw Error(i(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(go(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(i(171))}if(1===n.tag){var u=n.type;if(go(u)){n=vo(n,u,l);break e}}n=l}else n=fo;return null===t.context?t.context=n:t.pendingContext=n,(t=ca(a,s)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),da(o,t),dl(o,s,a),s}function Gl(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Zl(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function eu(e,t){Zl(e,t),(e=e.alternate)&&Zl(e,t)}function tu(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new $l(e,t,null!=n&&!0===n.hydrate),t=Ul(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,la(t),e[Zr]=n.current,Or(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function nu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function ru(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var s=o;o=function(){var e=Gl(i);s.call(e)}}Xl(t,i,e,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new tu(e,0,t?{hydrate:!0}:void 0)}(n,r),i=a._internalRoot,"function"==typeof o){var l=o;o=function(){var e=Gl(i);l.call(e)}}yl((function(){Xl(t,i,e,o)}))}return Gl(i)}function ou(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!nu(t))throw Error(i(200));return Yl(e,t,null,n)}Vs=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||ho.current)Fi=!0;else{if(0==(n&r)){switch(Fi=!1,t.tag){case 3:Ki(t),Ja();break;case 5:La(t);break;case 1:go(t.type)&&Co(t);break;case 4:Pa(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;co(Go,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Xi(e,t,n):(co(za,1&za.current),null!==(t=ns(e,t,n))?t.sibling:null);co(za,1&za.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return ts(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),co(za,za.current),r)break;return null;case 23:case 24:return t.lanes=0,Ui(e,t,n)}return ns(e,t,n)}Fi=0!=(16384&e.flags)}else Fi=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=Ao(t,po.current),aa(t,n),o=ii(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,go(r)){var a=!0;Co(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,la(t);var s=r.getDerivedStateFromProps;"function"==typeof s&&Aa(t,r,s,e),o.updater=ga,t.stateNode=o,o._reactInternals=t,Ca(t,r,e,n),t=Vi(null,t,r,!0,a,n)}else t.tag=0,zi(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(a=o._init)(o._payload),t.type=o,a=t.tag=function(e){if("function"==typeof e)return Hl(e)?1:0;if(null!=e){if((e=e.$$typeof)===B)return 11;if(e===I)return 14}return 2}(o),e=Xo(o,e),a){case 0:t=qi(null,t,o,e,n);break e;case 1:t=Wi(null,t,o,e,n);break e;case 11:t=ji(null,t,o,e,n);break e;case 14:t=Mi(null,t,o,Xo(o.type,e),r,n);break e}throw Error(i(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,qi(e,t,r,o=t.elementType===r?o:Xo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Wi(e,t,r,o=t.elementType===r?o:Xo(r,o),n);case 3:if(Ki(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,ua(e,t),pa(t,r,null,n),(r=t.memoizedState.element)===o)Ja(),t=ns(e,t,n);else{if((a=(o=t.stateNode).hydrate)&&(Da=Jr(t.stateNode.containerInfo.firstChild),Ma=t,a=Ua=!0),a){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(a=e[o])._workInProgressVersionPrimary=e[o+1],Qa.push(a);for(n=Na(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else zi(e,t,r,n),Ja();t=t.child}return t;case 5:return La(t),null===e&&Wa(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,s=o.children,qr(r,o)?s=null:null!==a&&qr(r,a)&&(t.flags|=16),Hi(e,t),zi(e,t,s,n),t.child;case 6:return null===e&&Wa(t),null;case 13:return Xi(e,t,n);case 4:return Pa(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Sa(t,null,r,n):zi(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,ji(e,t,r,o=t.elementType===r?o:Xo(r,o),n);case 7:return zi(e,t,t.pendingProps,n),t.child;case 8:case 12:return zi(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,s=t.memoizedProps,a=o.value;var l=t.type._context;if(co(Go,l._currentValue),l._currentValue=a,null!==s)if(l=s.value,0==(a=ur(l,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,a):1073741823))){if(s.children===o.children&&!ho.current){t=ns(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var u=l.dependencies;if(null!==u){s=l.child;for(var c=u.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&a)){1===l.tag&&((c=ca(-1,n&-n)).tag=2,da(l,c)),l.lanes|=n,null!==(c=l.alternate)&&(c.lanes|=n),oa(l.return,n),u.lanes|=n;break}c=c.next}}else s=10===l.tag&&l.type===t.type?null:l.child;if(null!==s)s.return=l;else for(s=l;null!==s;){if(s===t){s=null;break}if(null!==(l=s.sibling)){l.return=s.return,s=l;break}s=s.return}l=s}zi(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(a=t.pendingProps).children,aa(t,n),r=r(o=ia(o,a.unstable_observedBits)),t.flags|=1,zi(e,t,r,n),t.child;case 14:return a=Xo(o=t.type,t.pendingProps),Mi(e,t,o,a=Xo(o.type,a),r,n);case 15:return Di(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Xo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,go(r)?(e=!0,Co(t)):e=!1,aa(t,n),ba(t,r,o),Ca(t,r,o,n),Vi(null,t,r,!0,e,n);case 19:return ts(e,t,n);case 23:case 24:return Ui(e,t,n)}throw Error(i(156,t.tag))},tu.prototype.render=function(e){Xl(e,this._internalRoot,null,null)},tu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Xl(null,e,null,(function(){t[Zr]=null}))},et=function(e){13===e.tag&&(dl(e,4,ul()),eu(e,4))},tt=function(e){13===e.tag&&(dl(e,67108864,ul()),eu(e,67108864))},nt=function(e){if(13===e.tag){var t=ul(),n=cl(e);dl(e,n,t),eu(e,n)}},rt=function(e,t){return t()},Se=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=oo(r);if(!o)throw Error(i(90));X(r),ne(r,o)}}}break;case"textarea":ue(e,n);break;case"select":null!=(t=n.value)&&ie(e,!!n.multiple,t,!1)}},Ie=gl,Pe=function(e,t,n,r,o){var a=Bs;Bs|=4;try{return Ko(98,e.bind(null,t,n,r,o))}finally{0===(Bs=a)&&(Ws(),Qo())}},Re=function(){0==(49&Bs)&&(function(){if(null!==tl){var e=tl;tl=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,pl(e,qo())}))}Qo()}(),Il())},Le=function(e,t){var n=Bs;Bs|=2;try{return e(t)}finally{0===(Bs=n)&&(Ws(),Qo())}};var au={Events:[no,ro,oo,Te,Oe,Il,{current:!1}]},iu={findFiberByHostInstance:to,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},su={bundleType:iu.bundleType,version:iu.version,rendererPackageName:iu.rendererPackageName,rendererConfig:iu.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:C.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ge(e))?null:e.stateNode},findFiberByHostInstance:iu.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var lu=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!lu.isDisabled&&lu.supportsFiber)try{ko=lu.inject(su),xo=lu}catch(me){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=au,t.createPortal=ou,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return null===(e=Ge(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Bs;if(0!=(48&n))return e(t);Bs|=1;try{if(e)return Ko(99,e.bind(null,t))}finally{Bs=n,Qo()}},t.hydrate=function(e,t,n){if(!nu(t))throw Error(i(200));return ru(null,e,t,!0,n)},t.render=function(e,t,n){if(!nu(t))throw Error(i(200));return ru(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!nu(e))throw Error(i(40));return!!e._reactRootContainer&&(yl((function(){ru(null,null,e,!1,(function(){e._reactRootContainer=null,e[Zr]=null}))})),!0)},t.unstable_batchedUpdates=gl,t.unstable_createPortal=function(e,t){return ou(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!nu(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return ru(e,t,n,!1,r)},t.version="17.0.2"},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},408:(e,t,n)=>{"use strict";var r=n(418),o=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,s=60110,l=60112;t.Suspense=60113;var u=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var d=Symbol.for;o=d("react.element"),a=d("react.portal"),t.Fragment=d("react.fragment"),t.StrictMode=d("react.strict_mode"),t.Profiler=d("react.profiler"),i=d("react.provider"),s=d("react.context"),l=d("react.forward_ref"),t.Suspense=d("react.suspense"),u=d("react.memo"),c=d("react.lazy")}var f="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function A(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function g(){}function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}A.prototype.isReactComponent={},A.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},A.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=A.prototype;var b=y.prototype=new g;b.constructor=y,r(b,A.prototype),b.isPureReactComponent=!0;var v={current:null},C=Object.prototype.hasOwnProperty,w={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,n){var r,a={},i=null,s=null;if(null!=t)for(r in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(i=""+t.key),t)C.call(t,r)&&!w.hasOwnProperty(r)&&(a[r]=t[r]);var l=arguments.length-2;if(1===l)a.children=n;else if(1<l){for(var u=Array(l),c=0;c<l;c++)u[c]=arguments[c+2];a.children=u}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===a[r]&&(a[r]=l[r]);return{$$typeof:o,type:e,key:i,ref:s,props:a,_owner:v.current}}function x(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var E=/\/+/g;function S(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function N(e,t,n,r,i){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case o:case a:l=!0}}if(l)return i=i(l=e),e=""===r?"."+S(l,0):r,Array.isArray(i)?(n="",null!=e&&(n=e.replace(E,"$&/")+"/"),N(i,t,n,"",(function(e){return e}))):null!=i&&(x(i)&&(i=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,n+(!i.key||l&&l.key===i.key?"":(""+i.key).replace(E,"$&/")+"/")+e)),t.push(i)),1;if(l=0,r=""===r?".":r+":",Array.isArray(e))for(var u=0;u<e.length;u++){var c=r+S(s=e[u],u);l+=N(s,t,n,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(s=e.next()).done;)l+=N(s=s.value,t,n,c=r+S(s,u++),i);else if("object"===s)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return l}function _(e,t,n){if(null==e)return e;var r=[],o=0;return N(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function B(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var T={current:null};function O(){var e=T.current;if(null===e)throw Error(p(321));return e}var I={ReactCurrentDispatcher:T,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:v,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:_,forEach:function(e,t,n){_(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return _(e,(function(){t++})),t},toArray:function(e){return _(e,(function(e){return e}))||[]},only:function(e){if(!x(e))throw Error(p(143));return e}},t.Component=A,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=I,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var a=r({},e.props),i=e.key,s=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,l=v.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(c in t)C.call(t,c)&&!w.hasOwnProperty(c)&&(a[c]=void 0===t[c]&&void 0!==u?u[c]:t[c])}var c=arguments.length-2;if(1===c)a.children=n;else if(1<c){u=Array(c);for(var d=0;d<c;d++)u[d]=arguments[d+2];a.children=u}return{$$typeof:o,type:e.type,key:i,ref:s,props:a,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:s,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:l,render:e}},t.isValidElement=x,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:B}},t.memo=function(e,t){return{$$typeof:u,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return O().useCallback(e,t)},t.useContext=function(e,t){return O().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return O().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return O().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return O().useLayoutEffect(e,t)},t.useMemo=function(e,t){return O().useMemo(e,t)},t.useReducer=function(e,t,n){return O().useReducer(e,t,n)},t.useRef=function(e){return O().useRef(e)},t.useState=function(e){return O().useState(e)},t.version="17.0.2"},294:(e,t,n)=>{"use strict";e.exports=n(408)},53:(e,t)=>{"use strict";var n,r,o,a;if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var s=Date,l=s.now();t.unstable_now=function(){return s.now()-l}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,c=null,d=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(d,0),e}};n=function(e){null!==u?setTimeout(n,0,e):(u=e,setTimeout(d,0))},r=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},a=t.unstable_forceFrameRate=function(){}}else{var f=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var m=!1,A=null,g=-1,y=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},a=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<e?Math.floor(1e3/e):5};var v=new MessageChannel,C=v.port2;v.port1.onmessage=function(){if(null!==A){var e=t.unstable_now();b=e+y;try{A(!0,e)?C.postMessage(null):(m=!1,A=null)}catch(e){throw C.postMessage(null),e}}else m=!1},n=function(e){A=e,m||(m=!0,C.postMessage(null))},r=function(e,n){g=f((function(){e(t.unstable_now())}),n)},o=function(){p(g),g=-1}}function w(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<E(o,t)))break e;e[r]=t,e[n]=o,n=r}}function k(e){return void 0===(e=e[0])?null:e}function x(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],s=a+1,l=e[s];if(void 0!==i&&0>E(i,n))void 0!==l&&0>E(l,i)?(e[r]=l,e[s]=n,r=s):(e[r]=i,e[a]=n,r=a);else{if(!(void 0!==l&&0>E(l,n)))break e;e[r]=l,e[s]=n,r=s}}}return t}return null}function E(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var S=[],N=[],_=1,B=null,T=3,O=!1,I=!1,P=!1;function R(e){for(var t=k(N);null!==t;){if(null===t.callback)x(N);else{if(!(t.startTime<=e))break;x(N),t.sortIndex=t.expirationTime,w(S,t)}t=k(N)}}function L(e){if(P=!1,R(e),!I)if(null!==k(S))I=!0,n(F);else{var t=k(N);null!==t&&r(L,t.startTime-e)}}function F(e,n){I=!1,P&&(P=!1,o()),O=!0;var a=T;try{for(R(n),B=k(S);null!==B&&(!(B.expirationTime>n)||e&&!t.unstable_shouldYield());){var i=B.callback;if("function"==typeof i){B.callback=null,T=B.priorityLevel;var s=i(B.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?B.callback=s:B===k(S)&&x(S),R(n)}else x(S);B=k(S)}if(null!==B)var l=!0;else{var u=k(N);null!==u&&r(L,u.startTime-n),l=!1}return l}finally{B=null,T=a,O=!1}}var z=a;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){I||O||(I=!0,n(F))},t.unstable_getCurrentPriorityLevel=function(){return T},t.unstable_getFirstCallbackNode=function(){return k(S)},t.unstable_next=function(e){switch(T){case 1:case 2:case 3:var t=3;break;default:t=T}var n=T;T=t;try{return e()}finally{T=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=z,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=T;T=e;try{return t()}finally{T=n}},t.unstable_scheduleCallback=function(e,a,i){var s=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?s+i:s,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:_++,callback:a,priorityLevel:e,startTime:i,expirationTime:l=i+l,sortIndex:-1},i>s?(e.sortIndex=i,w(N,e),null===k(S)&&e===k(N)&&(P?o():P=!0,r(L,i-s))):(e.sortIndex=l,w(S,e),I||O||(I=!0,n(F))),e},t.unstable_wrapCallback=function(e){var t=T;return function(){var n=T;T=t;try{return e.apply(this,arguments)}finally{T=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)},379:(e,t,n)=>{"use strict";var r,o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function i(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function s(e,t){for(var n={},r=[],o=0;o<e.length;o++){var s=e[o],l=t.base?s[0]+t.base:s[0],u=n[l]||0,c="".concat(l," ").concat(u);n[l]=u+1;var d=i(c),f={css:s[1],media:s[2],sourceMap:s[3]};-1!==d?(a[d].references++,a[d].updater(f)):a.push({identifier:c,updater:m(f,t),references:1}),r.push(c)}return r}function l(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var a=n.nc;a&&(r.nonce=a)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var i=o(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var u,c=(u=[],function(e,t){return u[e]=t,u.filter(Boolean).join("\n")});function d(e,t,n,r){var o=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=c(t,o);else{var a=document.createTextNode(o),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(a,i[t]):e.appendChild(a)}}function f(e,t,n){var r=n.css,o=n.media,a=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,h=0;function m(e,t){var n,r,o;if(t.singleton){var a=h++;n=p||(p=l(t)),r=d.bind(null,n,a,!1),o=d.bind(null,n,a,!0)}else n=l(t),r=f.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r));var n=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var o=i(n[r]);a[o].references--}for(var l=s(e,t),u=0;u<n.length;u++){var c=i(n[u]);0===a[c].references&&(a[c].updater(),a.splice(c,1))}n=l}}}},281:e=>{"use strict";var t,n="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),r={},o=0,a=0;function i(e){var t="";do{t=n[e%64]+t,e=Math.floor(e/64)}while(e>0);return t}function s(){var e=i(+new Date);return e!==t?(o=0,t=e):e+"."+i(o++)}for(;a<64;a++)r[n[a]]=a;s.encode=i,s.decode=function(e){var t=0;for(a=0;a<e.length;a++)t=64*t+r[e.charAt(a)];return t},e.exports=s},593:e=>{"use strict";e.exports=JSON.parse('{"name":"axios","version":"0.21.4","description":"Promise based HTTP client for the browser and node.js","main":"index.js","scripts":{"test":"grunt test","start":"node ./sandbox/server.js","build":"NODE_ENV=production grunt build","preversion":"npm test","version":"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json","postversion":"git push && git push --tags","examples":"node ./examples/server.js","coveralls":"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","fix":"eslint --fix lib/**/*.js"},"repository":{"type":"git","url":"https://github.com/axios/axios.git"},"keywords":["xhr","http","ajax","promise","node"],"author":"Matt Zabriskie","license":"MIT","bugs":{"url":"https://github.com/axios/axios/issues"},"homepage":"https://axios-http.com","devDependencies":{"coveralls":"^3.0.0","es6-promise":"^4.2.4","grunt":"^1.3.0","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^23.0.0","grunt-karma":"^4.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^4.0.2","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1","karma":"^6.3.2","karma-chrome-launcher":"^3.1.0","karma-firefox-launcher":"^2.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^4.3.6","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.8","karma-webpack":"^4.0.2","load-grunt-tasks":"^3.5.2","minimist":"^1.2.0","mocha":"^8.2.1","sinon":"^4.5.0","terser-webpack-plugin":"^4.2.3","typescript":"^4.0.5","url-search-params":"^0.10.0","webpack":"^4.44.2","webpack-dev-server":"^3.11.0"},"browser":{"./lib/adapters/http.js":"./lib/adapters/xhr.js"},"jsdelivr":"dist/axios.min.js","unpkg":"dist/axios.min.js","typings":"./index.d.ts","dependencies":{"follow-redirects":"^1.14.0"},"bundlesize":[{"path":"./dist/axios.min.js","threshold":"5kB"}]}')}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e={};n.r(e),n.d(e,{Decoder:()=>Ae,Encoder:()=>me,PacketType:()=>he,protocol:()=>pe});var t=n(294),r=n(935),o=n(379),a=n.n(o),i=n(61);a()(i.Z,{insert:"head",singleton:!1}),i.Z.locals;const s=()=>t.createElement("div",{className:"topBar"},"Cryptoip",t.createElement("div",{className:"btns"},t.createElement("a",{className:"btn",onClick:()=>{electron.topBarApi.minimizeApp()}},"_"),t.createElement("a",{className:"btn",onClick:()=>{electron.topBarApi.maximizeApp()}},"▭"),t.createElement("a",{className:"btn",onClick:()=>{electron.topBarApi.quitApp()}},"×"))),l=()=>{var[e,n]=(0,t.useState)(electron.utilApi.createSentence()),[r,o]=(0,t.useState)(""),[a,i]=(0,t.useState)(""),[s,l]=(0,t.useState)("");return t.createElement("div",{className:"page register"},t.createElement("form",{className:"form",onSubmit:t=>(t=>{t.preventDefault(),""!=a.replaceAll(" ","")&&""!=s.replaceAll(" ","")&&""!=e.replaceAll(" ","")?a==s?e.replaceAll(" ","-").split("-").length<10?o("Pass sentence need to have minimum 10 words !"):(o(""),electron.configApi.writeConfigPassSentence(e.replaceAll(" ","-"),a),window.location.reload()):o("The two password does not match !"):o("Please fill all inputs !")})(t)},t.createElement("h2",{className:"title"},"Register new account"),t.createElement("label",{className:"form-label"},"Password"),t.createElement("input",{autoFocus:!0,value:a,onInput:e=>i(e.target.value),type:"password",className:"input",placeholder:"e.g Fs4fsef8FS848sf"}),t.createElement("label",{className:"form-label"},"Confirm password"),t.createElement("input",{value:s,onInput:e=>l(e.target.value),type:"password",className:"input",placeholder:"e.g Fs4fsef8FS848sf"}),t.createElement("label",{className:"form-label"},"Pass sentence"),t.createElement("textarea",{onInput:e=>{return(t=e.target.value).replaceAll(" ","-").split("-").length<10?o("Pass sentence need to have minimum 10 words !"):o(""),void n(t);var t},className:"input",rows:"5",cols:"33",value:e.replaceAll("-"," ")}),t.createElement("p",{className:""==r?"hidden":"error"},r),t.createElement("button",{className:"form-button"},"Register")))},u=e=>{var[n,r]=(0,t.useState)(""),[o,a]=(0,t.useState)("");return t.createElement("div",{className:"page login"},t.createElement("form",{className:"form",onSubmit:t=>(t=>{if(t.preventDefault(),""!=n.replaceAll(" ","")){var r=electron.configApi.readConfig(n);0!=r?(a(""),e.handleData(r),e.handleLogged(!0)):a("Incorrect password !")}else a("Please fill all the fields !")})(t)},t.createElement("h2",{className:"title"},"Login"),t.createElement("label",{className:"form-label"},"Password"),t.createElement("input",{autoFocus:!0,value:n,onInput:e=>r(e.target.value),type:"password",className:"input",placeholder:"e.g Fs4fsef8FS848sf"}),t.createElement("p",{className:""==o?"hidden":"error"},o),t.createElement("button",{className:"form-button"},"Login")))},c=e=>{var[n,r]=(0,t.useState)(e.userInfos.username),[o,a]=(0,t.useState)(e.userInfos.serverHistory[e.userInfos.serverHistory.length-1]);return t.createElement("form",{className:"form connectToServer",onSubmit:t=>e.connectToServerHandle(t,o,n)},t.createElement("label",{className:"form-label"},"Username"),t.createElement("input",{className:"input",type:"text",value:n,onInput:e=>r(e.target.value),placeholder:"e.g dimitri"}),t.createElement("label",{className:"form-label"},"Server"),t.createElement("input",{className:"input",type:"text",value:o,onInput:e=>a(e.target.value),placeholder:"e.g 127.0.0.1:3000"}),t.createElement("button",{className:"form-button"},"Connect"),t.createElement("div",{className:e.userInfos.serverHistory.length>0?"show":"hidden"},t.createElement("label",{className:"form-label"},"Server history"),e.userInfos.serverHistory.map((e=>t.createElement("a",{key:e,className:"server",onClick:()=>a(e)},e)))))};var d=n(187),f=n(227);const p=f("socket.io-client:url");var h=n(58);const m="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")();function A(e){const t=e.xdomain;try{if("undefined"!=typeof XMLHttpRequest&&(!t||h))return new XMLHttpRequest}catch(e){}if(!t)try{return new(m[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}function g(e,...t){return t.reduce(((t,n)=>(e.hasOwnProperty(n)&&(t[n]=e[n]),t)),{})}const y=setTimeout,b=clearTimeout;function v(e,t){t.useNativeTimers?(e.setTimeoutFn=y.bind(m),e.clearTimeoutFn=b.bind(m)):(e.setTimeoutFn=setTimeout.bind(m),e.clearTimeoutFn=clearTimeout.bind(m))}var C=n(63);const w=Object.create(null);w.open="0",w.close="1",w.ping="2",w.pong="3",w.message="4",w.upgrade="5",w.noop="6";const k=Object.create(null);Object.keys(w).forEach((e=>{k[w[e]]=e}));const x={type:"error",data:"parser error"},E="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),S="function"==typeof ArrayBuffer,N=(e,t)=>{const n=new FileReader;return n.onload=function(){const e=n.result.split(",")[1];t("b"+e)},n.readAsDataURL(e)},_=({type:e,data:t},n,r)=>{return E&&t instanceof Blob?n?r(t):N(t,r):S&&(t instanceof ArrayBuffer||(o=t,"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(o):o&&o.buffer instanceof ArrayBuffer))?n?r(t):N(new Blob([t]),r):r(w[e]+(t||""));var o};for(var B="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",T="undefined"==typeof Uint8Array?[]:new Uint8Array(256),O=0;O<B.length;O++)T[B.charCodeAt(O)]=O;const I="function"==typeof ArrayBuffer,P=(e,t)=>{if(I){const n=function(e){var t,n,r,o,a,i=.75*e.length,s=e.length,l=0;"="===e[e.length-1]&&(i--,"="===e[e.length-2]&&i--);var u=new ArrayBuffer(i),c=new Uint8Array(u);for(t=0;t<s;t+=4)n=T[e.charCodeAt(t)],r=T[e.charCodeAt(t+1)],o=T[e.charCodeAt(t+2)],a=T[e.charCodeAt(t+3)],c[l++]=n<<2|r>>4,c[l++]=(15&r)<<4|o>>2,c[l++]=(3&o)<<6|63&a;return u}(e);return R(n,t)}return{base64:!0,data:e}},R=(e,t)=>"blob"===t&&e instanceof ArrayBuffer?new Blob([e]):e,L=(e,t)=>{if("string"!=typeof e)return{type:"message",data:R(e,t)};const n=e.charAt(0);return"b"===n?{type:"message",data:P(e.substring(1),t)}:k[n]?e.length>1?{type:k[n],data:e.substring(1)}:{type:k[n]}:x},F=String.fromCharCode(30),z=f("engine.io-client:transport");class j extends C.Q{constructor(e){super(),this.writable=!1,v(this,e),this.opts=e,this.query=e.query,this.readyState="",this.socket=e.socket}onError(e,t){const n=new Error(e);return n.type="TransportError",n.description=t,super.emit("error",n),this}open(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(e){"open"===this.readyState?this.write(e):z("transport is not open, discarding packets")}onOpen(){this.readyState="open",this.writable=!0,super.emit("open")}onData(e){const t=L(e,this.socket.binaryType);this.onPacket(t)}onPacket(e){super.emit("packet",e)}onClose(){this.readyState="closed",super.emit("close")}}var M=n(281),D=n(830);const U=f("engine.io-client:polling");class H extends j{constructor(){super(...arguments),this.polling=!1}get name(){return"polling"}doOpen(){this.poll()}pause(e){this.readyState="pausing";const t=()=>{U("paused"),this.readyState="paused",e()};if(this.polling||!this.writable){let e=0;this.polling&&(U("we are currently polling - waiting to pause"),e++,this.once("pollComplete",(function(){U("pre-pause polling complete"),--e||t()}))),this.writable||(U("we are currently writing - waiting to pause"),e++,this.once("drain",(function(){U("pre-pause writing complete"),--e||t()})))}else t()}poll(){U("polling"),this.polling=!0,this.doPoll(),this.emit("poll")}onData(e){U("polling got data %s",e),((e,t)=>{const n=e.split(F),r=[];for(let e=0;e<n.length;e++){const o=L(n[e],t);if(r.push(o),"error"===o.type)break}return r})(e,this.socket.binaryType).forEach((e=>{if("opening"===this.readyState&&"open"===e.type&&this.onOpen(),"close"===e.type)return this.onClose(),!1;this.onPacket(e)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():U('ignoring poll - transport state "%s"',this.readyState))}doClose(){const e=()=>{U("writing close packet"),this.write([{type:"close"}])};"open"===this.readyState?(U("transport open - closing"),e()):(U("transport not open - deferring close"),this.once("open",e))}write(e){this.writable=!1,((e,t)=>{const n=e.length,r=new Array(n);let o=0;e.forEach(((e,a)=>{_(e,!1,(e=>{r[a]=e,++o===n&&t(r.join(F))}))}))})(e,(e=>{this.doWrite(e,(()=>{this.writable=!0,this.emit("drain")}))}))}uri(){let e=this.query||{};const t=this.opts.secure?"https":"http";let n="";!1!==this.opts.timestampRequests&&(e[this.opts.timestampParam]=M()),this.supportsBinary||e.sid||(e.b64=1),this.opts.port&&("https"===t&&443!==Number(this.opts.port)||"http"===t&&80!==Number(this.opts.port))&&(n=":"+this.opts.port);const r=D.encode(e);return t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+(r.length?"?"+r:"")}}const q=f("engine.io-client:polling-xhr");function W(){}const V=null!=new A({xdomain:!1}).responseType;class K extends C.Q{constructor(e,t){super(),v(this,t),this.opts=t,this.method=t.method||"GET",this.uri=e,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.create()}create(){const e=g(this.opts,"agent","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");e.xdomain=!!this.opts.xd,e.xscheme=!!this.opts.xs;const t=this.xhr=new A(e);try{q("xhr open %s: %s",this.method,this.uri),t.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){t.setDisableHeaderCheck&&t.setDisableHeaderCheck(!0);for(let e in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(e)&&t.setRequestHeader(e,this.opts.extraHeaders[e])}}catch(e){}if("POST"===this.method)try{t.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{t.setRequestHeader("Accept","*/*")}catch(e){}"withCredentials"in t&&(t.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(t.timeout=this.opts.requestTimeout),t.onreadystatechange=()=>{4===t.readyState&&(200===t.status||1223===t.status?this.onLoad():this.setTimeoutFn((()=>{this.onError("number"==typeof t.status?t.status:0)}),0))},q("xhr data %s",this.data),t.send(this.data)}catch(e){return void this.setTimeoutFn((()=>{this.onError(e)}),0)}"undefined"!=typeof document&&(this.index=K.requestsCount++,K.requests[this.index]=this)}onSuccess(){this.emit("success"),this.cleanup()}onData(e){this.emit("data",e),this.onSuccess()}onError(e){this.emit("error",e),this.cleanup(!0)}cleanup(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.xhr.onreadystatechange=W,e)try{this.xhr.abort()}catch(e){}"undefined"!=typeof document&&delete K.requests[this.index],this.xhr=null}}onLoad(){const e=this.xhr.responseText;null!==e&&this.onData(e)}abort(){this.cleanup()}}function J(){for(let e in K.requests)K.requests.hasOwnProperty(e)&&K.requests[e].abort()}K.requestsCount=0,K.requests={},"undefined"!=typeof document&&("function"==typeof attachEvent?attachEvent("onunload",J):"function"==typeof addEventListener&&addEventListener("onpagehide"in m?"pagehide":"unload",J,!1));const Q="function"==typeof Promise&&"function"==typeof Promise.resolve?e=>Promise.resolve().then(e):(e,t)=>t(e,0),$=m.WebSocket||m.MozWebSocket,Y=f("engine.io-client:websocket"),X="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();class G extends j{constructor(e){super(e),this.supportsBinary=!e.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const e=this.uri(),t=this.opts.protocols,n=X?{}:g(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(n.headers=this.opts.extraHeaders);try{this.ws=X?new $(e,t,n):t?new $(e,t):new $(e)}catch(e){return this.emit("error",e)}this.ws.binaryType=this.socket.binaryType||"arraybuffer",this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=this.onClose.bind(this),this.ws.onmessage=e=>this.onData(e.data),this.ws.onerror=e=>this.onError("websocket error",e)}write(e){this.writable=!1;for(let t=0;t<e.length;t++){const n=e[t],r=t===e.length-1;_(n,this.supportsBinary,(e=>{try{this.ws.send(e)}catch(e){Y("websocket closed before onclose event")}r&&Q((()=>{this.writable=!0,this.emit("drain")}),this.setTimeoutFn)}))}}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){let e=this.query||{};const t=this.opts.secure?"wss":"ws";let n="";this.opts.port&&("wss"===t&&443!==Number(this.opts.port)||"ws"===t&&80!==Number(this.opts.port))&&(n=":"+this.opts.port),this.opts.timestampRequests&&(e[this.opts.timestampParam]=M()),this.supportsBinary||(e.b64=1);const r=D.encode(e);return t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+(r.length?"?"+r:"")}check(){return!(!$||"__initialize"in $&&this.name===G.prototype.name)}}const Z={websocket:G,polling:class extends H{constructor(e){if(super(e),"undefined"!=typeof location){const t="https:"===location.protocol;let n=location.port;n||(n=t?"443":"80"),this.xd="undefined"!=typeof location&&e.hostname!==location.hostname||n!==e.port,this.xs=e.secure!==t}const t=e&&e.forceBase64;this.supportsBinary=V&&!t}request(e={}){return Object.assign(e,{xd:this.xd,xs:this.xs},this.opts),new K(this.uri(),e)}doWrite(e,t){const n=this.request({method:"POST",data:e});n.on("success",t),n.on("error",(e=>{this.onError("xhr post error",e)}))}doPoll(){q("xhr poll");const e=this.request();e.on("data",this.onData.bind(this)),e.on("error",(e=>{this.onError("xhr poll error",e)})),this.pollXhr=e}}},ee=f("engine.io-client:socket");class te extends C.Q{constructor(e,t={}){super(),e&&"object"==typeof e&&(t=e,e=null),e?(e=d(e),t.hostname=e.host,t.secure="https"===e.protocol||"wss"===e.protocol,t.port=e.port,e.query&&(t.query=e.query)):t.host&&(t.hostname=d(t.host).host),v(this,t),this.secure=null!=t.secure?t.secure:"undefined"!=typeof location&&"https:"===location.protocol,t.hostname&&!t.port&&(t.port=this.secure?"443":"80"),this.hostname=t.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=t.port||("undefined"!=typeof location&&location.port?location.port:this.secure?"443":"80"),this.transports=t.transports||["polling","websocket"],this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,timestampParam:"t",rememberUpgrade:!1,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!0},t),this.opts.path=this.opts.path.replace(/\/$/,"")+"/","string"==typeof this.opts.query&&(this.opts.query=D.decode(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&(this.opts.closeOnBeforeunload&&addEventListener("beforeunload",(()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())}),!1),"localhost"!==this.hostname&&(this.offlineEventListener=()=>{this.onClose("transport close")},addEventListener("offline",this.offlineEventListener,!1))),this.open()}createTransport(e){ee('creating transport "%s"',e);const t=function(e){const t={};for(let n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}(this.opts.query);t.EIO=4,t.transport=e,this.id&&(t.sid=this.id);const n=Object.assign({},this.opts.transportOptions[e],this.opts,{query:t,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return ee("options: %j",n),new Z[e](n)}open(){let e;if(this.opts.rememberUpgrade&&te.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length)return void this.setTimeoutFn((()=>{this.emitReserved("error","No transports available")}),0);e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return ee("error while creating transport: %s",e),this.transports.shift(),void this.open()}e.open(),this.setTransport(e)}setTransport(e){ee("setting transport %s",e.name),this.transport&&(ee("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=e,e.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",(()=>{this.onClose("transport close")}))}probe(e){ee('probing transport "%s"',e);let t=this.createTransport(e),n=!1;te.priorWebsocketSuccess=!1;const r=()=>{n||(ee('probe transport "%s" opened',e),t.send([{type:"ping",data:"probe"}]),t.once("packet",(r=>{if(!n)if("pong"===r.type&&"probe"===r.data){if(ee('probe transport "%s" pong',e),this.upgrading=!0,this.emitReserved("upgrading",t),!t)return;te.priorWebsocketSuccess="websocket"===t.name,ee('pausing current transport "%s"',this.transport.name),this.transport.pause((()=>{n||"closed"!==this.readyState&&(ee("changing transport and sending upgrade packet"),u(),this.setTransport(t),t.send([{type:"upgrade"}]),this.emitReserved("upgrade",t),t=null,this.upgrading=!1,this.flush())}))}else{ee('probe transport "%s" failed',e);const n=new Error("probe error");n.transport=t.name,this.emitReserved("upgradeError",n)}})))};function o(){n||(n=!0,u(),t.close(),t=null)}const a=n=>{const r=new Error("probe error: "+n);r.transport=t.name,o(),ee('probe transport "%s" failed because of error: %s',e,n),this.emitReserved("upgradeError",r)};function i(){a("transport closed")}function s(){a("socket closed")}function l(e){t&&e.name!==t.name&&(ee('"%s" works - aborting "%s"',e.name,t.name),o())}const u=()=>{t.removeListener("open",r),t.removeListener("error",a),t.removeListener("close",i),this.off("close",s),this.off("upgrading",l)};t.once("open",r),t.once("error",a),t.once("close",i),this.once("close",s),this.once("upgrading",l),t.open()}onOpen(){if(ee("socket open"),this.readyState="open",te.priorWebsocketSuccess="websocket"===this.transport.name,this.emitReserved("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade&&this.transport.pause){ee("starting upgrade probes");let e=0;const t=this.upgrades.length;for(;e<t;e++)this.probe(this.upgrades[e])}}onPacket(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(ee('socket receive: type "%s", data "%s"',e.type,e.data),this.emitReserved("packet",e),this.emitReserved("heartbeat"),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emitReserved("ping"),this.emitReserved("pong");break;case"error":const t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emitReserved("data",e.data),this.emitReserved("message",e.data)}else ee('packet received with socket readyState "%s"',this.readyState)}onHandshake(e){this.emitReserved("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){this.clearTimeoutFn(this.pingTimeoutTimer),this.pingTimeoutTimer=this.setTimeoutFn((()=>{this.onClose("ping timeout")}),this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emitReserved("drain"):this.flush()}flush(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(ee("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emitReserved("flush"))}write(e,t,n){return this.sendPacket("message",e,t,n),this}send(e,t,n){return this.sendPacket("message",e,t,n),this}sendPacket(e,t,n,r){if("function"==typeof t&&(r=t,t=void 0),"function"==typeof n&&(r=n,n=null),"closing"===this.readyState||"closed"===this.readyState)return;(n=n||{}).compress=!1!==n.compress;const o={type:e,data:t,options:n};this.emitReserved("packetCreate",o),this.writeBuffer.push(o),r&&this.once("flush",r),this.flush()}close(){const e=()=>{this.onClose("forced close"),ee("socket closing - telling transport to close"),this.transport.close()},t=()=>{this.off("upgrade",t),this.off("upgradeError",t),e()},n=()=>{this.once("upgrade",t),this.once("upgradeError",t)};return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(()=>{this.upgrading?n():e()})):this.upgrading?n():e()),this}onError(e){ee("socket error %j",e),te.priorWebsocketSuccess=!1,this.emitReserved("error",e),this.onClose("transport error",e)}onClose(e,t){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(ee('socket close with reason: "%s"',e),this.clearTimeoutFn(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),"function"==typeof removeEventListener&&removeEventListener("offline",this.offlineEventListener,!1),this.readyState="closed",this.id=null,this.emitReserved("close",e,t),this.writeBuffer=[],this.prevBufferLen=0)}filterUpgrades(e){const t=[];let n=0;const r=e.length;for(;n<r;n++)~this.transports.indexOf(e[n])&&t.push(e[n]);return t}}te.protocol=4,te.protocol;const ne="function"==typeof ArrayBuffer,re=Object.prototype.toString,oe="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===re.call(Blob),ae="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===re.call(File);function ie(e){return ne&&(e instanceof ArrayBuffer||(e=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):e.buffer instanceof ArrayBuffer)(e))||oe&&e instanceof Blob||ae&&e instanceof File}function se(e,t){if(!e||"object"!=typeof e)return!1;if(Array.isArray(e)){for(let t=0,n=e.length;t<n;t++)if(se(e[t]))return!0;return!1}if(ie(e))return!0;if(e.toJSON&&"function"==typeof e.toJSON&&1===arguments.length)return se(e.toJSON(),!0);for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t)&&se(e[t]))return!0;return!1}function le(e){const t=[],n=e.data,r=e;return r.data=ue(n,t),r.attachments=t.length,{packet:r,buffers:t}}function ue(e,t){if(!e)return e;if(ie(e)){const n={_placeholder:!0,num:t.length};return t.push(e),n}if(Array.isArray(e)){const n=new Array(e.length);for(let r=0;r<e.length;r++)n[r]=ue(e[r],t);return n}if("object"==typeof e&&!(e instanceof Date)){const n={};for(const r in e)Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=ue(e[r],t));return n}return e}function ce(e,t){return e.data=de(e.data,t),e.attachments=void 0,e}function de(e,t){if(!e)return e;if(e&&e._placeholder)return t[e.num];if(Array.isArray(e))for(let n=0;n<e.length;n++)e[n]=de(e[n],t);else if("object"==typeof e)for(const n in e)Object.prototype.hasOwnProperty.call(e,n)&&(e[n]=de(e[n],t));return e}const fe=f("socket.io-parser"),pe=5;var he;!function(e){e[e.CONNECT=0]="CONNECT",e[e.DISCONNECT=1]="DISCONNECT",e[e.EVENT=2]="EVENT",e[e.ACK=3]="ACK",e[e.CONNECT_ERROR=4]="CONNECT_ERROR",e[e.BINARY_EVENT=5]="BINARY_EVENT",e[e.BINARY_ACK=6]="BINARY_ACK"}(he||(he={}));class me{encode(e){return fe("encoding packet %j",e),e.type!==he.EVENT&&e.type!==he.ACK||!se(e)?[this.encodeAsString(e)]:(e.type=e.type===he.EVENT?he.BINARY_EVENT:he.BINARY_ACK,this.encodeAsBinary(e))}encodeAsString(e){let t=""+e.type;return e.type!==he.BINARY_EVENT&&e.type!==he.BINARY_ACK||(t+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(t+=e.nsp+","),null!=e.id&&(t+=e.id),null!=e.data&&(t+=JSON.stringify(e.data)),fe("encoded %j as %s",e,t),t}encodeAsBinary(e){const t=le(e),n=this.encodeAsString(t.packet),r=t.buffers;return r.unshift(n),r}}class Ae extends C.Q{constructor(){super()}add(e){let t;if("string"==typeof e)t=this.decodeString(e),t.type===he.BINARY_EVENT||t.type===he.BINARY_ACK?(this.reconstructor=new ge(t),0===t.attachments&&super.emitReserved("decoded",t)):super.emitReserved("decoded",t);else{if(!ie(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");t=this.reconstructor.takeBinaryData(e),t&&(this.reconstructor=null,super.emitReserved("decoded",t))}}decodeString(e){let t=0;const n={type:Number(e.charAt(0))};if(void 0===he[n.type])throw new Error("unknown packet type "+n.type);if(n.type===he.BINARY_EVENT||n.type===he.BINARY_ACK){const r=t+1;for(;"-"!==e.charAt(++t)&&t!=e.length;);const o=e.substring(r,t);if(o!=Number(o)||"-"!==e.charAt(t))throw new Error("Illegal attachments");n.attachments=Number(o)}if("/"===e.charAt(t+1)){const r=t+1;for(;++t&&","!==e.charAt(t)&&t!==e.length;);n.nsp=e.substring(r,t)}else n.nsp="/";const r=e.charAt(t+1);if(""!==r&&Number(r)==r){const r=t+1;for(;++t;){const n=e.charAt(t);if(null==n||Number(n)!=n){--t;break}if(t===e.length)break}n.id=Number(e.substring(r,t+1))}if(e.charAt(++t)){const r=function(e){try{return JSON.parse(e)}catch(e){return!1}}(e.substr(t));if(!Ae.isPayloadValid(n.type,r))throw new Error("invalid payload");n.data=r}return fe("decoded %s as %j",e,n),n}static isPayloadValid(e,t){switch(e){case he.CONNECT:return"object"==typeof t;case he.DISCONNECT:return void 0===t;case he.CONNECT_ERROR:return"string"==typeof t||"object"==typeof t;case he.EVENT:case he.BINARY_EVENT:return Array.isArray(t)&&t.length>0;case he.ACK:case he.BINARY_ACK:return Array.isArray(t)}}destroy(){this.reconstructor&&this.reconstructor.finishedReconstruction()}}class ge{constructor(e){this.packet=e,this.buffers=[],this.reconPack=e}takeBinaryData(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){const e=ce(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}function ye(e,t,n){return e.on(t,n),function(){e.off(t,n)}}const be=f("socket.io-client:socket"),ve=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class Ce extends C.Q{constructor(e,t,n){super(),this.connected=!1,this.disconnected=!0,this.receiveBuffer=[],this.sendBuffer=[],this.ids=0,this.acks={},this.flags={},this.io=e,this.nsp=t,n&&n.auth&&(this.auth=n.auth),this.io._autoConnect&&this.open()}subEvents(){if(this.subs)return;const e=this.io;this.subs=[ye(e,"open",this.onopen.bind(this)),ye(e,"packet",this.onpacket.bind(this)),ye(e,"error",this.onerror.bind(this)),ye(e,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...e){return e.unshift("message"),this.emit.apply(this,e),this}emit(e,...t){if(ve.hasOwnProperty(e))throw new Error('"'+e+'" is a reserved event name');t.unshift(e);const n={type:he.EVENT,data:t,options:{}};if(n.options.compress=!1!==this.flags.compress,"function"==typeof t[t.length-1]){const e=this.ids++;be("emitting packet with ack id %d",e);const r=t.pop();this._registerAckCallback(e,r),n.id=e}const r=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return!this.flags.volatile||r&&this.connected?this.connected?this.packet(n):this.sendBuffer.push(n):be("discard packet as the transport is not currently writable"),this.flags={},this}_registerAckCallback(e,t){const n=this.flags.timeout;if(void 0===n)return void(this.acks[e]=t);const r=this.io.setTimeoutFn((()=>{delete this.acks[e];for(let t=0;t<this.sendBuffer.length;t++)this.sendBuffer[t].id===e&&(be("removing packet with ack id %d from the buffer",e),this.sendBuffer.splice(t,1));be("event with ack id %d has timed out after %d ms",e,n),t.call(this,new Error("operation has timed out"))}),n);this.acks[e]=(...e)=>{this.io.clearTimeoutFn(r),t.apply(this,[null,...e])}}packet(e){e.nsp=this.nsp,this.io._packet(e)}onopen(){be("transport is open - connecting"),"function"==typeof this.auth?this.auth((e=>{this.packet({type:he.CONNECT,data:e})})):this.packet({type:he.CONNECT,data:this.auth})}onerror(e){this.connected||this.emitReserved("connect_error",e)}onclose(e){be("close (%s)",e),this.connected=!1,this.disconnected=!0,delete this.id,this.emitReserved("disconnect",e)}onpacket(e){if(e.nsp===this.nsp)switch(e.type){case he.CONNECT:if(e.data&&e.data.sid){const t=e.data.sid;this.onconnect(t)}else this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case he.EVENT:case he.BINARY_EVENT:this.onevent(e);break;case he.ACK:case he.BINARY_ACK:this.onack(e);break;case he.DISCONNECT:this.ondisconnect();break;case he.CONNECT_ERROR:this.destroy();const t=new Error(e.data.message);t.data=e.data.data,this.emitReserved("connect_error",t)}}onevent(e){const t=e.data||[];be("emitting event %j",t),null!=e.id&&(be("attaching ack callback to event"),t.push(this.ack(e.id))),this.connected?this.emitEvent(t):this.receiveBuffer.push(Object.freeze(t))}emitEvent(e){if(this._anyListeners&&this._anyListeners.length){const t=this._anyListeners.slice();for(const n of t)n.apply(this,e)}super.emit.apply(this,e)}ack(e){const t=this;let n=!1;return function(...r){n||(n=!0,be("sending ack %j",r),t.packet({type:he.ACK,id:e,data:r}))}}onack(e){const t=this.acks[e.id];"function"==typeof t?(be("calling ack %s with %j",e.id,e.data),t.apply(this,e.data),delete this.acks[e.id]):be("bad ack %s",e.id)}onconnect(e){be("socket connected with id %s",e),this.id=e,this.connected=!0,this.disconnected=!1,this.emitBuffered(),this.emitReserved("connect")}emitBuffered(){this.receiveBuffer.forEach((e=>this.emitEvent(e))),this.receiveBuffer=[],this.sendBuffer.forEach((e=>this.packet(e))),this.sendBuffer=[]}ondisconnect(){be("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach((e=>e())),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&(be("performing disconnect (%s)",this.nsp),this.packet({type:he.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(e){return this.flags.compress=e,this}get volatile(){return this.flags.volatile=!0,this}timeout(e){return this.flags.timeout=e,this}onAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(e),this}prependAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(e),this}offAny(e){if(!this._anyListeners)return this;if(e){const t=this._anyListeners;for(let n=0;n<t.length;n++)if(e===t[n])return t.splice(n,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}}var we=n(10);const ke=f("socket.io-client:manager");class xe extends C.Q{constructor(t,n){var r;super(),this.nsps={},this.subs=[],t&&"object"==typeof t&&(n=t,t=void 0),(n=n||{}).path=n.path||"/socket.io",this.opts=n,v(this,n),this.reconnection(!1!==n.reconnection),this.reconnectionAttempts(n.reconnectionAttempts||1/0),this.reconnectionDelay(n.reconnectionDelay||1e3),this.reconnectionDelayMax(n.reconnectionDelayMax||5e3),this.randomizationFactor(null!==(r=n.randomizationFactor)&&void 0!==r?r:.5),this.backoff=new we({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==n.timeout?2e4:n.timeout),this._readyState="closed",this.uri=t;const o=n.parser||e;this.encoder=new o.Encoder,this.decoder=new o.Decoder,this._autoConnect=!1!==n.autoConnect,this._autoConnect&&this.open()}reconnection(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection}reconnectionAttempts(e){return void 0===e?this._reconnectionAttempts:(this._reconnectionAttempts=e,this)}reconnectionDelay(e){var t;return void 0===e?this._reconnectionDelay:(this._reconnectionDelay=e,null===(t=this.backoff)||void 0===t||t.setMin(e),this)}randomizationFactor(e){var t;return void 0===e?this._randomizationFactor:(this._randomizationFactor=e,null===(t=this.backoff)||void 0===t||t.setJitter(e),this)}reconnectionDelayMax(e){var t;return void 0===e?this._reconnectionDelayMax:(this._reconnectionDelayMax=e,null===(t=this.backoff)||void 0===t||t.setMax(e),this)}timeout(e){return arguments.length?(this._timeout=e,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(e){if(ke("readyState %s",this._readyState),~this._readyState.indexOf("open"))return this;ke("opening %s",this.uri),this.engine=new te(this.uri,this.opts);const t=this.engine,n=this;this._readyState="opening",this.skipReconnect=!1;const r=ye(t,"open",(function(){n.onopen(),e&&e()})),o=ye(t,"error",(t=>{ke("error"),n.cleanup(),n._readyState="closed",this.emitReserved("error",t),e?e(t):n.maybeReconnectOnOpen()}));if(!1!==this._timeout){const e=this._timeout;ke("connect attempt will timeout after %d",e),0===e&&r();const n=this.setTimeoutFn((()=>{ke("connect attempt timed out after %d",e),r(),t.close(),t.emit("error",new Error("timeout"))}),e);this.opts.autoUnref&&n.unref(),this.subs.push((function(){clearTimeout(n)}))}return this.subs.push(r),this.subs.push(o),this}connect(e){return this.open(e)}onopen(){ke("open"),this.cleanup(),this._readyState="open",this.emitReserved("open");const e=this.engine;this.subs.push(ye(e,"ping",this.onping.bind(this)),ye(e,"data",this.ondata.bind(this)),ye(e,"error",this.onerror.bind(this)),ye(e,"close",this.onclose.bind(this)),ye(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(e){this.decoder.add(e)}ondecoded(e){this.emitReserved("packet",e)}onerror(e){ke("error",e),this.emitReserved("error",e)}socket(e,t){let n=this.nsps[e];return n||(n=new Ce(this,e,t),this.nsps[e]=n),n}_destroy(e){const t=Object.keys(this.nsps);for(const e of t)if(this.nsps[e].active)return void ke("socket %s is still active, skipping close",e);this._close()}_packet(e){ke("writing packet %j",e);const t=this.encoder.encode(e);for(let n=0;n<t.length;n++)this.engine.write(t[n],e.options)}cleanup(){ke("cleanup"),this.subs.forEach((e=>e())),this.subs.length=0,this.decoder.destroy()}_close(){ke("disconnect"),this.skipReconnect=!0,this._reconnecting=!1,this.onclose("forced close"),this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(e){ke("closed due to %s",e),this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",e),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const e=this;if(this.backoff.attempts>=this._reconnectionAttempts)ke("reconnect failed"),this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const t=this.backoff.duration();ke("will wait %dms before reconnect attempt",t),this._reconnecting=!0;const n=this.setTimeoutFn((()=>{e.skipReconnect||(ke("attempting reconnect"),this.emitReserved("reconnect_attempt",e.backoff.attempts),e.skipReconnect||e.open((t=>{t?(ke("reconnect attempt error"),e._reconnecting=!1,e.reconnect(),this.emitReserved("reconnect_error",t)):(ke("reconnect success"),e.onreconnect())})))}),t);this.opts.autoUnref&&n.unref(),this.subs.push((function(){clearTimeout(n)}))}}onreconnect(){const e=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",e)}}const Ee=f("socket.io-client"),Se={};function Ne(e,t){"object"==typeof e&&(t=e,e=void 0);const n=function(e,t="",n){let r=e;n=n||"undefined"!=typeof location&&location,null==e&&(e=n.protocol+"//"+n.host),"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?n.protocol+e:n.host+e),/^(https?|wss?):\/\//.test(e)||(p("protocol-less url %s",e),e=void 0!==n?n.protocol+"//"+e:"https://"+e),p("parse %s",e),r=d(e)),r.port||(/^(http|ws)$/.test(r.protocol)?r.port="80":/^(http|ws)s$/.test(r.protocol)&&(r.port="443")),r.path=r.path||"/";const o=-1!==r.host.indexOf(":")?"["+r.host+"]":r.host;return r.id=r.protocol+"://"+o+":"+r.port+t,r.href=r.protocol+"://"+o+(n&&n.port===r.port?"":":"+r.port),r}(e,(t=t||{}).path||"/socket.io"),r=n.source,o=n.id,a=n.path,i=Se[o]&&a in Se[o].nsps;let s;return t.forceNew||t["force new connection"]||!1===t.multiplex||i?(Ee("ignoring socket cache for %s",r),s=new xe(r,t)):(Se[o]||(Ee("new io instance for %s",r),Se[o]=new xe(r,t)),s=Se[o]),n.query&&!t.query&&(t.query=n.queryKey),s.socket(n.path,t)}Object.assign(Ne,{Manager:xe,Socket:Ce,io:Ne,connect:Ne});var _e=n(669),Be=n.n(_e);function Te(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Oe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Te(Object(n),!0).forEach((function(t){Ie(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Te(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ie(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Pe=null,Re=null,Le="main";function Fe(e){for(var t="",n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",r=n.length,o=0;o<e;o++)t+=n.charAt(Math.floor(Math.random()*r));return t}var ze=["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9","+","/"];function je(e){var t,n="",r=e.length;for(t=2;t<r;t+=3)n+=ze[e[t-2]>>2],n+=ze[(3&e[t-2])<<4|e[t-1]>>4],n+=ze[(15&e[t-1])<<2|e[t]>>6],n+=ze[63&e[t]];return t===r+1&&(n+=ze[e[t-2]>>2],n+=ze[(3&e[t-2])<<4],n+="=="),t===r&&(n+=ze[e[t-2]>>2],n+=ze[(3&e[t-2])<<4|e[t-1]>>4],n+=ze[(15&e[t-1])<<2],n+="="),n}var Me=(e,n)=>{var[r,o]=(0,t.useState)(!1),[a,i]=(0,t.useState)(!1),[s,l]=(0,t.useState)({}),[u,c]=(0,t.useState)([]),[d,f]=(0,t.useState)(electron.configApi.readMessages(e.userInfos.password,s.endpoint)),[p,h]=(0,t.useState)([]),[m,A]=(0,t.useState)(""),[g,y]=(0,t.useState)("");(0,t.useImperativeHandle)(n,(()=>({setServerInfos(e){l(e)},setChannels(e){c(e)},setMessagesStored(e){f(e)},setblobscreenshare(e){y(window.URL.createObjectURL(e)),setTimeout((()=>A(window.URL.createObjectURL(e))),50)},setClientCallList(e){h(e)},addNotification(e){Le!=e&&c((t=>t.map((t=>t.name==e?Oe(Oe({},t),{},{unread:t.unread+1}):t))))}})),[]);var[b,v]=(0,t.useState)(""),[C,w]=(0,t.useState)(!1),[k,x]=(0,t.useState)(!1),[E,S]=(0,t.useState)(!1),[N,_]=(0,t.useState)(!1),[B,T]=(0,t.useState)(0),O=(0,t.useRef)();return(0,t.useEffect)((()=>{var e;document.body.addEventListener("dragover",(t=>{O.current.style["pointer-events"]="all",clearTimeout(e),e=setTimeout((()=>{O.current.style["pointer-events"]="none"}),200)}))}),[]),t.createElement("div",{className:"server"},t.createElement("div",{ref:O,onDragEnter:()=>w(!k),onDragLeave:()=>w(!1),onDragEnd:()=>w(!1),onDragOver:e=>e.preventDefault(),onDrop:t=>{w(!1);var n=t.dataTransfer,r=n.files;console.log(r,n);var o=new FormData;o.append("file",r[0]),o.append("receiver",Le),o.append("keyHash",e.keyHash),x(!0),Be().post("http://"+s.endpoint+"/send_file",o,{headers:{"Content-Type":"multipart/form-data"},onUploadProgress:e=>{T(Math.round(100*e.loaded/e.total))}}).then((e=>{x(!1)}))},className:"dragdrophandler"}),t.createElement("div",{className:"server-info"},t.createElement("h2",{className:"title host-title"},s.endpoint),t.createElement("button",{className:"form-button disconnect-button",onClick:()=>{o(!1),i(!1),_(!1),S(!1),clearInterval(Re),clearInterval(Pe),e.disconnect()}},t.createElement("i",{className:"fas fa-running"})," Disconnect"),t.createElement("div",{className:"call-buttons"},t.createElement("button",{className:"form-button-outline button-call "+(!r&&a?"show":"hidden"),onClick:()=>{a&&(o(!0),e.socket.emit("muteStatus",!0))}},t.createElement("i",{className:"fas fa-microphone"})),t.createElement("button",{className:"form-button-outline button-call "+(r&&a?"show":"hidden"),onClick:()=>{a&&(o(!1),e.socket.emit("muteStatus",!1))}},t.createElement("i",{className:"fas fa-microphone-slash"})),t.createElement("button",{className:"form-button-outline button-call "+(a?"show":"hidden"),onClick:()=>{a&&!N?(e.socket.emit("screenStatus",!0),_(!0),navigator.mediaDevices.getDisplayMedia({video:{cursor:"always"},audio:{echoCancellation:!0,noiseSuppression:!0}}).then((t=>{var n=new MediaRecorder(t);n.onstart=function(e){this.chunks=[]},n.ondataavailable=function(e){this.chunks.push(e.data)},n.onstop=function(t){var n=new Blob(this.chunks,{type:"video/webm; codecs=opus"}),r=new TextEncoder;n.arrayBuffer().then((t=>e.socket.emit("screen",Crypto.encrypt_aes_cbc(Crypto.pkcs_pad(t),r.encode(s.mainKey.slice(0,16)).buffer,r.encode(s.mainKey.slice(0,16)).buffer))))},Re=setInterval((()=>{"recording"!=n.state&&(n.start(),setTimeout((()=>{n.stop()}),450))}),10)})).catch((e=>{console.log("unable to get display media"+e)}))):N&&a&&(_(!1),e.socket.emit("screenStatus",!1),clearInterval(Re))}},t.createElement("i",{class:"fas fa-tv"})),t.createElement("button",{className:"form-button-outline button-call "+(a?"show":"hidden"),onClick:()=>{i(!1),_(!1),S(!1),e.socket.emit("quitCall"),clearInterval(Pe),clearInterval(Re)}},t.createElement("i",{className:"fas fa-phone-slash"}))),t.createElement("button",{className:"form-button-outline call-btn "+(a?"hidden":"show"),onClick:()=>{i(!0),e.socket.emit("joinCall"),console.log("lesgooo"),navigator.mediaDevices.getUserMedia({audio:!0}).then((function(t){console.log("callback");var n=new MediaRecorder(t);n.onstart=function(e){this.chunks=[]},n.ondataavailable=function(e){this.chunks.push(e.data)},n.onstop=function(t){var n=new Blob(this.chunks,{type:"audio/webm; codecs=opus"}),o=new TextEncoder;r||n.arrayBuffer().then((t=>e.socket.emit("radio",Crypto.encrypt_aes_cbc(Crypto.pkcs_pad(t),o.encode(s.mainKey.slice(0,16)).buffer,o.encode(s.mainKey.slice(0,16)).buffer))))},Pe=setInterval((()=>{"recording"!=n.state&&(n.start(),setTimeout((()=>{n.stop()}),450))}),10)}))}},t.createElement("i",{className:"fas fa-phone"})),t.createElement("h5",{className:"title motd"},s.motd)),t.createElement("div",{className:"users"},u.map((n=>t.createElement("div",{key:n.name},n.name!=e.username?t.createElement("a",{disabled:Le==n.name,className:"channel-button",onClick:()=>{Le=n.name,c((e=>e.map((e=>e.name==n.name?Oe(Oe({},e),{},{unread:0}):e))))}},("main"==n.name?"#":"@")+n.name,n.unread>0?t.createElement("p",{className:"notif"},n.unread):t.createElement(t.Fragment,null)):t.createElement(t.Fragment,null))))),E?t.createElement("div",{className:"screenshare"},t.createElement("button",{className:"closebtn",onClick:()=>S(!1)},"×"),t.createElement("video",{loop:!0,autoPlay:!0,muted:!0,src:g,className:"vid"}),t.createElement("video",{loop:!0,autoPlay:!0,muted:!0,src:m,className:"vid"})):t.createElement(t.Fragment,null),t.createElement("div",{className:"panel"},t.createElement("div",{className:"channel",style:{width:a?"85%":"100%"}},t.createElement("h4",{className:"title currentChannel-name"},Le),t.createElement("div",{className:"messages"},-1!=u.findIndex((e=>e.name==Le))?d.map((e=>t.createElement(t.Fragment,null,e.channel!=Le||e.isFile?e.channel==Le&&e.isFile?t.createElement("li",{key:Fe(16),className:"message-file"},t.createElement("h5",{className:"title"},e.author),e.isImage?t.createElement("img",{src:e.bloburl,className:"img"}):t.createElement("div",{className:"file"},t.createElement("h4",{className:"title"},e.filename),t.createElement("i",{class:"fas fa-download icon",onClick:()=>{var t=document.createElement("a"),n=new Blob([e.data],{type:e.type});t.href=URL.createObjectURL(n),t.download=e.filename,t.click()}}))):t.createElement(t.Fragment,null):t.createElement("li",{key:Fe(16),className:"message-holder "+(e.owned?"mine":"")},t.createElement("div",{className:"message "+(e.owned?"mine":"")},t.createElement("h5",{className:"title"},e.author),t.createElement("div",{className:"message-content"},t.createElement("p",{className:"text-normal"},e.content))))))):t.createElement(t.Fragment,null)),t.createElement("form",{className:"sendMessage",onSubmit:t=>{t.preventDefault();var n=Fe(32),r=Fe(32),o=u[u.findIndex((e=>e.name==Le))];0!=b.replace(/\s/g,"").length&&("main"==o.name?e.socket.emit("message",electron.utilApi.enc(JSON.stringify({message:electron.utilApi.enc(b,r),encryptionKey:je(electron.utilApi.encRSA(r,s.publicKey)),receiver:o.socketId}),n),electron.utilApi.encRSA(n,s.publicKey)):(e.socket.emit("message",electron.utilApi.enc(JSON.stringify({message:electron.utilApi.enc(b,r),encryptionKey:je(electron.utilApi.encRSA(r,u[u.findIndex((e=>e.name==Le))].publicKey)),receiver:o.socketId}),n),electron.utilApi.encRSA(n,s.publicKey)),f((t=>[...t,{channel:o.name,author:e.username,content:b,owned:!0}])),messagesElem.scrollTop+messagesElem.clientHeight>messagesElem.scrollHeight-50&&(messagesElem.scrollTop=messagesElem.scrollHeight))),v("")}},t.createElement("input",{value:b,onChange:e=>v(e.target.value),className:"input message-send",type:"text",placeholder:"Message to "+Le}))),a?t.createElement("div",{className:"callPanel"},t.createElement("h4",{className:"title"},"Call"),t.createElement("hr",null),t.createElement("div",{className:"call-list"},p.map((n=>t.createElement("a",{className:"user-call",key:Fe(16),onClick:()=>{console.log(u.find((e=>e.socketId==n.socketId)).name),e.whowatchomg(u.find((e=>e.socketId==n.socketId)).name),S(!0)}},u.find((e=>e.socketId==n.socketId)).name," ",t.createElement("i",{className:"fas fa-microphone-slash "+(n.muted?"show":"hidden")})," ",t.createElement("i",{class:"fas fa-circle "+(n.screensharing?"show":"hidden")})))))):t.createElement(t.Fragment,null)),C?t.createElement("div",{className:"dragging"},t.createElement("div",{className:"middle"},t.createElement("i",{class:"fas fa-upload icon"}),t.createElement("h4",null,"Upload file now"))):t.createElement(t.Fragment,null),k?t.createElement("div",{className:"uploading"},t.createElement("div",{className:"progressbar"},t.createElement("div",{className:"progress",style:{width:B.toString()+"%"}},t.createElement("span",{className:"text"},B.toString(),"%")))):t.createElement(t.Fragment,null))};const De=(0,t.forwardRef)(Me);var Ue=null,He="",qe=[255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,62,255,255,255,63,52,53,54,55,56,57,58,59,60,61,255,255,255,0,255,255,255,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,255,255,255,255,255,255,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51];function We(e){if(e>=qe.length)throw new Error("Unable to parse base64 string.");var t=qe[e];if(255===t)throw new Error("Unable to parse base64 string.");return t}const Ve=e=>{var[n,r]=(0,t.useState)(!1),[o,a]=(0,t.useState)(electron.utilApi.createKeys()),[i,s]=(0,t.useState)(""),[l,u]=(0,t.useState)("");(0,t.useEffect)((()=>{He=l}),[l]);var d=(0,t.useRef)(),f=()=>{Ue.disconnect(),Ue=null,r(!1)};return t.createElement("div",{className:"page main"},n?t.createElement(De,{socket:Ue,username:i,whowatchomg:e=>u(e),userInfos:e.userInfos,keyPair:o,keyHash:e.userInfos.keyHash,disconnect:f,ref:d}):t.createElement(c,{userInfos:e.userInfos,connectToServerHandle:(t,n,a)=>{t.preventDefault(),s(a),Ue=Ne("http://"+n,{"reconnection delay":100,"max reconnection attempts":4});var i="",l=[];Ue.on("disconnect",(function(){f()})),Ue.on("connect",(()=>{electron.configApi.writeConfigConnect(n,a),Ue.on("publicKey",(t=>{r(!0);var s=function(e){for(var t="",n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",r=n.length,o=0;o<32;o++)t+=n.charAt(Math.floor(Math.random()*r));return t}();Ue.emit("connection",electron.utilApi.enc(JSON.stringify({username:a,keyHash:e.userInfos.keyHash,publicKey:o.publicKey}),s),electron.utilApi.encRSA(s,t)),Ue.on("infos",(function(e,r){var a=JSON.parse(electron.utilApi.dec(e,(new TextDecoder).decode(electron.utilApi.decRSA(r,o.privateKey))));d.current.setServerInfos({endpoint:n,motd:a.motd,publicKey:t,mainKey:a.mainKey}),i=a.mainKey})),Ue.on("clientList",(function(e,t){var n=JSON.parse(electron.utilApi.dec(e,(new TextDecoder).decode(electron.utilApi.decRSA(t,o.privateKey))));d.current.setChannels([{name:"main",socketId:"none",unread:0}]),n.forEach((e=>{d.current.setChannels((t=>[...t,{name:e.username,socketId:e.socketId,publicKey:e.publicKey,unread:0}])),l.push({name:e.username,publicKey:e.publicKey})}))})),Ue.on("kick",(function(e,t){Ue.disconnect(),d.current.setConnected(!1),alert(electron.utilApi.dec(e,(new TextDecoder).decode(electron.utilApi.decRSA(t,o.privateKey))))})),Ue.on("message",(function(e,t){var n=JSON.parse(electron.utilApi.dec(e,(new TextDecoder).decode(electron.utilApi.decRSA(t,o.privateKey))).toString()),r=document.querySelector("#root > div > div.page.main > div > div.panel > div > div"),i=r.scrollTop+r.clientHeight>r.scrollHeight-50,s=electron.utilApi.dec(n.message,(new TextDecoder).decode(electron.utilApi.decRSA(function(e){if(e.length%4!=0)throw new Error("Unable to parse base64 string.");var t=e.indexOf("=");if(-1!==t&&t<e.length-2)throw new Error("Unable to parse base64 string.");for(var n,r=e.endsWith("==")?2:e.endsWith("=")?1:0,o=e.length,a=new Uint8Array(o/4*3),i=0,s=0;i<o;i+=4,s+=3)n=We(e.charCodeAt(i))<<18|We(e.charCodeAt(i+1))<<12|We(e.charCodeAt(i+2))<<6|We(e.charCodeAt(i+3)),a[s]=n>>16,a[s+1]=n>>8&255,a[s+2]=255&n;return a.subarray(0,a.length-r)}(n.encryptionKey),o.privateKey)));d.current.addNotification(n.isMain?"main":n.author==a?n.receiverName:n.author),d.current.setMessagesStored((e=>[...e,{channel:n.isMain?"main":n.author==a?n.receiverName:n.author,author:n.author,content:s,owned:n.author==a,isFile:!1,data:null,filename:null,isImage:!1}])),i&&(r.scrollTop=r.scrollHeight)})),Ue.on("file",(e=>{var t=document.querySelector("#root > div > div.page.main > div > div.panel > div > div"),n=t.scrollTop+t.clientHeight>t.scrollHeight-50;d.current.addNotification(e.isMain?"main":e.from==a?e.receiver:e.from);var r=new Blob([e.data],{type:e.type});d.current.setMessagesStored((t=>[...t,{channel:e.isMain?"main":filedataDecrypt.from==a?e.receiver:e.from,author:e.from,content:"",owned:e.from==a,isFile:!0,data:e.data,bloburl:e.isImage?window.URL.createObjectURL(r):null,filename:e.filename,isImage:e.isImage,type:e.type}])),n&&(t.scrollTop=t.scrollHeight)})),Ue.on("screenshare",((e,t)=>{if(console.log(t,He),console.log(He),t==He){console.log("omg");var n=new TextEncoder,r=new Blob([Crypto.pkcs_unpad(Crypto.decrypt_aes_cbc(e,n.encode(i.slice(0,16)).buffer,n.encode(i.slice(0,16)).buffer))],{type:"video/webm"});d.current.setblobscreenshare(r)}})),Ue.on("joinedcall",(()=>{new Audio("./connected.wav").play()})),Ue.on("joinedcall",(()=>{new Audio("./connected.wav").play()})),Ue.on("disconnectcall",(()=>{new Audio("./disconnect.wav").play()})),Ue.on("callList",((e,t)=>{var n=JSON.parse(electron.utilApi.dec(e,(new TextDecoder).decode(electron.utilApi.decRSA(t,o.privateKey))));d.current.setClientCallList(n)})),Ue.on("voice",(function(e){var t=new TextEncoder,n=new Blob([Crypto.pkcs_unpad(Crypto.decrypt_aes_cbc(e,t.encode(i.slice(0,16)).buffer,t.encode(i.slice(0,16)).buffer))],{type:"audio/webm; codecs=opus"}),r=document.createElement("audio");r.src=window.URL.createObjectURL(n),r.play()}))}))}))}}))},Ke=()=>{var[e,n]=(0,t.useState)(!1);return t.createElement("div",{className:"clear-data "+(e?"opened":"closed")},e?t.createElement("div",{className:"confirm"},t.createElement("h4",{className:"text-normal"},"Do you really want to delete all your data ?",t.createElement("br",null),t.createElement("span",{className:"infotext"},"(You will loose your account, messages, server history and you cannot undo, files are encrypted)")),t.createElement("div",{className:"buttons"},t.createElement("button",{className:"form-button-outline",onClick:()=>n(!1)},"Cancel"),t.createElement("button",{className:"form-button",onClick:()=>{electron.configApi.clearData(),window.location.reload()}},"Delete"))):t.createElement(t.Fragment,null),t.createElement("button",{className:"form-button-outline cleardata-btn",onClick:()=>n(!0)},"Clear data"))},Je=()=>{var[e,n]=(0,t.useState)(!1),[r,o]=(0,t.useState)({});return(0,t.useEffect)((()=>{Be().get("https://api.github.com/repos/Drayneur/cryptoip/releases").then((e=>{"1.8"!=e.data[0].tag_name&&alert("New version: "+e.data[0].tag_name+" with name: "+e.data[0].name)}))}),[]),t.createElement("div",{className:"page"},t.createElement(s,null),electron.configApi.isRegister()?t.createElement(t.Fragment,null,e?t.createElement(Ve,{userInfos:r,handleData:o}):t.createElement(u,{handleLogged:n,handleData:o})):t.createElement(l,null),t.createElement(Ke,null))};r.render(t.createElement(Je,null),document.getElementById("root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,